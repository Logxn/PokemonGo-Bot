// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Envelopes/SignalLog.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Networking.Envelopes {

  /// <summary>Holder for reflection information generated from POGOProtos/Networking/Envelopes/SignalLog.proto</summary>
  public static partial class SignalLogReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Networking/Envelopes/SignalLog.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SignalLogReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9QT0dPUHJvdG9zL05ldHdvcmtpbmcvRW52ZWxvcGVzL1NpZ25hbExvZy5w",
            "cm90bxIfUE9HT1Byb3Rvcy5OZXR3b3JraW5nLkVudmVsb3BlcyLNBgoJU2ln",
            "bmFsTG9nEg4KBmZpZWxkMRgBIAMoDBIgChh0aW1lc3RhbXBfbXNfc2luY2Vf",
            "c3RhcnQYAiABKAMSEQoJZGV2aWNlX2lkGAMgASgJEkkKEGxvY2F0aW9uX3Vw",
            "ZGF0ZXMYBCADKAsyLy5QT0dPUHJvdG9zLk5ldHdvcmtpbmcuRW52ZWxvcGVz",
            "LkxvY2F0aW9uVXBkYXRlEkkKEGFuZHJvaWRfZ3BzX2luZm8YBSADKAsyLy5Q",
            "T0dPUHJvdG9zLk5ldHdvcmtpbmcuRW52ZWxvcGVzLkFuZHJvaWRHcHNJbmZv",
            "Ej0KCmFjdGl2aXRpZXMYBiADKAsyKS5QT0dPUHJvdG9zLk5ldHdvcmtpbmcu",
            "RW52ZWxvcGVzLkFjdGl2aXR5EkUKDnNlbnNvcl91cGRhdGVzGAcgAygLMi0u",
            "UE9HT1Byb3Rvcy5OZXR3b3JraW5nLkVudmVsb3Blcy5TZW5zb3JVcGRhdGUS",
            "RwoLZGV2aWNlX2luZm8YCCABKAsyMi5QT0dPUHJvdG9zLk5ldHdvcmtpbmcu",
            "RW52ZWxvcGVzLkRldmljZUluZm9ybWF0aW9uEkcKD2lvc19kZXZpY2VfaW5m",
            "bxgJIAEoCzIuLlBPR09Qcm90b3MuTmV0d29ya2luZy5FbnZlbG9wZXMuSU9T",
            "RGV2aWNlSW5mbxIjChtsb2NhdGlvbl9oYXNoX2J5X3Rva2VuX3NlZWQYCiAB",
            "KAUSDwoHZmllbGQxMRgLIAEoCBIPCgdmaWVsZDEyGAwgASgIEg8KB2ZpZWxk",
            "MTMYDSABKAUSDwoHZmllbGQxNBgOIAEoBRIVCg1idWlsZF92ZXJzaW9uGA8g",
            "ASgJEg8KB2ZpZWxkMTYYECABKAUSEgoKYXV0aF90b2tlbhgRIAEoCRIUCgxw",
            "YWNrYWdlX25hbWUYEiABKAkSDwoHZmllbGQxORgTIAEoCBIVCg1sb2NhdGlv",
            "bl9oYXNoGBQgASgFEg8KB2ZpZWxkMjEYFSABKAgSDwoHZmllbGQyMhgWIAEo",
            "DBIaChJlcG9jaF90aW1lc3RhbXBfbXMYFyABKAMSFgoOcmVxdWVzdF9oYXNo",
            "ZXMYGCADKAMSFAoMdmVyc2lvbl9oYXNoGBkgASgDIvoBCghBY3Rpdml0eRIV",
            "Cg1zdGFydF90aW1lX21zGAEgASgDEg8KB3Vua25vd24YAiABKAUSDwoHd2Fs",
            "a2luZxgDIAEoBRIPCgdydW5uaW5nGAQgASgFEhIKCnN0YXRpb25hcnkYBSAB",
            "KAUSEgoKYXV0b21vdGl2ZRgGIAEoBRIPCgd0aWx0aW5nGAcgASgFEg8KB2N5",
            "Y2xpbmcYCCABKAUSQAoGc3RhdHVzGAkgASgOMjAuUE9HT1Byb3Rvcy5OZXR3",
            "b3JraW5nLkVudmVsb3Blcy5BY3Rpdml0eS5TdGF0dXMiGAoGU3RhdHVzEg4K",
            "ClNUQVRVU19VTksQACKNBAoMU2Vuc29yVXBkYXRlEhEKCXRpbWVzdGFtcBgB",
            "IAEoAxIWCg5hY2NlbGVyYXRpb25feBgDIAEoARIWCg5hY2NlbGVyYXRpb25f",
            "eRgEIAEoARIWCg5hY2NlbGVyYXRpb25fehgFIAEoARIYChBtYWduZXRpY19m",
            "aWVsZF94GAYgASgBEhgKEG1hZ25ldGljX2ZpZWxkX3kYByABKAESGAoQbWFn",
            "bmV0aWNfZmllbGRfehgIIAEoARIfChdtYWduZXRpY19maWVsZF9hY2N1cmFj",
            "eRgJIAEoBRIWCg5hdHRpdHVkZV9waXRjaBgKIAEoARIUCgxhdHRpdHVkZV95",
            "YXcYCyABKAESFQoNYXR0aXR1ZGVfcm9sbBgMIAEoARIXCg9yb3RhdGlvbl9y",
            "YXRlX3gYDSABKAESFwoPcm90YXRpb25fcmF0ZV95GA4gASgBEhcKD3JvdGF0",
            "aW9uX3JhdGVfehgPIAEoARIRCglncmF2aXR5X3gYECABKAESEQoJZ3Jhdml0",
            "eV95GBEgASgBEhEKCWdyYXZpdHlfehgSIAEoARJECgZzdGF0dXMYEyABKA4y",
            "NC5QT0dPUHJvdG9zLk5ldHdvcmtpbmcuRW52ZWxvcGVzLlNlbnNvclVwZGF0",
            "ZS5TdGF0dXMiJAoGU3RhdHVzEg4KClNUQVRVU19VTksQABIKCgZOT1JNQUwQ",
            "AyK8BAoOTG9jYXRpb25VcGRhdGUSDAoEbmFtZRgBIAEoCRIUCgx0aW1lc3Rh",
            "bXBfbXMYAiABKAMSEAoIYWx0aXR1ZGUYBCABKAISEAoIbGF0aXR1ZGUYDSAB",
            "KAISEQoJbG9uZ2l0dWRlGA4gASgCEhQKDGRldmljZV9zcGVlZBgSIAEoAhIV",
            "Cg1kZXZpY2VfY291cnNlGBQgASgCEhsKE2hvcml6b250YWxfYWNjdXJhY3kY",
            "FSABKAISGQoRdmVydGljYWxfYWNjdXJhY3kYFiABKAISVgoPcHJvdmlkZXJf",
            "c3RhdHVzGBogASgOMj0uUE9HT1Byb3Rvcy5OZXR3b3JraW5nLkVudmVsb3Bl",
            "cy5Mb2NhdGlvblVwZGF0ZS5TZXJ2aWNlU3RhdHVzEg0KBWZsb29yGBsgASgD",
            "ElMKDWxvY2F0aW9uX3R5cGUYHCABKA4yPC5QT0dPUHJvdG9zLk5ldHdvcmtp",
            "bmcuRW52ZWxvcGVzLkxvY2F0aW9uVXBkYXRlLkxvY2F0aW9uVHlwZSJsCg1T",
            "ZXJ2aWNlU3RhdHVzEgoKBkZBSUxFRBAAEg8KC0lOSVRJQUxJWkVEEAESFQoR",
            "UEVSTUlTU0lPTl9ERU5JRUQQAhILCgdSVU5OSU5HEAMSCwoHU1RPUFBFRBAE",
            "Eg0KCVVOREVGSU5FRBAFIkAKDExvY2F0aW9uVHlwZRIICgROT05FEAASEwoP",
            "Tk9STUFMX1BST1ZJREVSEAESEQoNTU9DS19QUk9WSURFUhACIvUBChFEZXZp",
            "Y2VJbmZvcm1hdGlvbhIRCglkZXZpY2VfaWQYASABKAkSDQoFYm9hcmQYAiAB",
            "KAkSEgoKYm9vdGxvYWRlchgDIAEoCRINCgVicmFuZBgEIAEoCRIOCgZkZXZp",
            "Y2UYBSABKAkSDwoHZGlzcGxheRgGIAEoCRIQCghoYXJkd2FyZRgHIAEoCRIU",
            "CgxtYW51ZmFjdHVyZXIYCCABKAkSDQoFbW9kZWwYCSABKAkSDwoHcHJvZHVj",
            "dBgKIAEoCRIMCgR0YWdzGAwgASgJEg8KB3ZlcnNpb24YDSABKAkSEwoLZmlu",
            "Z2VycHJpbnQYDiABKAkipgEKDUlPU0RldmljZUluZm8SDQoFYm9vbDEYASAB",
            "KAgSDQoFYm9vbDIYAiABKAgSDQoFYm9vbDMYAyABKAgSDQoFYm9vbDQYBCAB",
            "KAgSDQoFYm9vbDUYBSABKAgSDQoFYm9vbDYYBiABKAgSDQoFYm9vbDcYByAB",
            "KAgSDQoFYm9vbDgYCCABKAgSDQoFYm9vbDkYCSABKAgSDgoGYm9vbDEwGAog",
            "ASgIIq8BCg5BbmRyb2lkR3BzSW5mbxITCgt0aW1lX3RvX2ZpeBgBIAEoAxIW",
            "Cg5zYXRlbGxpdGVzX3BybhgCIAMoBRIPCgdhemltdXRoGAMgAygCEhEKCWVs",
            "ZXZhdGlvbhgEIAMoAhILCgNzbnIYBSADKAISEwoLaGFzX2FsbWFuYWMYBiAD",
            "KAgSFQoNaGFzX2VwaGVtZXJpcxgHIAMoCBITCgt1c2VkX2luX2ZpeBgIIAMo",
            "CGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Envelopes.SignalLog), global::POGOProtos.Networking.Envelopes.SignalLog.Parser, new[]{ "Field1", "TimestampMsSinceStart", "DeviceId", "LocationUpdates", "AndroidGpsInfo", "Activities", "SensorUpdates", "DeviceInfo", "IosDeviceInfo", "LocationHashByTokenSeed", "Field11", "Field12", "Field13", "Field14", "BuildVersion", "Field16", "AuthToken", "PackageName", "Field19", "LocationHash", "Field21", "Field22", "EpochTimestampMs", "RequestHashes", "VersionHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Envelopes.Activity), global::POGOProtos.Networking.Envelopes.Activity.Parser, new[]{ "StartTimeMs", "Unknown", "Walking", "Running", "Stationary", "Automotive", "Tilting", "Cycling", "Status" }, null, new[]{ typeof(global::POGOProtos.Networking.Envelopes.Activity.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Envelopes.SensorUpdate), global::POGOProtos.Networking.Envelopes.SensorUpdate.Parser, new[]{ "Timestamp", "AccelerationX", "AccelerationY", "AccelerationZ", "MagneticFieldX", "MagneticFieldY", "MagneticFieldZ", "MagneticFieldAccuracy", "AttitudePitch", "AttitudeYaw", "AttitudeRoll", "RotationRateX", "RotationRateY", "RotationRateZ", "GravityX", "GravityY", "GravityZ", "Status" }, null, new[]{ typeof(global::POGOProtos.Networking.Envelopes.SensorUpdate.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Envelopes.LocationUpdate), global::POGOProtos.Networking.Envelopes.LocationUpdate.Parser, new[]{ "Name", "TimestampMs", "Altitude", "Latitude", "Longitude", "DeviceSpeed", "DeviceCourse", "HorizontalAccuracy", "VerticalAccuracy", "ProviderStatus", "Floor", "LocationType" }, null, new[]{ typeof(global::POGOProtos.Networking.Envelopes.LocationUpdate.Types.ServiceStatus), typeof(global::POGOProtos.Networking.Envelopes.LocationUpdate.Types.LocationType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Envelopes.DeviceInformation), global::POGOProtos.Networking.Envelopes.DeviceInformation.Parser, new[]{ "DeviceId", "Board", "Bootloader", "Brand", "Device", "Display", "Hardware", "Manufacturer", "Model", "Product", "Tags", "Version", "Fingerprint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Envelopes.IOSDeviceInfo), global::POGOProtos.Networking.Envelopes.IOSDeviceInfo.Parser, new[]{ "Bool1", "Bool2", "Bool3", "Bool4", "Bool5", "Bool6", "Bool7", "Bool8", "Bool9", "Bool10" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Envelopes.AndroidGpsInfo), global::POGOProtos.Networking.Envelopes.AndroidGpsInfo.Parser, new[]{ "TimeToFix", "SatellitesPrn", "Azimuth", "Elevation", "Snr", "HasAlmanac", "HasEphemeris", "UsedInFix" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SignalLog : pb::IMessage<SignalLog> {
    private static readonly pb::MessageParser<SignalLog> _parser = new pb::MessageParser<SignalLog>(() => new SignalLog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignalLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Envelopes.SignalLogReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignalLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignalLog(SignalLog other) : this() {
      field1_ = other.field1_.Clone();
      timestampMsSinceStart_ = other.timestampMsSinceStart_;
      deviceId_ = other.deviceId_;
      locationUpdates_ = other.locationUpdates_.Clone();
      androidGpsInfo_ = other.androidGpsInfo_.Clone();
      activities_ = other.activities_.Clone();
      sensorUpdates_ = other.sensorUpdates_.Clone();
      DeviceInfo = other.deviceInfo_ != null ? other.DeviceInfo.Clone() : null;
      IosDeviceInfo = other.iosDeviceInfo_ != null ? other.IosDeviceInfo.Clone() : null;
      locationHashByTokenSeed_ = other.locationHashByTokenSeed_;
      field11_ = other.field11_;
      field12_ = other.field12_;
      field13_ = other.field13_;
      field14_ = other.field14_;
      buildVersion_ = other.buildVersion_;
      field16_ = other.field16_;
      authToken_ = other.authToken_;
      packageName_ = other.packageName_;
      field19_ = other.field19_;
      locationHash_ = other.locationHash_;
      field21_ = other.field21_;
      field22_ = other.field22_;
      epochTimestampMs_ = other.epochTimestampMs_;
      requestHashes_ = other.requestHashes_.Clone();
      versionHash_ = other.versionHash_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignalLog Clone() {
      return new SignalLog(this);
    }

    /// <summary>Field number for the "field1" field.</summary>
    public const int Field1FieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_field1_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> field1_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Field1 {
      get { return field1_; }
    }

    /// <summary>Field number for the "timestamp_ms_since_start" field.</summary>
    public const int TimestampMsSinceStartFieldNumber = 2;
    private long timestampMsSinceStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimestampMsSinceStart {
      get { return timestampMsSinceStart_; }
      set {
        timestampMsSinceStart_ = value;
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 3;
    private string deviceId_ = "";
    /// <summary>
    /// nia.hardware.SignalLog.device_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location_updates" field.</summary>
    public const int LocationUpdatesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Envelopes.LocationUpdate> _repeated_locationUpdates_codec
        = pb::FieldCodec.ForMessage(34, global::POGOProtos.Networking.Envelopes.LocationUpdate.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.LocationUpdate> locationUpdates_ = new pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.LocationUpdate>();
    /// <summary>
    /// Multiple location updates at a time. This is all the updates since the last time we sent a request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.LocationUpdate> LocationUpdates {
      get { return locationUpdates_; }
    }

    /// <summary>Field number for the "android_gps_info" field.</summary>
    public const int AndroidGpsInfoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Envelopes.AndroidGpsInfo> _repeated_androidGpsInfo_codec
        = pb::FieldCodec.ForMessage(42, global::POGOProtos.Networking.Envelopes.AndroidGpsInfo.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.AndroidGpsInfo> androidGpsInfo_ = new pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.AndroidGpsInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.AndroidGpsInfo> AndroidGpsInfo {
      get { return androidGpsInfo_; }
    }

    /// <summary>Field number for the "activities" field.</summary>
    public const int ActivitiesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Envelopes.Activity> _repeated_activities_codec
        = pb::FieldCodec.ForMessage(50, global::POGOProtos.Networking.Envelopes.Activity.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.Activity> activities_ = new pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.Activity>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.Activity> Activities {
      get { return activities_; }
    }

    /// <summary>Field number for the "sensor_updates" field.</summary>
    public const int SensorUpdatesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Envelopes.SensorUpdate> _repeated_sensorUpdates_codec
        = pb::FieldCodec.ForMessage(58, global::POGOProtos.Networking.Envelopes.SensorUpdate.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.SensorUpdate> sensorUpdates_ = new pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.SensorUpdate>();
    /// <summary>
    /// All the sensor updates since the last time we sent a request. (Seems to actually be throttled to 1-3 at a time)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.SensorUpdate> SensorUpdates {
      get { return sensorUpdates_; }
    }

    /// <summary>Field number for the "device_info" field.</summary>
    public const int DeviceInfoFieldNumber = 8;
    private global::POGOProtos.Networking.Envelopes.DeviceInformation deviceInfo_;
    /// <summary>
    /// device info - need to find this still to verify everything
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Envelopes.DeviceInformation DeviceInfo {
      get { return deviceInfo_; }
      set {
        deviceInfo_ = value;
      }
    }

    /// <summary>Field number for the "ios_device_info" field.</summary>
    public const int IosDeviceInfoFieldNumber = 9;
    private global::POGOProtos.Networking.Envelopes.IOSDeviceInfo iosDeviceInfo_;
    /// <summary>
    /// iOS only - likely device capabilities? (Or even simpler being iOS device version flags)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Envelopes.IOSDeviceInfo IosDeviceInfo {
      get { return iosDeviceInfo_; }
      set {
        iosDeviceInfo_ = value;
      }
    }

    /// <summary>Field number for the "location_hash_by_token_seed" field.</summary>
    public const int LocationHashByTokenSeedFieldNumber = 10;
    private int locationHashByTokenSeed_;
    /// <summary>
    /// Hashed location using the auth token as the seed (hashed auth token -> location hash seed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocationHashByTokenSeed {
      get { return locationHashByTokenSeed_; }
      set {
        locationHashByTokenSeed_ = value;
      }
    }

    /// <summary>Field number for the "field11" field.</summary>
    public const int Field11FieldNumber = 11;
    private bool field11_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Field11 {
      get { return field11_; }
      set {
        field11_ = value;
      }
    }

    /// <summary>Field number for the "field12" field.</summary>
    public const int Field12FieldNumber = 12;
    private bool field12_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Field12 {
      get { return field12_; }
      set {
        field12_ = value;
      }
    }

    /// <summary>Field number for the "field13" field.</summary>
    public const int Field13FieldNumber = 13;
    private int field13_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Field13 {
      get { return field13_; }
      set {
        field13_ = value;
      }
    }

    /// <summary>Field number for the "field14" field.</summary>
    public const int Field14FieldNumber = 14;
    private int field14_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Field14 {
      get { return field14_; }
      set {
        field14_ = value;
      }
    }

    /// <summary>Field number for the "build_version" field.</summary>
    public const int BuildVersionFieldNumber = 15;
    private string buildVersion_ = "";
    /// <summary>
    /// nia.hardware.SignalLog.build_version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuildVersion {
      get { return buildVersion_; }
      set {
        buildVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "field16" field.</summary>
    public const int Field16FieldNumber = 16;
    private int field16_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Field16 {
      get { return field16_; }
      set {
        field16_ = value;
      }
    }

    /// <summary>Field number for the "auth_token" field.</summary>
    public const int AuthTokenFieldNumber = 17;
    private string authToken_ = "";
    /// <summary>
    /// nia.hardware.SignalLog.auth_token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthToken {
      get { return authToken_; }
      set {
        authToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "package_name" field.</summary>
    public const int PackageNameFieldNumber = 18;
    private string packageName_ = "";
    /// <summary>
    /// nia.hardware.SignalLog.package_name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PackageName {
      get { return packageName_; }
      set {
        packageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "field19" field.</summary>
    public const int Field19FieldNumber = 19;
    private bool field19_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Field19 {
      get { return field19_; }
      set {
        field19_ = value;
      }
    }

    /// <summary>Field number for the "location_hash" field.</summary>
    public const int LocationHashFieldNumber = 20;
    private int locationHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocationHash {
      get { return locationHash_; }
      set {
        locationHash_ = value;
      }
    }

    /// <summary>Field number for the "field21" field.</summary>
    public const int Field21FieldNumber = 21;
    private bool field21_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Field21 {
      get { return field21_; }
      set {
        field21_ = value;
      }
    }

    /// <summary>Field number for the "field22" field.</summary>
    public const int Field22FieldNumber = 22;
    private pb::ByteString field22_ = pb::ByteString.Empty;
    /// <summary>
    /// 32 random bytes, unique per session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Field22 {
      get { return field22_; }
      set {
        field22_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "epoch_timestamp_ms" field.</summary>
    public const int EpochTimestampMsFieldNumber = 23;
    private long epochTimestampMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EpochTimestampMs {
      get { return epochTimestampMs_; }
      set {
        epochTimestampMs_ = value;
      }
    }

    /// <summary>Field number for the "request_hashes" field.</summary>
    public const int RequestHashesFieldNumber = 24;
    private static readonly pb::FieldCodec<long> _repeated_requestHashes_codec
        = pb::FieldCodec.ForInt64(194);
    private readonly pbc::RepeatedField<long> requestHashes_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// hashes of each request message in a hashArray signed based on the auth_token or auth_info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> RequestHashes {
      get { return requestHashes_; }
    }

    /// <summary>Field number for the "version_hash" field.</summary>
    public const int VersionHashFieldNumber = 25;
    private long versionHash_;
    /// <summary>
    /// Grover_c13 claims this is a xxHash64 of a SHA1 for the current version of the game? Yet to be confirmed, but possible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VersionHash {
      get { return versionHash_; }
      set {
        versionHash_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignalLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignalLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!field1_.Equals(other.field1_)) return false;
      if (TimestampMsSinceStart != other.TimestampMsSinceStart) return false;
      if (DeviceId != other.DeviceId) return false;
      if(!locationUpdates_.Equals(other.locationUpdates_)) return false;
      if(!androidGpsInfo_.Equals(other.androidGpsInfo_)) return false;
      if(!activities_.Equals(other.activities_)) return false;
      if(!sensorUpdates_.Equals(other.sensorUpdates_)) return false;
      if (!object.Equals(DeviceInfo, other.DeviceInfo)) return false;
      if (!object.Equals(IosDeviceInfo, other.IosDeviceInfo)) return false;
      if (LocationHashByTokenSeed != other.LocationHashByTokenSeed) return false;
      if (Field11 != other.Field11) return false;
      if (Field12 != other.Field12) return false;
      if (Field13 != other.Field13) return false;
      if (Field14 != other.Field14) return false;
      if (BuildVersion != other.BuildVersion) return false;
      if (Field16 != other.Field16) return false;
      if (AuthToken != other.AuthToken) return false;
      if (PackageName != other.PackageName) return false;
      if (Field19 != other.Field19) return false;
      if (LocationHash != other.LocationHash) return false;
      if (Field21 != other.Field21) return false;
      if (Field22 != other.Field22) return false;
      if (EpochTimestampMs != other.EpochTimestampMs) return false;
      if(!requestHashes_.Equals(other.requestHashes_)) return false;
      if (VersionHash != other.VersionHash) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= field1_.GetHashCode();
      if (TimestampMsSinceStart != 0L) hash ^= TimestampMsSinceStart.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      hash ^= locationUpdates_.GetHashCode();
      hash ^= androidGpsInfo_.GetHashCode();
      hash ^= activities_.GetHashCode();
      hash ^= sensorUpdates_.GetHashCode();
      if (deviceInfo_ != null) hash ^= DeviceInfo.GetHashCode();
      if (iosDeviceInfo_ != null) hash ^= IosDeviceInfo.GetHashCode();
      if (LocationHashByTokenSeed != 0) hash ^= LocationHashByTokenSeed.GetHashCode();
      if (Field11 != false) hash ^= Field11.GetHashCode();
      if (Field12 != false) hash ^= Field12.GetHashCode();
      if (Field13 != 0) hash ^= Field13.GetHashCode();
      if (Field14 != 0) hash ^= Field14.GetHashCode();
      if (BuildVersion.Length != 0) hash ^= BuildVersion.GetHashCode();
      if (Field16 != 0) hash ^= Field16.GetHashCode();
      if (AuthToken.Length != 0) hash ^= AuthToken.GetHashCode();
      if (PackageName.Length != 0) hash ^= PackageName.GetHashCode();
      if (Field19 != false) hash ^= Field19.GetHashCode();
      if (LocationHash != 0) hash ^= LocationHash.GetHashCode();
      if (Field21 != false) hash ^= Field21.GetHashCode();
      if (Field22.Length != 0) hash ^= Field22.GetHashCode();
      if (EpochTimestampMs != 0L) hash ^= EpochTimestampMs.GetHashCode();
      hash ^= requestHashes_.GetHashCode();
      if (VersionHash != 0L) hash ^= VersionHash.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      field1_.WriteTo(output, _repeated_field1_codec);
      if (TimestampMsSinceStart != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TimestampMsSinceStart);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeviceId);
      }
      locationUpdates_.WriteTo(output, _repeated_locationUpdates_codec);
      androidGpsInfo_.WriteTo(output, _repeated_androidGpsInfo_codec);
      activities_.WriteTo(output, _repeated_activities_codec);
      sensorUpdates_.WriteTo(output, _repeated_sensorUpdates_codec);
      if (deviceInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(DeviceInfo);
      }
      if (iosDeviceInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(IosDeviceInfo);
      }
      if (LocationHashByTokenSeed != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LocationHashByTokenSeed);
      }
      if (Field11 != false) {
        output.WriteRawTag(88);
        output.WriteBool(Field11);
      }
      if (Field12 != false) {
        output.WriteRawTag(96);
        output.WriteBool(Field12);
      }
      if (Field13 != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Field13);
      }
      if (Field14 != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Field14);
      }
      if (BuildVersion.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(BuildVersion);
      }
      if (Field16 != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Field16);
      }
      if (AuthToken.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(AuthToken);
      }
      if (PackageName.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(PackageName);
      }
      if (Field19 != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(Field19);
      }
      if (LocationHash != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(LocationHash);
      }
      if (Field21 != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(Field21);
      }
      if (Field22.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteBytes(Field22);
      }
      if (EpochTimestampMs != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(EpochTimestampMs);
      }
      requestHashes_.WriteTo(output, _repeated_requestHashes_codec);
      if (VersionHash != 0L) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(VersionHash);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += field1_.CalculateSize(_repeated_field1_codec);
      if (TimestampMsSinceStart != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimestampMsSinceStart);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      size += locationUpdates_.CalculateSize(_repeated_locationUpdates_codec);
      size += androidGpsInfo_.CalculateSize(_repeated_androidGpsInfo_codec);
      size += activities_.CalculateSize(_repeated_activities_codec);
      size += sensorUpdates_.CalculateSize(_repeated_sensorUpdates_codec);
      if (deviceInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceInfo);
      }
      if (iosDeviceInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IosDeviceInfo);
      }
      if (LocationHashByTokenSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocationHashByTokenSeed);
      }
      if (Field11 != false) {
        size += 1 + 1;
      }
      if (Field12 != false) {
        size += 1 + 1;
      }
      if (Field13 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Field13);
      }
      if (Field14 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Field14);
      }
      if (BuildVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuildVersion);
      }
      if (Field16 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Field16);
      }
      if (AuthToken.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AuthToken);
      }
      if (PackageName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PackageName);
      }
      if (Field19 != false) {
        size += 2 + 1;
      }
      if (LocationHash != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LocationHash);
      }
      if (Field21 != false) {
        size += 2 + 1;
      }
      if (Field22.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Field22);
      }
      if (EpochTimestampMs != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(EpochTimestampMs);
      }
      size += requestHashes_.CalculateSize(_repeated_requestHashes_codec);
      if (VersionHash != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(VersionHash);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignalLog other) {
      if (other == null) {
        return;
      }
      field1_.Add(other.field1_);
      if (other.TimestampMsSinceStart != 0L) {
        TimestampMsSinceStart = other.TimestampMsSinceStart;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      locationUpdates_.Add(other.locationUpdates_);
      androidGpsInfo_.Add(other.androidGpsInfo_);
      activities_.Add(other.activities_);
      sensorUpdates_.Add(other.sensorUpdates_);
      if (other.deviceInfo_ != null) {
        if (deviceInfo_ == null) {
          deviceInfo_ = new global::POGOProtos.Networking.Envelopes.DeviceInformation();
        }
        DeviceInfo.MergeFrom(other.DeviceInfo);
      }
      if (other.iosDeviceInfo_ != null) {
        if (iosDeviceInfo_ == null) {
          iosDeviceInfo_ = new global::POGOProtos.Networking.Envelopes.IOSDeviceInfo();
        }
        IosDeviceInfo.MergeFrom(other.IosDeviceInfo);
      }
      if (other.LocationHashByTokenSeed != 0) {
        LocationHashByTokenSeed = other.LocationHashByTokenSeed;
      }
      if (other.Field11 != false) {
        Field11 = other.Field11;
      }
      if (other.Field12 != false) {
        Field12 = other.Field12;
      }
      if (other.Field13 != 0) {
        Field13 = other.Field13;
      }
      if (other.Field14 != 0) {
        Field14 = other.Field14;
      }
      if (other.BuildVersion.Length != 0) {
        BuildVersion = other.BuildVersion;
      }
      if (other.Field16 != 0) {
        Field16 = other.Field16;
      }
      if (other.AuthToken.Length != 0) {
        AuthToken = other.AuthToken;
      }
      if (other.PackageName.Length != 0) {
        PackageName = other.PackageName;
      }
      if (other.Field19 != false) {
        Field19 = other.Field19;
      }
      if (other.LocationHash != 0) {
        LocationHash = other.LocationHash;
      }
      if (other.Field21 != false) {
        Field21 = other.Field21;
      }
      if (other.Field22.Length != 0) {
        Field22 = other.Field22;
      }
      if (other.EpochTimestampMs != 0L) {
        EpochTimestampMs = other.EpochTimestampMs;
      }
      requestHashes_.Add(other.requestHashes_);
      if (other.VersionHash != 0L) {
        VersionHash = other.VersionHash;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            field1_.AddEntriesFrom(input, _repeated_field1_codec);
            break;
          }
          case 16: {
            TimestampMsSinceStart = input.ReadInt64();
            break;
          }
          case 26: {
            DeviceId = input.ReadString();
            break;
          }
          case 34: {
            locationUpdates_.AddEntriesFrom(input, _repeated_locationUpdates_codec);
            break;
          }
          case 42: {
            androidGpsInfo_.AddEntriesFrom(input, _repeated_androidGpsInfo_codec);
            break;
          }
          case 50: {
            activities_.AddEntriesFrom(input, _repeated_activities_codec);
            break;
          }
          case 58: {
            sensorUpdates_.AddEntriesFrom(input, _repeated_sensorUpdates_codec);
            break;
          }
          case 66: {
            if (deviceInfo_ == null) {
              deviceInfo_ = new global::POGOProtos.Networking.Envelopes.DeviceInformation();
            }
            input.ReadMessage(deviceInfo_);
            break;
          }
          case 74: {
            if (iosDeviceInfo_ == null) {
              iosDeviceInfo_ = new global::POGOProtos.Networking.Envelopes.IOSDeviceInfo();
            }
            input.ReadMessage(iosDeviceInfo_);
            break;
          }
          case 80: {
            LocationHashByTokenSeed = input.ReadInt32();
            break;
          }
          case 88: {
            Field11 = input.ReadBool();
            break;
          }
          case 96: {
            Field12 = input.ReadBool();
            break;
          }
          case 104: {
            Field13 = input.ReadInt32();
            break;
          }
          case 112: {
            Field14 = input.ReadInt32();
            break;
          }
          case 122: {
            BuildVersion = input.ReadString();
            break;
          }
          case 128: {
            Field16 = input.ReadInt32();
            break;
          }
          case 138: {
            AuthToken = input.ReadString();
            break;
          }
          case 146: {
            PackageName = input.ReadString();
            break;
          }
          case 152: {
            Field19 = input.ReadBool();
            break;
          }
          case 160: {
            LocationHash = input.ReadInt32();
            break;
          }
          case 168: {
            Field21 = input.ReadBool();
            break;
          }
          case 178: {
            Field22 = input.ReadBytes();
            break;
          }
          case 184: {
            EpochTimestampMs = input.ReadInt64();
            break;
          }
          case 194:
          case 192: {
            requestHashes_.AddEntriesFrom(input, _repeated_requestHashes_codec);
            break;
          }
          case 200: {
            VersionHash = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Activity : pb::IMessage<Activity> {
    private static readonly pb::MessageParser<Activity> _parser = new pb::MessageParser<Activity>(() => new Activity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Activity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Envelopes.SignalLogReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity(Activity other) : this() {
      startTimeMs_ = other.startTimeMs_;
      unknown_ = other.unknown_;
      walking_ = other.walking_;
      running_ = other.running_;
      stationary_ = other.stationary_;
      automotive_ = other.automotive_;
      tilting_ = other.tilting_;
      cycling_ = other.cycling_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity Clone() {
      return new Activity(this);
    }

    /// <summary>Field number for the "start_time_ms" field.</summary>
    public const int StartTimeMsFieldNumber = 1;
    private long startTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTimeMs {
      get { return startTimeMs_; }
      set {
        startTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "unknown" field.</summary>
    public const int UnknownFieldNumber = 2;
    private int unknown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unknown {
      get { return unknown_; }
      set {
        unknown_ = value;
      }
    }

    /// <summary>Field number for the "walking" field.</summary>
    public const int WalkingFieldNumber = 3;
    private int walking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Walking {
      get { return walking_; }
      set {
        walking_ = value;
      }
    }

    /// <summary>Field number for the "running" field.</summary>
    public const int RunningFieldNumber = 4;
    private int running_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Running {
      get { return running_; }
      set {
        running_ = value;
      }
    }

    /// <summary>Field number for the "stationary" field.</summary>
    public const int StationaryFieldNumber = 5;
    private int stationary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stationary {
      get { return stationary_; }
      set {
        stationary_ = value;
      }
    }

    /// <summary>Field number for the "automotive" field.</summary>
    public const int AutomotiveFieldNumber = 6;
    private int automotive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Automotive {
      get { return automotive_; }
      set {
        automotive_ = value;
      }
    }

    /// <summary>Field number for the "tilting" field.</summary>
    public const int TiltingFieldNumber = 7;
    private int tilting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tilting {
      get { return tilting_; }
      set {
        tilting_ = value;
      }
    }

    /// <summary>Field number for the "cycling" field.</summary>
    public const int CyclingFieldNumber = 8;
    private int cycling_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cycling {
      get { return cycling_; }
      set {
        cycling_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 9;
    private global::POGOProtos.Networking.Envelopes.Activity.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Envelopes.Activity.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Activity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Activity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTimeMs != other.StartTimeMs) return false;
      if (Unknown != other.Unknown) return false;
      if (Walking != other.Walking) return false;
      if (Running != other.Running) return false;
      if (Stationary != other.Stationary) return false;
      if (Automotive != other.Automotive) return false;
      if (Tilting != other.Tilting) return false;
      if (Cycling != other.Cycling) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartTimeMs != 0L) hash ^= StartTimeMs.GetHashCode();
      if (Unknown != 0) hash ^= Unknown.GetHashCode();
      if (Walking != 0) hash ^= Walking.GetHashCode();
      if (Running != 0) hash ^= Running.GetHashCode();
      if (Stationary != 0) hash ^= Stationary.GetHashCode();
      if (Automotive != 0) hash ^= Automotive.GetHashCode();
      if (Tilting != 0) hash ^= Tilting.GetHashCode();
      if (Cycling != 0) hash ^= Cycling.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTimeMs != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StartTimeMs);
      }
      if (Unknown != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Unknown);
      }
      if (Walking != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Walking);
      }
      if (Running != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Running);
      }
      if (Stationary != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Stationary);
      }
      if (Automotive != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Automotive);
      }
      if (Tilting != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Tilting);
      }
      if (Cycling != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Cycling);
      }
      if (Status != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartTimeMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimeMs);
      }
      if (Unknown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unknown);
      }
      if (Walking != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Walking);
      }
      if (Running != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Running);
      }
      if (Stationary != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stationary);
      }
      if (Automotive != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Automotive);
      }
      if (Tilting != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tilting);
      }
      if (Cycling != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cycling);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Activity other) {
      if (other == null) {
        return;
      }
      if (other.StartTimeMs != 0L) {
        StartTimeMs = other.StartTimeMs;
      }
      if (other.Unknown != 0) {
        Unknown = other.Unknown;
      }
      if (other.Walking != 0) {
        Walking = other.Walking;
      }
      if (other.Running != 0) {
        Running = other.Running;
      }
      if (other.Stationary != 0) {
        Stationary = other.Stationary;
      }
      if (other.Automotive != 0) {
        Automotive = other.Automotive;
      }
      if (other.Tilting != 0) {
        Tilting = other.Tilting;
      }
      if (other.Cycling != 0) {
        Cycling = other.Cycling;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartTimeMs = input.ReadInt64();
            break;
          }
          case 16: {
            Unknown = input.ReadInt32();
            break;
          }
          case 24: {
            Walking = input.ReadInt32();
            break;
          }
          case 32: {
            Running = input.ReadInt32();
            break;
          }
          case 40: {
            Stationary = input.ReadInt32();
            break;
          }
          case 48: {
            Automotive = input.ReadInt32();
            break;
          }
          case 56: {
            Tilting = input.ReadInt32();
            break;
          }
          case 64: {
            Cycling = input.ReadInt32();
            break;
          }
          case 72: {
            status_ = (global::POGOProtos.Networking.Envelopes.Activity.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Activity message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("STATUS_UNK")] Unk = 0,
      }

    }
    #endregion

  }

  /// <summary>
  /// 100% - Reference iOS lib "LocationUpdate" structure for bridge
  /// </summary>
  public sealed partial class SensorUpdate : pb::IMessage<SensorUpdate> {
    private static readonly pb::MessageParser<SensorUpdate> _parser = new pb::MessageParser<SensorUpdate>(() => new SensorUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SensorUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Envelopes.SignalLogReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorUpdate(SensorUpdate other) : this() {
      timestamp_ = other.timestamp_;
      accelerationX_ = other.accelerationX_;
      accelerationY_ = other.accelerationY_;
      accelerationZ_ = other.accelerationZ_;
      magneticFieldX_ = other.magneticFieldX_;
      magneticFieldY_ = other.magneticFieldY_;
      magneticFieldZ_ = other.magneticFieldZ_;
      magneticFieldAccuracy_ = other.magneticFieldAccuracy_;
      attitudePitch_ = other.attitudePitch_;
      attitudeYaw_ = other.attitudeYaw_;
      attitudeRoll_ = other.attitudeRoll_;
      rotationRateX_ = other.rotationRateX_;
      rotationRateY_ = other.rotationRateY_;
      rotationRateZ_ = other.rotationRateZ_;
      gravityX_ = other.gravityX_;
      gravityY_ = other.gravityY_;
      gravityZ_ = other.gravityZ_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorUpdate Clone() {
      return new SensorUpdate(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    /// <summary>
    /// in ms since start
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "acceleration_x" field.</summary>
    public const int AccelerationXFieldNumber = 3;
    private double accelerationX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelerationX {
      get { return accelerationX_; }
      set {
        accelerationX_ = value;
      }
    }

    /// <summary>Field number for the "acceleration_y" field.</summary>
    public const int AccelerationYFieldNumber = 4;
    private double accelerationY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelerationY {
      get { return accelerationY_; }
      set {
        accelerationY_ = value;
      }
    }

    /// <summary>Field number for the "acceleration_z" field.</summary>
    public const int AccelerationZFieldNumber = 5;
    private double accelerationZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelerationZ {
      get { return accelerationZ_; }
      set {
        accelerationZ_ = value;
      }
    }

    /// <summary>Field number for the "magnetic_field_x" field.</summary>
    public const int MagneticFieldXFieldNumber = 6;
    private double magneticFieldX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MagneticFieldX {
      get { return magneticFieldX_; }
      set {
        magneticFieldX_ = value;
      }
    }

    /// <summary>Field number for the "magnetic_field_y" field.</summary>
    public const int MagneticFieldYFieldNumber = 7;
    private double magneticFieldY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MagneticFieldY {
      get { return magneticFieldY_; }
      set {
        magneticFieldY_ = value;
      }
    }

    /// <summary>Field number for the "magnetic_field_z" field.</summary>
    public const int MagneticFieldZFieldNumber = 8;
    private double magneticFieldZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MagneticFieldZ {
      get { return magneticFieldZ_; }
      set {
        magneticFieldZ_ = value;
      }
    }

    /// <summary>Field number for the "magnetic_field_accuracy" field.</summary>
    public const int MagneticFieldAccuracyFieldNumber = 9;
    private int magneticFieldAccuracy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagneticFieldAccuracy {
      get { return magneticFieldAccuracy_; }
      set {
        magneticFieldAccuracy_ = value;
      }
    }

    /// <summary>Field number for the "attitude_pitch" field.</summary>
    public const int AttitudePitchFieldNumber = 10;
    private double attitudePitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AttitudePitch {
      get { return attitudePitch_; }
      set {
        attitudePitch_ = value;
      }
    }

    /// <summary>Field number for the "attitude_yaw" field.</summary>
    public const int AttitudeYawFieldNumber = 11;
    private double attitudeYaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AttitudeYaw {
      get { return attitudeYaw_; }
      set {
        attitudeYaw_ = value;
      }
    }

    /// <summary>Field number for the "attitude_roll" field.</summary>
    public const int AttitudeRollFieldNumber = 12;
    private double attitudeRoll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AttitudeRoll {
      get { return attitudeRoll_; }
      set {
        attitudeRoll_ = value;
      }
    }

    /// <summary>Field number for the "rotation_rate_x" field.</summary>
    public const int RotationRateXFieldNumber = 13;
    private double rotationRateX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RotationRateX {
      get { return rotationRateX_; }
      set {
        rotationRateX_ = value;
      }
    }

    /// <summary>Field number for the "rotation_rate_y" field.</summary>
    public const int RotationRateYFieldNumber = 14;
    private double rotationRateY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RotationRateY {
      get { return rotationRateY_; }
      set {
        rotationRateY_ = value;
      }
    }

    /// <summary>Field number for the "rotation_rate_z" field.</summary>
    public const int RotationRateZFieldNumber = 15;
    private double rotationRateZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RotationRateZ {
      get { return rotationRateZ_; }
      set {
        rotationRateZ_ = value;
      }
    }

    /// <summary>Field number for the "gravity_x" field.</summary>
    public const int GravityXFieldNumber = 16;
    private double gravityX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GravityX {
      get { return gravityX_; }
      set {
        gravityX_ = value;
      }
    }

    /// <summary>Field number for the "gravity_y" field.</summary>
    public const int GravityYFieldNumber = 17;
    private double gravityY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GravityY {
      get { return gravityY_; }
      set {
        gravityY_ = value;
      }
    }

    /// <summary>Field number for the "gravity_z" field.</summary>
    public const int GravityZFieldNumber = 18;
    private double gravityZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GravityZ {
      get { return gravityZ_; }
      set {
        gravityZ_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 19;
    private global::POGOProtos.Networking.Envelopes.SensorUpdate.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Envelopes.SensorUpdate.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SensorUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SensorUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (AccelerationX != other.AccelerationX) return false;
      if (AccelerationY != other.AccelerationY) return false;
      if (AccelerationZ != other.AccelerationZ) return false;
      if (MagneticFieldX != other.MagneticFieldX) return false;
      if (MagneticFieldY != other.MagneticFieldY) return false;
      if (MagneticFieldZ != other.MagneticFieldZ) return false;
      if (MagneticFieldAccuracy != other.MagneticFieldAccuracy) return false;
      if (AttitudePitch != other.AttitudePitch) return false;
      if (AttitudeYaw != other.AttitudeYaw) return false;
      if (AttitudeRoll != other.AttitudeRoll) return false;
      if (RotationRateX != other.RotationRateX) return false;
      if (RotationRateY != other.RotationRateY) return false;
      if (RotationRateZ != other.RotationRateZ) return false;
      if (GravityX != other.GravityX) return false;
      if (GravityY != other.GravityY) return false;
      if (GravityZ != other.GravityZ) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (AccelerationX != 0D) hash ^= AccelerationX.GetHashCode();
      if (AccelerationY != 0D) hash ^= AccelerationY.GetHashCode();
      if (AccelerationZ != 0D) hash ^= AccelerationZ.GetHashCode();
      if (MagneticFieldX != 0D) hash ^= MagneticFieldX.GetHashCode();
      if (MagneticFieldY != 0D) hash ^= MagneticFieldY.GetHashCode();
      if (MagneticFieldZ != 0D) hash ^= MagneticFieldZ.GetHashCode();
      if (MagneticFieldAccuracy != 0) hash ^= MagneticFieldAccuracy.GetHashCode();
      if (AttitudePitch != 0D) hash ^= AttitudePitch.GetHashCode();
      if (AttitudeYaw != 0D) hash ^= AttitudeYaw.GetHashCode();
      if (AttitudeRoll != 0D) hash ^= AttitudeRoll.GetHashCode();
      if (RotationRateX != 0D) hash ^= RotationRateX.GetHashCode();
      if (RotationRateY != 0D) hash ^= RotationRateY.GetHashCode();
      if (RotationRateZ != 0D) hash ^= RotationRateZ.GetHashCode();
      if (GravityX != 0D) hash ^= GravityX.GetHashCode();
      if (GravityY != 0D) hash ^= GravityY.GetHashCode();
      if (GravityZ != 0D) hash ^= GravityZ.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (AccelerationX != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(AccelerationX);
      }
      if (AccelerationY != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(AccelerationY);
      }
      if (AccelerationZ != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(AccelerationZ);
      }
      if (MagneticFieldX != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(MagneticFieldX);
      }
      if (MagneticFieldY != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(MagneticFieldY);
      }
      if (MagneticFieldZ != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(MagneticFieldZ);
      }
      if (MagneticFieldAccuracy != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MagneticFieldAccuracy);
      }
      if (AttitudePitch != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(AttitudePitch);
      }
      if (AttitudeYaw != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(AttitudeYaw);
      }
      if (AttitudeRoll != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(AttitudeRoll);
      }
      if (RotationRateX != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(RotationRateX);
      }
      if (RotationRateY != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(RotationRateY);
      }
      if (RotationRateZ != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(RotationRateZ);
      }
      if (GravityX != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(GravityX);
      }
      if (GravityY != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(GravityY);
      }
      if (GravityZ != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(GravityZ);
      }
      if (Status != 0) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (AccelerationX != 0D) {
        size += 1 + 8;
      }
      if (AccelerationY != 0D) {
        size += 1 + 8;
      }
      if (AccelerationZ != 0D) {
        size += 1 + 8;
      }
      if (MagneticFieldX != 0D) {
        size += 1 + 8;
      }
      if (MagneticFieldY != 0D) {
        size += 1 + 8;
      }
      if (MagneticFieldZ != 0D) {
        size += 1 + 8;
      }
      if (MagneticFieldAccuracy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagneticFieldAccuracy);
      }
      if (AttitudePitch != 0D) {
        size += 1 + 8;
      }
      if (AttitudeYaw != 0D) {
        size += 1 + 8;
      }
      if (AttitudeRoll != 0D) {
        size += 1 + 8;
      }
      if (RotationRateX != 0D) {
        size += 1 + 8;
      }
      if (RotationRateY != 0D) {
        size += 1 + 8;
      }
      if (RotationRateZ != 0D) {
        size += 1 + 8;
      }
      if (GravityX != 0D) {
        size += 2 + 8;
      }
      if (GravityY != 0D) {
        size += 2 + 8;
      }
      if (GravityZ != 0D) {
        size += 2 + 8;
      }
      if (Status != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SensorUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.AccelerationX != 0D) {
        AccelerationX = other.AccelerationX;
      }
      if (other.AccelerationY != 0D) {
        AccelerationY = other.AccelerationY;
      }
      if (other.AccelerationZ != 0D) {
        AccelerationZ = other.AccelerationZ;
      }
      if (other.MagneticFieldX != 0D) {
        MagneticFieldX = other.MagneticFieldX;
      }
      if (other.MagneticFieldY != 0D) {
        MagneticFieldY = other.MagneticFieldY;
      }
      if (other.MagneticFieldZ != 0D) {
        MagneticFieldZ = other.MagneticFieldZ;
      }
      if (other.MagneticFieldAccuracy != 0) {
        MagneticFieldAccuracy = other.MagneticFieldAccuracy;
      }
      if (other.AttitudePitch != 0D) {
        AttitudePitch = other.AttitudePitch;
      }
      if (other.AttitudeYaw != 0D) {
        AttitudeYaw = other.AttitudeYaw;
      }
      if (other.AttitudeRoll != 0D) {
        AttitudeRoll = other.AttitudeRoll;
      }
      if (other.RotationRateX != 0D) {
        RotationRateX = other.RotationRateX;
      }
      if (other.RotationRateY != 0D) {
        RotationRateY = other.RotationRateY;
      }
      if (other.RotationRateZ != 0D) {
        RotationRateZ = other.RotationRateZ;
      }
      if (other.GravityX != 0D) {
        GravityX = other.GravityX;
      }
      if (other.GravityY != 0D) {
        GravityY = other.GravityY;
      }
      if (other.GravityZ != 0D) {
        GravityZ = other.GravityZ;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 25: {
            AccelerationX = input.ReadDouble();
            break;
          }
          case 33: {
            AccelerationY = input.ReadDouble();
            break;
          }
          case 41: {
            AccelerationZ = input.ReadDouble();
            break;
          }
          case 49: {
            MagneticFieldX = input.ReadDouble();
            break;
          }
          case 57: {
            MagneticFieldY = input.ReadDouble();
            break;
          }
          case 65: {
            MagneticFieldZ = input.ReadDouble();
            break;
          }
          case 72: {
            MagneticFieldAccuracy = input.ReadInt32();
            break;
          }
          case 81: {
            AttitudePitch = input.ReadDouble();
            break;
          }
          case 89: {
            AttitudeYaw = input.ReadDouble();
            break;
          }
          case 97: {
            AttitudeRoll = input.ReadDouble();
            break;
          }
          case 105: {
            RotationRateX = input.ReadDouble();
            break;
          }
          case 113: {
            RotationRateY = input.ReadDouble();
            break;
          }
          case 121: {
            RotationRateZ = input.ReadDouble();
            break;
          }
          case 129: {
            GravityX = input.ReadDouble();
            break;
          }
          case 137: {
            GravityY = input.ReadDouble();
            break;
          }
          case 145: {
            GravityZ = input.ReadDouble();
            break;
          }
          case 152: {
            status_ = (global::POGOProtos.Networking.Envelopes.SensorUpdate.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SensorUpdate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("STATUS_UNK")] Unk = 0,
        [pbr::OriginalName("NORMAL")] Normal = 3,
      }

    }
    #endregion

  }

  public sealed partial class LocationUpdate : pb::IMessage<LocationUpdate> {
    private static readonly pb::MessageParser<LocationUpdate> _parser = new pb::MessageParser<LocationUpdate>(() => new LocationUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocationUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Envelopes.SignalLogReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationUpdate(LocationUpdate other) : this() {
      name_ = other.name_;
      timestampMs_ = other.timestampMs_;
      altitude_ = other.altitude_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      deviceSpeed_ = other.deviceSpeed_;
      deviceCourse_ = other.deviceCourse_;
      horizontalAccuracy_ = other.horizontalAccuracy_;
      verticalAccuracy_ = other.verticalAccuracy_;
      providerStatus_ = other.providerStatus_;
      floor_ = other.floor_;
      locationType_ = other.locationType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationUpdate Clone() {
      return new LocationUpdate(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// "network", "gps", "fused" - only these 3 values (com.nianticlabs.location.NianticLocationManager.class)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp_ms" field.</summary>
    public const int TimestampMsFieldNumber = 2;
    private long timestampMs_;
    /// <summary>
    /// in ms since start
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimestampMs {
      get { return timestampMs_; }
      set {
        timestampMs_ = value;
      }
    }

    /// <summary>Field number for the "altitude" field.</summary>
    public const int AltitudeFieldNumber = 4;
    private float altitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Altitude {
      get { return altitude_; }
      set {
        altitude_ = value;
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 13;
    private float latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 14;
    private float longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "device_speed" field.</summary>
    public const int DeviceSpeedFieldNumber = 18;
    private float deviceSpeed_;
    /// <summary>
    /// iOS only (-1 for no reading available, speed in m/s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeviceSpeed {
      get { return deviceSpeed_; }
      set {
        deviceSpeed_ = value;
      }
    }

    /// <summary>Field number for the "device_course" field.</summary>
    public const int DeviceCourseFieldNumber = 20;
    private float deviceCourse_;
    /// <summary>
    /// iOS only (range seems to be -1 for not reading, and 0 to 360 for reading) confirmed by @marcel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeviceCourse {
      get { return deviceCourse_; }
      set {
        deviceCourse_ = value;
      }
    }

    /// <summary>Field number for the "horizontal_accuracy" field.</summary>
    public const int HorizontalAccuracyFieldNumber = 21;
    private float horizontalAccuracy_;
    /// <summary>
    /// in meters, both on Android and iOS
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HorizontalAccuracy {
      get { return horizontalAccuracy_; }
      set {
        horizontalAccuracy_ = value;
      }
    }

    /// <summary>Field number for the "vertical_accuracy" field.</summary>
    public const int VerticalAccuracyFieldNumber = 22;
    private float verticalAccuracy_;
    /// <summary>
    /// iOS only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VerticalAccuracy {
      get { return verticalAccuracy_; }
      set {
        verticalAccuracy_ = value;
      }
    }

    /// <summary>Field number for the "provider_status" field.</summary>
    public const int ProviderStatusFieldNumber = 26;
    private global::POGOProtos.Networking.Envelopes.LocationUpdate.Types.ServiceStatus providerStatus_ = 0;
    /// <summary>
    /// Usually 3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Envelopes.LocationUpdate.Types.ServiceStatus ProviderStatus {
      get { return providerStatus_; }
      set {
        providerStatus_ = value;
      }
    }

    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 27;
    private long floor_;
    /// <summary>
    /// The floor of the building this person is on
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Floor {
      get { return floor_; }
      set {
        floor_ = value;
      }
    }

    /// <summary>Field number for the "location_type" field.</summary>
    public const int LocationTypeFieldNumber = 28;
    private global::POGOProtos.Networking.Envelopes.LocationUpdate.Types.LocationType locationType_ = 0;
    /// <summary>
    /// Always 1 (if there is data at all)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Envelopes.LocationUpdate.Types.LocationType LocationType {
      get { return locationType_; }
      set {
        locationType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocationUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocationUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (TimestampMs != other.TimestampMs) return false;
      if (Altitude != other.Altitude) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (DeviceSpeed != other.DeviceSpeed) return false;
      if (DeviceCourse != other.DeviceCourse) return false;
      if (HorizontalAccuracy != other.HorizontalAccuracy) return false;
      if (VerticalAccuracy != other.VerticalAccuracy) return false;
      if (ProviderStatus != other.ProviderStatus) return false;
      if (Floor != other.Floor) return false;
      if (LocationType != other.LocationType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (TimestampMs != 0L) hash ^= TimestampMs.GetHashCode();
      if (Altitude != 0F) hash ^= Altitude.GetHashCode();
      if (Latitude != 0F) hash ^= Latitude.GetHashCode();
      if (Longitude != 0F) hash ^= Longitude.GetHashCode();
      if (DeviceSpeed != 0F) hash ^= DeviceSpeed.GetHashCode();
      if (DeviceCourse != 0F) hash ^= DeviceCourse.GetHashCode();
      if (HorizontalAccuracy != 0F) hash ^= HorizontalAccuracy.GetHashCode();
      if (VerticalAccuracy != 0F) hash ^= VerticalAccuracy.GetHashCode();
      if (ProviderStatus != 0) hash ^= ProviderStatus.GetHashCode();
      if (Floor != 0L) hash ^= Floor.GetHashCode();
      if (LocationType != 0) hash ^= LocationType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (TimestampMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TimestampMs);
      }
      if (Altitude != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Altitude);
      }
      if (Latitude != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(Latitude);
      }
      if (Longitude != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(Longitude);
      }
      if (DeviceSpeed != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(DeviceSpeed);
      }
      if (DeviceCourse != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(DeviceCourse);
      }
      if (HorizontalAccuracy != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(HorizontalAccuracy);
      }
      if (VerticalAccuracy != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(VerticalAccuracy);
      }
      if (ProviderStatus != 0) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) ProviderStatus);
      }
      if (Floor != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(Floor);
      }
      if (LocationType != 0) {
        output.WriteRawTag(224, 1);
        output.WriteEnum((int) LocationType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (TimestampMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimestampMs);
      }
      if (Altitude != 0F) {
        size += 1 + 4;
      }
      if (Latitude != 0F) {
        size += 1 + 4;
      }
      if (Longitude != 0F) {
        size += 1 + 4;
      }
      if (DeviceSpeed != 0F) {
        size += 2 + 4;
      }
      if (DeviceCourse != 0F) {
        size += 2 + 4;
      }
      if (HorizontalAccuracy != 0F) {
        size += 2 + 4;
      }
      if (VerticalAccuracy != 0F) {
        size += 2 + 4;
      }
      if (ProviderStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ProviderStatus);
      }
      if (Floor != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Floor);
      }
      if (LocationType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LocationType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocationUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.TimestampMs != 0L) {
        TimestampMs = other.TimestampMs;
      }
      if (other.Altitude != 0F) {
        Altitude = other.Altitude;
      }
      if (other.Latitude != 0F) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0F) {
        Longitude = other.Longitude;
      }
      if (other.DeviceSpeed != 0F) {
        DeviceSpeed = other.DeviceSpeed;
      }
      if (other.DeviceCourse != 0F) {
        DeviceCourse = other.DeviceCourse;
      }
      if (other.HorizontalAccuracy != 0F) {
        HorizontalAccuracy = other.HorizontalAccuracy;
      }
      if (other.VerticalAccuracy != 0F) {
        VerticalAccuracy = other.VerticalAccuracy;
      }
      if (other.ProviderStatus != 0) {
        ProviderStatus = other.ProviderStatus;
      }
      if (other.Floor != 0L) {
        Floor = other.Floor;
      }
      if (other.LocationType != 0) {
        LocationType = other.LocationType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            TimestampMs = input.ReadInt64();
            break;
          }
          case 37: {
            Altitude = input.ReadFloat();
            break;
          }
          case 109: {
            Latitude = input.ReadFloat();
            break;
          }
          case 117: {
            Longitude = input.ReadFloat();
            break;
          }
          case 149: {
            DeviceSpeed = input.ReadFloat();
            break;
          }
          case 165: {
            DeviceCourse = input.ReadFloat();
            break;
          }
          case 173: {
            HorizontalAccuracy = input.ReadFloat();
            break;
          }
          case 181: {
            VerticalAccuracy = input.ReadFloat();
            break;
          }
          case 208: {
            providerStatus_ = (global::POGOProtos.Networking.Envelopes.LocationUpdate.Types.ServiceStatus) input.ReadEnum();
            break;
          }
          case 216: {
            Floor = input.ReadInt64();
            break;
          }
          case 224: {
            locationType_ = (global::POGOProtos.Networking.Envelopes.LocationUpdate.Types.LocationType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LocationUpdate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ServiceStatus {
        [pbr::OriginalName("FAILED")] Failed = 0,
        [pbr::OriginalName("INITIALIZED")] Initialized = 1,
        [pbr::OriginalName("PERMISSION_DENIED")] PermissionDenied = 2,
        [pbr::OriginalName("RUNNING")] Running = 3,
        [pbr::OriginalName("STOPPED")] Stopped = 4,
        [pbr::OriginalName("UNDEFINED")] Undefined = 5,
      }

      public enum LocationType {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("NORMAL_PROVIDER")] NormalProvider = 1,
        [pbr::OriginalName("MOCK_PROVIDER")] MockProvider = 2,
      }

    }
    #endregion

  }

  public sealed partial class DeviceInformation : pb::IMessage<DeviceInformation> {
    private static readonly pb::MessageParser<DeviceInformation> _parser = new pb::MessageParser<DeviceInformation>(() => new DeviceInformation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Envelopes.SignalLogReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceInformation(DeviceInformation other) : this() {
      deviceId_ = other.deviceId_;
      board_ = other.board_;
      bootloader_ = other.bootloader_;
      brand_ = other.brand_;
      device_ = other.device_;
      display_ = other.display_;
      hardware_ = other.hardware_;
      manufacturer_ = other.manufacturer_;
      model_ = other.model_;
      product_ = other.product_;
      tags_ = other.tags_;
      version_ = other.version_;
      fingerprint_ = other.fingerprint_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceInformation Clone() {
      return new DeviceInformation(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "board" field.</summary>
    public const int BoardFieldNumber = 2;
    private string board_ = "";
    /// <summary>
    /// android_board_name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Board {
      get { return board_; }
      set {
        board_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bootloader" field.</summary>
    public const int BootloaderFieldNumber = 3;
    private string bootloader_ = "";
    /// <summary>
    /// android_bootloader
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bootloader {
      get { return bootloader_; }
      set {
        bootloader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "brand" field.</summary>
    public const int BrandFieldNumber = 4;
    private string brand_ = "";
    /// <summary>
    /// product.brand
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Brand {
      get { return brand_; }
      set {
        brand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 5;
    private string device_ = "";
    /// <summary>
    /// device_model / product.device
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return device_; }
      set {
        device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 6;
    private string display_ = "";
    /// <summary>
    /// device_model_identifier / build.display.id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Display {
      get { return display_; }
      set {
        display_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hardware" field.</summary>
    public const int HardwareFieldNumber = 7;
    private string hardware_ = "";
    /// <summary>
    /// device_comms_model / boot.hardware
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hardware {
      get { return hardware_; }
      set {
        hardware_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "manufacturer" field.</summary>
    public const int ManufacturerFieldNumber = 8;
    private string manufacturer_ = "";
    /// <summary>
    /// hardware_manufacturer / product.manufacturer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Manufacturer {
      get { return manufacturer_; }
      set {
        manufacturer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 9;
    private string model_ = "";
    /// <summary>
    /// hardware_model / product.model
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product" field.</summary>
    public const int ProductFieldNumber = 10;
    private string product_ = "";
    /// <summary>
    /// firmware_brand / On iOS: "iPhone OS", product.name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Product {
      get { return product_; }
      set {
        product_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 12;
    private string tags_ = "";
    /// <summary>
    /// firmware_tags / Android only, build.tags
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tags {
      get { return tags_; }
      set {
        tags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 13;
    private string version_ = "";
    /// <summary>
    /// firmware_type / iOS version or Android build.type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fingerprint" field.</summary>
    public const int FingerprintFieldNumber = 14;
    private string fingerprint_ = "";
    /// <summary>
    /// firmware_fingerprint / Android only, build.fingerprint
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fingerprint {
      get { return fingerprint_; }
      set {
        fingerprint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceId != other.DeviceId) return false;
      if (Board != other.Board) return false;
      if (Bootloader != other.Bootloader) return false;
      if (Brand != other.Brand) return false;
      if (Device != other.Device) return false;
      if (Display != other.Display) return false;
      if (Hardware != other.Hardware) return false;
      if (Manufacturer != other.Manufacturer) return false;
      if (Model != other.Model) return false;
      if (Product != other.Product) return false;
      if (Tags != other.Tags) return false;
      if (Version != other.Version) return false;
      if (Fingerprint != other.Fingerprint) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (Board.Length != 0) hash ^= Board.GetHashCode();
      if (Bootloader.Length != 0) hash ^= Bootloader.GetHashCode();
      if (Brand.Length != 0) hash ^= Brand.GetHashCode();
      if (Device.Length != 0) hash ^= Device.GetHashCode();
      if (Display.Length != 0) hash ^= Display.GetHashCode();
      if (Hardware.Length != 0) hash ^= Hardware.GetHashCode();
      if (Manufacturer.Length != 0) hash ^= Manufacturer.GetHashCode();
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      if (Product.Length != 0) hash ^= Product.GetHashCode();
      if (Tags.Length != 0) hash ^= Tags.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Fingerprint.Length != 0) hash ^= Fingerprint.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceId);
      }
      if (Board.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Board);
      }
      if (Bootloader.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Bootloader);
      }
      if (Brand.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Brand);
      }
      if (Device.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Device);
      }
      if (Display.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Display);
      }
      if (Hardware.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Hardware);
      }
      if (Manufacturer.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Manufacturer);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Model);
      }
      if (Product.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Product);
      }
      if (Tags.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Tags);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Version);
      }
      if (Fingerprint.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Fingerprint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (Board.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Board);
      }
      if (Bootloader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Bootloader);
      }
      if (Brand.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Brand);
      }
      if (Device.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      if (Display.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Display);
      }
      if (Hardware.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hardware);
      }
      if (Manufacturer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Manufacturer);
      }
      if (Model.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      if (Product.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Product);
      }
      if (Tags.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tags);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Fingerprint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fingerprint);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceInformation other) {
      if (other == null) {
        return;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.Board.Length != 0) {
        Board = other.Board;
      }
      if (other.Bootloader.Length != 0) {
        Bootloader = other.Bootloader;
      }
      if (other.Brand.Length != 0) {
        Brand = other.Brand;
      }
      if (other.Device.Length != 0) {
        Device = other.Device;
      }
      if (other.Display.Length != 0) {
        Display = other.Display;
      }
      if (other.Hardware.Length != 0) {
        Hardware = other.Hardware;
      }
      if (other.Manufacturer.Length != 0) {
        Manufacturer = other.Manufacturer;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      if (other.Product.Length != 0) {
        Product = other.Product;
      }
      if (other.Tags.Length != 0) {
        Tags = other.Tags;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Fingerprint.Length != 0) {
        Fingerprint = other.Fingerprint;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DeviceId = input.ReadString();
            break;
          }
          case 18: {
            Board = input.ReadString();
            break;
          }
          case 26: {
            Bootloader = input.ReadString();
            break;
          }
          case 34: {
            Brand = input.ReadString();
            break;
          }
          case 42: {
            Device = input.ReadString();
            break;
          }
          case 50: {
            Display = input.ReadString();
            break;
          }
          case 58: {
            Hardware = input.ReadString();
            break;
          }
          case 66: {
            Manufacturer = input.ReadString();
            break;
          }
          case 74: {
            Model = input.ReadString();
            break;
          }
          case 82: {
            Product = input.ReadString();
            break;
          }
          case 98: {
            Tags = input.ReadString();
            break;
          }
          case 106: {
            Version = input.ReadString();
            break;
          }
          case 114: {
            Fingerprint = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  iOS only
  /// </summary>
  public sealed partial class IOSDeviceInfo : pb::IMessage<IOSDeviceInfo> {
    private static readonly pb::MessageParser<IOSDeviceInfo> _parser = new pb::MessageParser<IOSDeviceInfo>(() => new IOSDeviceInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IOSDeviceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Envelopes.SignalLogReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IOSDeviceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IOSDeviceInfo(IOSDeviceInfo other) : this() {
      bool1_ = other.bool1_;
      bool2_ = other.bool2_;
      bool3_ = other.bool3_;
      bool4_ = other.bool4_;
      bool5_ = other.bool5_;
      bool6_ = other.bool6_;
      bool7_ = other.bool7_;
      bool8_ = other.bool8_;
      bool9_ = other.bool9_;
      bool10_ = other.bool10_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IOSDeviceInfo Clone() {
      return new IOSDeviceInfo(this);
    }

    /// <summary>Field number for the "bool1" field.</summary>
    public const int Bool1FieldNumber = 1;
    private bool bool1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bool1 {
      get { return bool1_; }
      set {
        bool1_ = value;
      }
    }

    /// <summary>Field number for the "bool2" field.</summary>
    public const int Bool2FieldNumber = 2;
    private bool bool2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bool2 {
      get { return bool2_; }
      set {
        bool2_ = value;
      }
    }

    /// <summary>Field number for the "bool3" field.</summary>
    public const int Bool3FieldNumber = 3;
    private bool bool3_;
    /// <summary>
    /// 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bool3 {
      get { return bool3_; }
      set {
        bool3_ = value;
      }
    }

    /// <summary>Field number for the "bool4" field.</summary>
    public const int Bool4FieldNumber = 4;
    private bool bool4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bool4 {
      get { return bool4_; }
      set {
        bool4_ = value;
      }
    }

    /// <summary>Field number for the "bool5" field.</summary>
    public const int Bool5FieldNumber = 5;
    private bool bool5_;
    /// <summary>
    /// 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bool5 {
      get { return bool5_; }
      set {
        bool5_ = value;
      }
    }

    /// <summary>Field number for the "bool6" field.</summary>
    public const int Bool6FieldNumber = 6;
    private bool bool6_;
    /// <summary>
    /// 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bool6 {
      get { return bool6_; }
      set {
        bool6_ = value;
      }
    }

    /// <summary>Field number for the "bool7" field.</summary>
    public const int Bool7FieldNumber = 7;
    private bool bool7_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bool7 {
      get { return bool7_; }
      set {
        bool7_ = value;
      }
    }

    /// <summary>Field number for the "bool8" field.</summary>
    public const int Bool8FieldNumber = 8;
    private bool bool8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bool8 {
      get { return bool8_; }
      set {
        bool8_ = value;
      }
    }

    /// <summary>Field number for the "bool9" field.</summary>
    public const int Bool9FieldNumber = 9;
    private bool bool9_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bool9 {
      get { return bool9_; }
      set {
        bool9_ = value;
      }
    }

    /// <summary>Field number for the "bool10" field.</summary>
    public const int Bool10FieldNumber = 10;
    private bool bool10_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bool10 {
      get { return bool10_; }
      set {
        bool10_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IOSDeviceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IOSDeviceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Bool1 != other.Bool1) return false;
      if (Bool2 != other.Bool2) return false;
      if (Bool3 != other.Bool3) return false;
      if (Bool4 != other.Bool4) return false;
      if (Bool5 != other.Bool5) return false;
      if (Bool6 != other.Bool6) return false;
      if (Bool7 != other.Bool7) return false;
      if (Bool8 != other.Bool8) return false;
      if (Bool9 != other.Bool9) return false;
      if (Bool10 != other.Bool10) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Bool1 != false) hash ^= Bool1.GetHashCode();
      if (Bool2 != false) hash ^= Bool2.GetHashCode();
      if (Bool3 != false) hash ^= Bool3.GetHashCode();
      if (Bool4 != false) hash ^= Bool4.GetHashCode();
      if (Bool5 != false) hash ^= Bool5.GetHashCode();
      if (Bool6 != false) hash ^= Bool6.GetHashCode();
      if (Bool7 != false) hash ^= Bool7.GetHashCode();
      if (Bool8 != false) hash ^= Bool8.GetHashCode();
      if (Bool9 != false) hash ^= Bool9.GetHashCode();
      if (Bool10 != false) hash ^= Bool10.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Bool1 != false) {
        output.WriteRawTag(8);
        output.WriteBool(Bool1);
      }
      if (Bool2 != false) {
        output.WriteRawTag(16);
        output.WriteBool(Bool2);
      }
      if (Bool3 != false) {
        output.WriteRawTag(24);
        output.WriteBool(Bool3);
      }
      if (Bool4 != false) {
        output.WriteRawTag(32);
        output.WriteBool(Bool4);
      }
      if (Bool5 != false) {
        output.WriteRawTag(40);
        output.WriteBool(Bool5);
      }
      if (Bool6 != false) {
        output.WriteRawTag(48);
        output.WriteBool(Bool6);
      }
      if (Bool7 != false) {
        output.WriteRawTag(56);
        output.WriteBool(Bool7);
      }
      if (Bool8 != false) {
        output.WriteRawTag(64);
        output.WriteBool(Bool8);
      }
      if (Bool9 != false) {
        output.WriteRawTag(72);
        output.WriteBool(Bool9);
      }
      if (Bool10 != false) {
        output.WriteRawTag(80);
        output.WriteBool(Bool10);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bool1 != false) {
        size += 1 + 1;
      }
      if (Bool2 != false) {
        size += 1 + 1;
      }
      if (Bool3 != false) {
        size += 1 + 1;
      }
      if (Bool4 != false) {
        size += 1 + 1;
      }
      if (Bool5 != false) {
        size += 1 + 1;
      }
      if (Bool6 != false) {
        size += 1 + 1;
      }
      if (Bool7 != false) {
        size += 1 + 1;
      }
      if (Bool8 != false) {
        size += 1 + 1;
      }
      if (Bool9 != false) {
        size += 1 + 1;
      }
      if (Bool10 != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IOSDeviceInfo other) {
      if (other == null) {
        return;
      }
      if (other.Bool1 != false) {
        Bool1 = other.Bool1;
      }
      if (other.Bool2 != false) {
        Bool2 = other.Bool2;
      }
      if (other.Bool3 != false) {
        Bool3 = other.Bool3;
      }
      if (other.Bool4 != false) {
        Bool4 = other.Bool4;
      }
      if (other.Bool5 != false) {
        Bool5 = other.Bool5;
      }
      if (other.Bool6 != false) {
        Bool6 = other.Bool6;
      }
      if (other.Bool7 != false) {
        Bool7 = other.Bool7;
      }
      if (other.Bool8 != false) {
        Bool8 = other.Bool8;
      }
      if (other.Bool9 != false) {
        Bool9 = other.Bool9;
      }
      if (other.Bool10 != false) {
        Bool10 = other.Bool10;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Bool1 = input.ReadBool();
            break;
          }
          case 16: {
            Bool2 = input.ReadBool();
            break;
          }
          case 24: {
            Bool3 = input.ReadBool();
            break;
          }
          case 32: {
            Bool4 = input.ReadBool();
            break;
          }
          case 40: {
            Bool5 = input.ReadBool();
            break;
          }
          case 48: {
            Bool6 = input.ReadBool();
            break;
          }
          case 56: {
            Bool7 = input.ReadBool();
            break;
          }
          case 64: {
            Bool8 = input.ReadBool();
            break;
          }
          case 72: {
            Bool9 = input.ReadBool();
            break;
          }
          case 80: {
            Bool10 = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AndroidGpsInfo : pb::IMessage<AndroidGpsInfo> {
    private static readonly pb::MessageParser<AndroidGpsInfo> _parser = new pb::MessageParser<AndroidGpsInfo>(() => new AndroidGpsInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AndroidGpsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Envelopes.SignalLogReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AndroidGpsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AndroidGpsInfo(AndroidGpsInfo other) : this() {
      timeToFix_ = other.timeToFix_;
      satellitesPrn_ = other.satellitesPrn_.Clone();
      azimuth_ = other.azimuth_.Clone();
      elevation_ = other.elevation_.Clone();
      snr_ = other.snr_.Clone();
      hasAlmanac_ = other.hasAlmanac_.Clone();
      hasEphemeris_ = other.hasEphemeris_.Clone();
      usedInFix_ = other.usedInFix_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AndroidGpsInfo Clone() {
      return new AndroidGpsInfo(this);
    }

    /// <summary>Field number for the "time_to_fix" field.</summary>
    public const int TimeToFixFieldNumber = 1;
    private long timeToFix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeToFix {
      get { return timeToFix_; }
      set {
        timeToFix_ = value;
      }
    }

    /// <summary>Field number for the "satellites_prn" field.</summary>
    public const int SatellitesPrnFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_satellitesPrn_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> satellitesPrn_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SatellitesPrn {
      get { return satellitesPrn_; }
    }

    /// <summary>Field number for the "azimuth" field.</summary>
    public const int AzimuthFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_azimuth_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> azimuth_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Azimuth {
      get { return azimuth_; }
    }

    /// <summary>Field number for the "elevation" field.</summary>
    public const int ElevationFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_elevation_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> elevation_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Elevation {
      get { return elevation_; }
    }

    /// <summary>Field number for the "snr" field.</summary>
    public const int SnrFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_snr_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> snr_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Snr {
      get { return snr_; }
    }

    /// <summary>Field number for the "has_almanac" field.</summary>
    public const int HasAlmanacFieldNumber = 6;
    private static readonly pb::FieldCodec<bool> _repeated_hasAlmanac_codec
        = pb::FieldCodec.ForBool(50);
    private readonly pbc::RepeatedField<bool> hasAlmanac_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> HasAlmanac {
      get { return hasAlmanac_; }
    }

    /// <summary>Field number for the "has_ephemeris" field.</summary>
    public const int HasEphemerisFieldNumber = 7;
    private static readonly pb::FieldCodec<bool> _repeated_hasEphemeris_codec
        = pb::FieldCodec.ForBool(58);
    private readonly pbc::RepeatedField<bool> hasEphemeris_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> HasEphemeris {
      get { return hasEphemeris_; }
    }

    /// <summary>Field number for the "used_in_fix" field.</summary>
    public const int UsedInFixFieldNumber = 8;
    private static readonly pb::FieldCodec<bool> _repeated_usedInFix_codec
        = pb::FieldCodec.ForBool(66);
    private readonly pbc::RepeatedField<bool> usedInFix_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> UsedInFix {
      get { return usedInFix_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AndroidGpsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AndroidGpsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeToFix != other.TimeToFix) return false;
      if(!satellitesPrn_.Equals(other.satellitesPrn_)) return false;
      if(!azimuth_.Equals(other.azimuth_)) return false;
      if(!elevation_.Equals(other.elevation_)) return false;
      if(!snr_.Equals(other.snr_)) return false;
      if(!hasAlmanac_.Equals(other.hasAlmanac_)) return false;
      if(!hasEphemeris_.Equals(other.hasEphemeris_)) return false;
      if(!usedInFix_.Equals(other.usedInFix_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeToFix != 0L) hash ^= TimeToFix.GetHashCode();
      hash ^= satellitesPrn_.GetHashCode();
      hash ^= azimuth_.GetHashCode();
      hash ^= elevation_.GetHashCode();
      hash ^= snr_.GetHashCode();
      hash ^= hasAlmanac_.GetHashCode();
      hash ^= hasEphemeris_.GetHashCode();
      hash ^= usedInFix_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeToFix != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TimeToFix);
      }
      satellitesPrn_.WriteTo(output, _repeated_satellitesPrn_codec);
      azimuth_.WriteTo(output, _repeated_azimuth_codec);
      elevation_.WriteTo(output, _repeated_elevation_codec);
      snr_.WriteTo(output, _repeated_snr_codec);
      hasAlmanac_.WriteTo(output, _repeated_hasAlmanac_codec);
      hasEphemeris_.WriteTo(output, _repeated_hasEphemeris_codec);
      usedInFix_.WriteTo(output, _repeated_usedInFix_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeToFix != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeToFix);
      }
      size += satellitesPrn_.CalculateSize(_repeated_satellitesPrn_codec);
      size += azimuth_.CalculateSize(_repeated_azimuth_codec);
      size += elevation_.CalculateSize(_repeated_elevation_codec);
      size += snr_.CalculateSize(_repeated_snr_codec);
      size += hasAlmanac_.CalculateSize(_repeated_hasAlmanac_codec);
      size += hasEphemeris_.CalculateSize(_repeated_hasEphemeris_codec);
      size += usedInFix_.CalculateSize(_repeated_usedInFix_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AndroidGpsInfo other) {
      if (other == null) {
        return;
      }
      if (other.TimeToFix != 0L) {
        TimeToFix = other.TimeToFix;
      }
      satellitesPrn_.Add(other.satellitesPrn_);
      azimuth_.Add(other.azimuth_);
      elevation_.Add(other.elevation_);
      snr_.Add(other.snr_);
      hasAlmanac_.Add(other.hasAlmanac_);
      hasEphemeris_.Add(other.hasEphemeris_);
      usedInFix_.Add(other.usedInFix_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimeToFix = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            satellitesPrn_.AddEntriesFrom(input, _repeated_satellitesPrn_codec);
            break;
          }
          case 26:
          case 29: {
            azimuth_.AddEntriesFrom(input, _repeated_azimuth_codec);
            break;
          }
          case 34:
          case 37: {
            elevation_.AddEntriesFrom(input, _repeated_elevation_codec);
            break;
          }
          case 42:
          case 45: {
            snr_.AddEntriesFrom(input, _repeated_snr_codec);
            break;
          }
          case 50:
          case 48: {
            hasAlmanac_.AddEntriesFrom(input, _repeated_hasAlmanac_codec);
            break;
          }
          case 58:
          case 56: {
            hasEphemeris_.AddEntriesFrom(input, _repeated_hasEphemeris_codec);
            break;
          }
          case 66:
          case 64: {
            usedInFix_.AddEntriesFrom(input, _repeated_usedInFix_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
