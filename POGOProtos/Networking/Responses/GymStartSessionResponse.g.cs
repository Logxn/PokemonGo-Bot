// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GymStartSessionProtoOut.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Networking.Responses {

  /// <summary>Holder for reflection information generated from GymStartSessionProtoOut.proto</summary>
  public static partial class GymStartSessionResponseReflection {

    #region Descriptor
    /// <summary>File descriptor for GymStartSessionProtoOut.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GymStartSessionResponseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1HeW1TdGFydFNlc3Npb25Qcm90b091dC5wcm90bxIMSG9sb2hvbG8uUnBj",
            "IoYGChNQb2tlbW9uRGlzcGxheVByb3RvEjoKB2Nvc3R1bWUYASABKA4yKS5I",
            "b2xvaG9sby5ScGMuUG9rZW1vbkRpc3BsYXlQcm90by5Db3N0dW1lEjgKBmdl",
            "bmRlchgCIAEoDjIoLkhvbG9ob2xvLlJwYy5Qb2tlbW9uRGlzcGxheVByb3Rv",
            "LkdlbmRlchINCgVzaGlueRgDIAEoCBI0CgRmb3JtGAQgASgOMiYuSG9sb2hv",
            "bG8uUnBjLlBva2Vtb25EaXNwbGF5UHJvdG8uRm9ybSKeAwoERm9ybRIOCgpG",
            "T1JNX1VOU0VUEAASCwoHVU5PV05fQRABEgsKB1VOT1dOX0IQAhILCgdVTk9X",
            "Tl9DEAMSCwoHVU5PV05fRBAEEgsKB1VOT1dOX0UQBRILCgdVTk9XTl9GEAYS",
            "CwoHVU5PV05fRxAHEgsKB1VOT1dOX0gQCBILCgdVTk9XTl9JEAkSCwoHVU5P",
            "V05fShAKEgsKB1VOT1dOX0sQCxILCgdVTk9XTl9MEAwSCwoHVU5PV05fTRAN",
            "EgsKB1VOT1dOX04QDhILCgdVTk9XTl9PEA8SCwoHVU5PV05fUBAQEgsKB1VO",
            "T1dOX1EQERILCgdVTk9XTl9SEBISCwoHVU5PV05fUxATEgsKB1VOT1dOX1QQ",
            "FBILCgdVTk9XTl9VEBUSCwoHVU5PV05fVhAWEgsKB1VOT1dOX1cQFxILCgdV",
            "Tk9XTl9YEBgSCwoHVU5PV05fWRAZEgsKB1VOT1dOX1oQGhIbChdVTk9XTl9F",
            "WENMQU1BVElPTl9QT0lOVBAbEhcKE1VOT1dOX1FVRVNUSU9OX01BUksQHCJR",
            "CgdDb3N0dW1lEgkKBVVOU0VUEAASEAoMSE9MSURBWV8yMDE2EAESDwoLQU5O",
            "SVZFUlNBUlkQAhIYChRPTkVfWUVBUl9BTk5JVkVSU0FSWRADIkAKBkdlbmRl",
            "chIQCgxHRU5ERVJfVU5TRVQQABIICgRNQUxFEAESCgoGRkVNQUxFEAISDgoK",
            "R0VOREVSTEVTUxADIqAHCgxQb2tlbW9uUHJvdG8SCgoCaWQYASABKAYSEgoK",
            "cG9rZW1vbl9pZBgCIAEoBRIKCgJjcBgDIAEoBRIPCgdzdGFtaW5hGAQgASgF",
            "EhMKC21heF9zdGFtaW5hGAUgASgFEg0KBW1vdmUxGAYgASgFEg0KBW1vdmUy",
            "GAcgASgFEhgKEGRlcGxveWVkX2ZvcnRfaWQYCCABKAkSEgoKb3duZXJfbmFt",
            "ZRgJIAEoCRIOCgZpc19lZ2cYCiABKAgSHAoUZWdnX2ttX3dhbGtlZF90YXJn",
            "ZXQYCyABKAESGwoTZWdnX2ttX3dhbGtlZF9zdGFydBgMIAEoARIyCgZvcmln",
            "aW4YDiABKA4yIi5Ib2xvaG9sby5ScGMuUG9rZW1vbkNyZWF0ZUNvbnRleHQS",
            "EAoIaGVpZ2h0X20YDyABKAISEQoJd2VpZ2h0X2tnGBAgASgCEhkKEWluZGl2",
            "aWR1YWxfYXR0YWNrGBEgASgFEhoKEmluZGl2aWR1YWxfZGVmZW5zZRgSIAEo",
            "BRIaChJpbmRpdmlkdWFsX3N0YW1pbmEYEyABKAUSFQoNY3BfbXVsdGlwbGll",
            "chgUIAEoAhIkCghwb2tlYmFsbBgVIAEoDjISLkhvbG9ob2xvLlJwYy5JdGVt",
            "EhsKE2NhcHR1cmVkX3MyX2NlbGxfaWQYFiABKAMSGAoQYmF0dGxlc19hdHRh",
            "Y2tlZBgXIAEoBRIYChBiYXR0bGVzX2RlZmVuZGVkGBggASgFEhgKEGVnZ19p",
            "bmN1YmF0b3JfaWQYGSABKAkSGAoQY3JlYXRpb25fdGltZV9tcxgaIAEoAxIU",
            "CgxudW1fdXBncmFkZXMYGyABKAUSIAoYYWRkaXRpb25hbF9jcF9tdWx0aXBs",
            "aWVyGBwgASgCEhAKCGZhdm9yaXRlGB0gASgIEhAKCG5pY2tuYW1lGB4gASgJ",
            "EhEKCWZyb21fZm9ydBgfIAEoCBIbChNidWRkeV9jYW5keV9hd2FyZGVkGCAg",
            "ASgFEhcKD2J1ZGR5X2ttX3dhbGtlZBghIAEoAhIaChJkaXNwbGF5X3Bva2Vt",
            "b25faWQYIiABKAUSEgoKZGlzcGxheV9jcBgjIAEoBRI6Cg9wb2tlbW9uX2Rp",
            "c3BsYXkYJCABKAsyIS5Ib2xvaG9sby5ScGMuUG9rZW1vbkRpc3BsYXlQcm90",
            "bxIOCgZpc19iYWQYJSABKAgSGAoQaGF0Y2hlZF9mcm9tX2VnZxgmIAEoCCJq",
            "CgtQb2tlbW9uSW5mbxIrCgdwb2tlbW9uGAEgASgLMhouSG9sb2hvbG8uUnBj",
            "LlBva2Vtb25Qcm90bxIWCg5jdXJyZW50X2hlYWx0aBgCIAEoBRIWCg5jdXJy",
            "ZW50X2VuZXJneRgDIAEoBSKlAwoRUGxheWVyQXZhdGFyUHJvdG8SDgoGYXZh",
            "dGFyGAggASgFEgwKBHNraW4YAiABKAUSDAoEaGFpchgDIAEoBRINCgVzaGly",
            "dBgEIAEoBRINCgVwYW50cxgFIAEoBRILCgNoYXQYBiABKAUSDQoFc2hvZXMY",
            "ByABKAUSDAoEZXllcxgJIAEoBRIQCghiYWNrcGFjaxgKIAEoBRITCgthdmF0",
            "YXJfaGFpchgLIAEoCRIUCgxhdmF0YXJfc2hpcnQYDCABKAkSFAoMYXZhdGFy",
            "X3BhbnRzGA0gASgJEhIKCmF2YXRhcl9oYXQYDiABKAkSFAoMYXZhdGFyX3No",
            "b2VzGA8gASgJEhMKC2F2YXRhcl9leWVzGBAgASgJEhcKD2F2YXRhcl9iYWNr",
            "cGFjaxgRIAEoCRIVCg1hdmF0YXJfZ2xvdmVzGBIgASgJEhQKDGF2YXRhcl9z",
            "b2NrcxgTIAEoCRITCgthdmF0YXJfYmVsdBgUIAEoCRIWCg5hdmF0YXJfZ2xh",
            "c3NlcxgVIAEoCRIXCg9hdmF0YXJfbmVja2xhY2UYFiABKAki7QMKGFBsYXll",
            "clB1YmxpY1Byb2ZpbGVQcm90bxIMCgRuYW1lGAEgASgJEg0KBWxldmVsGAIg",
            "ASgFEi8KBmF2YXRhchgDIAEoCzIfLkhvbG9ob2xvLlJwYy5QbGF5ZXJBdmF0",
            "YXJQcm90bxI5CgR0ZWFtGAQgASgOMisuSG9sb2hvbG8uUnBjLlBsYXllclB1",
            "YmxpY1Byb2ZpbGVQcm90by5UZWFtEhMKC2JhdHRsZXNfd29uGAUgASgFEhEK",
            "CWttX3dhbGtlZBgGIAEoAhIWCg5jYXVnaHRfcG9rZW1vbhgHIAEoBRJLCg5n",
            "eW1fYmFkZ2VfdHlwZRgIIAEoDjIzLkhvbG9ob2xvLlJwYy5QbGF5ZXJQdWJs",
            "aWNQcm9maWxlUHJvdG8uR3ltQmFkZ2VUeXBlIj8KBFRlYW0SCQoFVU5TRVQQ",
            "ABINCglURUFNX0JMVUUQARIMCghURUFNX1JFRBACEg8KC1RFQU1fWUVMTE9X",
            "EAMiegoMR3ltQmFkZ2VUeXBlEhMKD0dZTV9CQURHRV9VTlNFVBAAEhUKEUdZ",
            "TV9CQURHRV9WQU5JTExBEAESFAoQR1lNX0JBREdFX0JST05aRRACEhQKEEdZ",
            "TV9CQURHRV9TSUxWRVIQAxISCg5HWU1fQkFER0VfR09MRBAEInQKEUxvYmJ5",
            "UG9rZW1vblByb3RvEgoKAmlkGAEgASgDEi8KCnBva2VkZXhfaWQYAiABKA4y",
            "Gy5Ib2xvaG9sby5ScGMuSG9sb1Bva2Vtb25JZBIKCgJjcBgDIAEoBRIWCg5w",
            "ZXJjZW50X2hlYWx0aBgEIAEoAiLKAgoWQmF0dGxlUGFydGljaXBhbnRQcm90",
            "bxIxCg5hY3RpdmVfcG9rZW1vbhgBIAEoCzIZLkhvbG9ob2xvLlJwYy5Qb2tl",
            "bW9uSW5mbxJGChZ0cmFpbmVyX3B1YmxpY19wcm9maWxlGAIgASgLMiYuSG9s",
            "b2hvbG8uUnBjLlBsYXllclB1YmxpY1Byb2ZpbGVQcm90bxIyCg9yZXNlcnZl",
            "X3Bva2Vtb24YAyADKAsyGS5Ib2xvaG9sby5ScGMuUG9rZW1vbkluZm8SMwoQ",
            "ZGVmZWF0ZWRfcG9rZW1vbhgEIAMoCzIZLkhvbG9ob2xvLlJwYy5Qb2tlbW9u",
            "SW5mbxI2Cg1sb2JieV9wb2tlbW9uGAUgAygLMh8uSG9sb2hvbG8uUnBjLkxv",
            "YmJ5UG9rZW1vblByb3RvEhQKDGRhbWFnZV9kZWFsdBgGIAEoBSLUAQoPTWFw",
            "UG9rZW1vblByb3RvEhUKDXNwYXducG9pbnRfaWQYASABKAkSFAoMZW5jb3Vu",
            "dGVyX2lkGAIgASgGEhcKD3Bva2VkZXhfdHlwZV9pZBgDIAEoBRIaChJleHBp",
            "cmF0aW9uX3RpbWVfbXMYBCABKAMSEAoIbGF0aXR1ZGUYBSABKAESEQoJbG9u",
            "Z2l0dWRlGAYgASgBEjoKD3Bva2Vtb25fZGlzcGxheRgHIAEoCzIhLkhvbG9o",
            "b2xvLlJwYy5Qb2tlbW9uRGlzcGxheVByb3RvIoUCCg1SYWlkSW5mb1Byb3Rv",
            "EhEKCXJhaWRfc2VlZBgBIAEoAxIVCg1yYWlkX3NwYXduX21zGAIgASgDEhYK",
            "DnJhaWRfYmF0dGxlX21zGAMgASgDEhMKC3JhaWRfZW5kX21zGAQgASgDEjAK",
            "DHJhaWRfcG9rZW1vbhgFIAEoCzIaLkhvbG9ob2xvLlJwYy5Qb2tlbW9uUHJv",
            "dG8SKwoKcmFpZF9sZXZlbBgGIAEoDjIXLkhvbG9ob2xvLlJwYy5SYWlkTGV2",
            "ZWwSEAoIY29tcGxldGUYByABKAgSFAoMaXNfZXhjbHVzaXZlGAggASgIEhYK",
            "DmlzX3JhaWRfaGlkZGVuGAkgASgIIrwCCg1HeW1FdmVudFByb3RvEg8KB3Ry",
            "YWluZXIYASABKAkSFAoMdGltZXN0YW1wX21zGAIgASgDEjAKBWV2ZW50GAMg",
            "ASgOMiEuSG9sb2hvbG8uUnBjLkd5bUV2ZW50UHJvdG8uRXZlbnQSEgoKcG9r",
            "ZWRleF9pZBgEIAEoBRISCgpwb2tlbW9uX2lkGAUgASgGIqkBCgVFdmVudBIL",
            "CgdVTktOT1dOEAASDwoLUE9LRU1PTl9GRUQQARIUChBQT0tFTU9OX0RFUExP",
            "WUVEEAISFAoQUE9LRU1PTl9SRVRVUk5FRBADEg4KCkJBVFRMRV9XT04QBBIP",
            "CgtCQVRUTEVfTE9TUxAFEhAKDFJBSURfU1RBUlRFRBAGEg4KClJBSURfRU5E",
            "RUQQBxITCg9HWU1fTkVVVFJBTElaRUQQCCKsAQoPR3ltRGlzcGxheVByb3Rv",
            "Ei4KCWd5bV9ldmVudBgBIAMoCzIbLkhvbG9ob2xvLlJwYy5HeW1FdmVudFBy",
            "b3RvEhQKDHRvdGFsX2d5bV9jcBgCIAEoBRIhChlsb3dlc3RfcG9rZW1vbl9t",
            "b3RpdmF0aW9uGAMgASgBEhcKD3Nsb3RzX2F2YWlsYWJsZRgEIAEoBRIXCg9v",
            "Y2N1cGllZF9taWxsaXMYBSABKAMilQoKEFBva2Vtb25Gb3J0UHJvdG8SDwoH",
            "Zm9ydF9pZBgBIAEoCRIYChBsYXN0X21vZGlmaWVkX21zGAIgASgDEhAKCGxh",
            "dGl0dWRlGAMgASgBEhEKCWxvbmdpdHVkZRgEIAEoARIMCgR0ZWFtGAUgASgF",
            "EhgKEGd1YXJkX3Bva2Vtb25faWQYBiABKAUSGwoTZ3VhcmRfcG9rZW1vbl9s",
            "ZXZlbBgHIAEoBRIPCgdlbmFibGVkGAggASgIEjoKCWZvcnRfdHlwZRgJIAEo",
            "DjInLkhvbG9ob2xvLlJwYy5Qb2tlbW9uRm9ydFByb3RvLkZvcnRUeXBlEhIK",
            "Cmd5bV9wb2ludHMYCiABKAMSFAoMaXNfaW5fYmF0dGxlGAsgASgIEjAKFGFj",
            "dGl2ZV9mb3J0X21vZGlmaWVyGAwgAygOMhIuSG9sb2hvbG8uUnBjLkl0ZW0S",
            "NQoOYWN0aXZlX3Bva2Vtb24YDSABKAsyHS5Ib2xvaG9sby5ScGMuTWFwUG9r",
            "ZW1vblByb3RvEhwKFGNvb2xkb3duX2NvbXBsZXRlX21zGA4gASgDEjcKB3Nw",
            "b25zb3IYDyABKA4yJi5Ib2xvaG9sby5ScGMuUG9rZW1vbkZvcnRQcm90by5T",
            "cG9uc29yEkQKDnJlbmRlcmluZ190eXBlGBAgASgOMiwuSG9sb2hvbG8uUnBj",
            "LlBva2Vtb25Gb3J0UHJvdG8uUmVuZGVyaW5nVHlwZRIdChVkZXBsb3lfbG9j",
            "a291dF9lbmRfbXMYESABKAMSQAoVZ3VhcmRfcG9rZW1vbl9kaXNwbGF5GBIg",
            "ASgLMiEuSG9sb2hvbG8uUnBjLlBva2Vtb25EaXNwbGF5UHJvdG8SDgoGY2xv",
            "c2VkGBMgASgIEi4KCXJhaWRfaW5mbxgUIAEoCzIbLkhvbG9ob2xvLlJwYy5S",
            "YWlkSW5mb1Byb3RvEjIKC2d5bV9kaXNwbGF5GBUgASgLMh0uSG9sb2hvbG8u",
            "UnBjLkd5bURpc3BsYXlQcm90bxIPCgd2aXNpdGVkGBYgASgIEicKH3NhbWVf",
            "dGVhbV9kZXBsb3lfbG9ja291dF9lbmRfbXMYFyABKAMSFQoNYWxsb3dfY2hl",
            "Y2tpbhgYIAEoCBIRCglpbWFnZV91cmwYGSABKAkSEAoIaW5fZXZlbnQYGiAB",
            "KAgSEgoKYmFubmVyX3VybBgbIAEoCSK5AgoHU3BvbnNvchIJCgVVTlNFVBAA",
            "Eg0KCU1DRE9OQUxEUxABEhEKDVBPS0VNT05fU1RPUkUQAhIICgRUT0hPEAMS",
            "DAoIU09GVEJBTksQBBIJCgVHTE9CRRAFEgsKB1NQQVRVTEEQBhIPCgtUSEVS",
            "TU9NRVRFUhAHEgkKBUtOSUZFEAgSCQoFR1JJTEwQCRIKCgZTTU9LRVIQChIH",
            "CgNQQU4QCxIHCgNCQlEQDBIJCgVGUllFUhANEgsKB1NURUFNRVIQDhIICgRI",
            "T09EEA8SDgoKU0xPV0NPT0tFUhAQEgkKBU1JWEVSEBESCwoHU0NPT1BFUhAS",
            "Eg0KCU1VRkZJTlRJThATEg4KClNBTEFNQU5ERVIQFBILCgdQTEFOQ0hBEBUS",
            "CwoHTklBX09QUxAWEgkKBVdISVNLEBciLwoNUmVuZGVyaW5nVHlwZRILCgdE",
            "RUZBVUxUEAASEQoNSU5URVJOQUxfVEVTVBABIiMKCEZvcnRUeXBlEgcKA0dZ",
            "TRAAEg4KCkNIRUNLUE9JTlQQASK/AQoSR3ltTWVtYmVyc2hpcFByb3RvEisK",
            "B3Bva2Vtb24YASABKAsyGi5Ib2xvaG9sby5ScGMuUG9rZW1vblByb3RvEkYK",
            "FnRyYWluZXJfcHVibGljX3Byb2ZpbGUYAiABKAsyJi5Ib2xvaG9sby5ScGMu",
            "UGxheWVyUHVibGljUHJvZmlsZVByb3RvEjQKEHRyYWluaW5nX3Bva2Vtb24Y",
            "AyABKAsyGi5Ib2xvaG9sby5ScGMuUG9rZW1vblByb3RvIpgBCg1HeW1TdGF0",
            "ZVByb3RvEjUKDWZvcnRfbWFwX2RhdGEYASABKAsyHi5Ib2xvaG9sby5ScGMu",
            "UG9rZW1vbkZvcnRQcm90bxI4Cg5neW1fbWVtYmVyc2hpcBgCIAMoCzIgLkhv",
            "bG9ob2xvLlJwYy5HeW1NZW1iZXJzaGlwUHJvdG8SFgoOZGVwbG95X2xvY2tv",
            "dXQYAyABKAgijgEKGkd5bVN0YXR1c0FuZERlZmVuZGVyc1Byb3RvEjoKEnBv",
            "a2Vtb25fZm9ydF9wcm90bxgBIAEoCzIeLkhvbG9ob2xvLlJwYy5Qb2tlbW9u",
            "Rm9ydFByb3RvEjQKDGd5bV9kZWZlbmRlchgCIAMoCzIeLkhvbG9ob2xvLlJw",
            "Yy5HeW1EZWZlbmRlclByb3RvInUKFURlcGxveW1lbnRUb3RhbHNQcm90bxIR",
            "Cgl0aW1lc19mZWQYASABKAUSEwoLYmF0dGxlc193b24YAiABKAUSFAoMYmF0",
            "dGxlc19sb3N0GAMgASgFEh4KFmRlcGxveW1lbnRfZHVyYXRpb25fbXMYBCAB",
            "KAMi2gEKEEd5bURlZmVuZGVyUHJvdG8SPgoRbW90aXZhdGVkX3Bva2Vtb24Y",
            "ASABKAsyIy5Ib2xvaG9sby5ScGMuTW90aXZhdGVkUG9rZW1vblByb3RvEj4K",
            "EWRlcGxveW1lbnRfdG90YWxzGAIgASgLMiMuSG9sb2hvbG8uUnBjLkRlcGxv",
            "eW1lbnRUb3RhbHNQcm90bxJGChZ0cmFpbmVyX3B1YmxpY19wcm9maWxlGAMg",
            "ASgLMiYuSG9sb2hvbG8uUnBjLlBsYXllclB1YmxpY1Byb2ZpbGVQcm90byKC",
            "AgoVTW90aXZhdGVkUG9rZW1vblByb3RvEisKB3Bva2Vtb24YASABKAsyGi5I",
            "b2xvaG9sby5ScGMuUG9rZW1vblByb3RvEhEKCWRlcGxveV9tcxgCIAEoAxIY",
            "ChBjcF93aGVuX2RlcGxveWVkGAMgASgFEhYKDm1vdGl2YXRpb25fbm93GAQg",
            "ASgBEg4KBmNwX25vdxgFIAEoBRITCgtiZXJyeV92YWx1ZRgGIAEoAhIlCh1m",
            "ZWVkX2Nvb2xkb3duX2R1cmF0aW9uX21pbGxpcxgHIAEoAxIrCgpmb29kX3Zh",
            "bHVlGAggAygLMhcuSG9sb2hvbG8uUnBjLkZvb2RWYWx1ZSJkCglGb29kVmFs",
            "dWUSGwoTbW90aXZhdGlvbl9pbmNyZWFzZRgBIAEoAhITCgtjcF9pbmNyZWFz",
            "ZRgCIAEoBRIlCglmb29kX2l0ZW0YAyABKA4yEi5Ib2xvaG9sby5ScGMuSXRl",
            "bSL8AQoSUGFydGljaXBhdGlvblByb3RvEiMKG2luZGl2aWR1YWxfZGFtYWdl",
            "X3Bva2ViYWxscxgBIAEoBRIdChV0ZWFtX2RhbWFnZV9wb2tlYmFsbHMYAiAB",
            "KAUSHwoXZ3ltX293bmVyc2hpcF9wb2tlYmFsbHMYAyABKAUSFgoOYmFzZV9w",
            "b2tlYmFsbHMYBCABKAUSFwoPYmx1ZV9wZXJjZW50YWdlGAUgASgBEhYKDnJl",
            "ZF9wZXJjZW50YWdlGAYgASgBEhkKEXllbGxvd19wZXJjZW50YWdlGAcgASgB",
            "Eh0KFWJvbnVzX2l0ZW1fbXVsdGlwbGllchgIIAEoAiI7CglMb290UHJvdG8S",
            "LgoJbG9vdF9pdGVtGAEgAygLMhsuSG9sb2hvbG8uUnBjLkxvb3RJdGVtUHJv",
            "dG8imAEKDUxvb3RJdGVtUHJvdG8SIAoEaXRlbRgBIAEoDjISLkhvbG9ob2xv",
            "LlJwYy5JdGVtEhAKCHN0YXJkdXN0GAIgASgIEhAKCHBva2Vjb2luGAMgASgI",
            "EjIKDXBva2Vtb25fY2FuZHkYBCABKA4yGy5Ib2xvaG9sby5ScGMuSG9sb1Bv",
            "a2Vtb25JZBINCgVjb3VudBgFIAEoBSK+AgoSUmFpZEVuY291bnRlclByb3Rv",
            "EisKB3Bva2Vtb24YASABKAsyGi5Ib2xvaG9sby5ScGMuUG9rZW1vblByb3Rv",
            "EhQKDGVuY291bnRlcl9pZBgCIAEoAxIVCg1zcGF3bnBvaW50X2lkGAMgASgJ",
            "EkQKFWNhcHR1cmVfcHJvYmFiaWxpdGllcxgEIAEoCzIlLkhvbG9ob2xvLlJw",
            "Yy5DYXB0dXJlUHJvYmFiaWxpdHlQcm90bxIYChB0aHJvd3NfcmVtYWluaW5n",
            "GAUgASgFEisKCnJhaWRfbGV2ZWwYBiABKA4yFy5Ib2xvaG9sby5ScGMuUmFp",
            "ZExldmVsEg8KB2ZvcnRfaWQYByABKAkSFAoMaXNfZXhjbHVzaXZlGAggASgI",
            "EhoKEmlzX2V2ZW50X2xlZ2VuZGFyeRgJIAEoCCKDAQoXQ2FwdHVyZVByb2Jh",
            "YmlsaXR5UHJvdG8SKQoNcG9rZWJhbGxfdHlwZRgBIAMoDjISLkhvbG9ob2xv",
            "LlJwYy5JdGVtEhsKE2NhcHR1cmVfcHJvYmFiaWxpdHkYAiADKAISIAoYcmV0",
            "aWNsZV9kaWZmaWN1bHR5X3NjYWxlGAwgASgBIpABCg1HeW1CYWRnZVN0YXRz",
            "Eh4KFnRvdGFsX3RpbWVfZGVmZW5kZWRfbXMYASABKAQSFwoPbnVtX2JhdHRs",
            "ZXNfd29uGAIgASgNEhgKEG51bV9iYXR0bGVzX2xvc3QYBSABKA0SFwoPbnVt",
            "X2JlcnJpZXNfZmVkGAMgASgNEhMKC251bV9kZXBsb3lzGAQgASgNIoUBChNQ",
            "bGF5ZXJSYWlkSW5mb1Byb3RvEh0KFXRvdGFsX2NvbXBsZXRlZF9yYWlkcxgD",
            "IAEoBRInCh90b3RhbF9jb21wbGV0ZWRfbGVnZW5kYXJ5X3JhaWRzGAQgASgF",
            "EiYKBXJhaWRzGAUgAygLMhcuSG9sb2hvbG8uUnBjLlJhaWRQcm90byL1AQoJ",
            "UmFpZFByb3RvEhEKCXJhaWRfc2VlZBgBIAEoAxISCgpzdGFydGVkX21zGAIg",
            "ASgDEhQKDGNvbXBsZXRlZF9tcxgDIAEoAxI5ChRlbmNvdW50ZXJfcG9rZW1v",
            "bl9pZBgEIAEoDjIbLkhvbG9ob2xvLlJwYy5Ib2xvUG9rZW1vbklkEhgKEGNv",
            "bXBsZXRlZF9iYXR0bGUYBSABKAgSGAoQcmVjZWl2ZWRfcmV3YXJkcxgGIAEo",
            "CBIaChJmaW5pc2hlZF9lbmNvdW50ZXIYByABKAgSIAoYcmVjZWl2ZWRfZGVm",
            "YXVsdF9yZXdhcmRzGAggASgIIqYDCg9Bd2FyZGVkR3ltQmFkZ2USDwoHZm9y",
            "dF9pZBgBIAEoCRIyCg5neW1fYmFkZ2VfdHlwZRgCIAEoDjIaLkhvbG9ob2xv",
            "LlJwYy5HeW1CYWRnZVR5cGUSDQoFc2NvcmUYAyABKA0SNAoPZ3ltX2JhZGdl",
            "X3N0YXRzGAQgASgLMhsuSG9sb2hvbG8uUnBjLkd5bUJhZGdlU3RhdHMSIAoY",
            "bGFzdF91cGRhdGVfdGltZXN0YW1wX21zGAUgASgEEh8KF2xhc3RfY2hlY2tf",
            "dGltZXN0YW1wX21zGAsgASgEEhUKDWVhcm5lZF9wb2ludHMYDCABKA0SEAoI",
            "cHJvZ3Jlc3MYDSABKAISEAoIbGV2ZWxfdXAYDiABKAgSDAoEbmFtZRgGIAEo",
            "CRIRCglpbWFnZV91cmwYByABKAkSEwoLZGVzY3JpcHRpb24YCCABKAkSEAoI",
            "bGF0aXR1ZGUYCSABKAESEQoJbG9uZ2l0dWRlGAogASgBEjAKBXJhaWRzGA8g",
            "ASgLMiEuSG9sb2hvbG8uUnBjLlBsYXllclJhaWRJbmZvUHJvdG8irAQKEkJh",
            "dHRsZVJlc3VsdHNQcm90bxIuCglneW1fc3RhdGUYASABKAsyGy5Ib2xvaG9s",
            "by5ScGMuR3ltU3RhdGVQcm90bxI3CglhdHRhY2tlcnMYAiADKAsyJC5Ib2xv",
            "aG9sby5ScGMuQmF0dGxlUGFydGljaXBhbnRQcm90bxIZChFwbGF5ZXJfeHBf",
            "YXdhcmRlZBgDIAMoBRIgChhuZXh0X2RlZmVuZGVyX3Bva2Vtb25faWQYBCAB",
            "KAMSGAoQZ3ltX3BvaW50c19kZWx0YRgFIAEoBRI8CgpneW1fc3RhdHVzGAYg",
            "ASgLMiguSG9sb2hvbG8uUnBjLkd5bVN0YXR1c0FuZERlZmVuZGVyc1Byb3Rv",
            "EjcKDXBhcnRpY2lwYXRpb24YByADKAsyIC5Ib2xvaG9sby5ScGMuUGFydGlj",
            "aXBhdGlvblByb3RvEjIKEXJhaWRfaXRlbV9yZXdhcmRzGAggAygLMhcuSG9s",
            "b2hvbG8uUnBjLkxvb3RQcm90bxI9ChNwb3N0X3JhaWRfZW5jb3VudGVyGAkg",
            "AygLMiAuSG9sb2hvbG8uUnBjLlJhaWRFbmNvdW50ZXJQcm90bxIwCglneW1f",
            "YmFkZ2UYCiADKAsyHS5Ib2xvaG9sby5ScGMuQXdhcmRlZEd5bUJhZGdlEjoK",
            "GWRlZmF1bHRfcmFpZF9pdGVtX3Jld2FyZHMYCyADKAsyFy5Ib2xvaG9sby5S",
            "cGMuTG9vdFByb3RvIpEFChFCYXR0bGVBY3Rpb25Qcm90bxI4CgR0eXBlGAEg",
            "ASgOMiouSG9sb2hvbG8uUnBjLkJhdHRsZUFjdGlvblByb3RvLkFjdGlvblR5",
            "cGUSFwoPYWN0aW9uX3N0YXJ0X21zGAIgASgDEhMKC2R1cmF0aW9uX21zGAMg",
            "ASgFEhQKDGVuZXJneV9kZWx0YRgFIAEoBRIWCg5hdHRhY2tlcl9pbmRleBgG",
            "IAEoBRIUCgx0YXJnZXRfaW5kZXgYByABKAUSGQoRYWN0aXZlX3Bva2Vtb25f",
            "aWQYCCABKAYSOwoNam9pbmVkX3BsYXllchgJIAEoCzIkLkhvbG9ob2xvLlJw",
            "Yy5CYXR0bGVQYXJ0aWNpcGFudFByb3RvEjgKDmJhdHRsZV9yZXN1bHRzGAog",
            "ASgLMiAuSG9sb2hvbG8uUnBjLkJhdHRsZVJlc3VsdHNQcm90bxIeChZkYW1h",
            "Z2Vfd2luZG93X3N0YXJ0X21zGAsgASgDEhwKFGRhbWFnZV93aW5kb3dfZW5k",
            "X21zGAwgASgDEjkKC3F1aXRfcGxheWVyGA0gASgLMiQuSG9sb2hvbG8uUnBj",
            "LkJhdHRsZVBhcnRpY2lwYW50UHJvdG8SGQoRdGFyZ2V0X3Bva2Vtb25faWQY",
            "DiABKAYiqQEKCkFjdGlvblR5cGUSCQoFVU5TRVQQABIKCgZBVFRBQ0sQARIJ",
            "CgVET0RHRRACEhIKDlNQRUNJQUxfQVRUQUNLEAMSEAoMU1dBUF9QT0tFTU9O",
            "EAQSCQoFRkFJTlQQBRIPCgtQTEFZRVJfSk9JThAGEg8KC1BMQVlFUl9RVUlU",
            "EAcSCwoHVklDVE9SWRAIEgoKBkRFRkVBVBAJEg0KCVRJTUVEX09VVBAKIpYD",
            "Cg5CYXR0bGVMb2dQcm90bxIxCgVzdGF0ZRgBIAEoDjIiLkhvbG9ob2xvLlJw",
            "Yy5CYXR0bGVMb2dQcm90by5TdGF0ZRI8CgtiYXR0bGVfdHlwZRgCIAEoDjIn",
            "LkhvbG9ob2xvLlJwYy5CYXR0bGVMb2dQcm90by5CYXR0bGVUeXBlEhEKCXNl",
            "cnZlcl9tcxgDIAEoAxI3Cg5iYXR0bGVfYWN0aW9ucxgEIAMoCzIfLkhvbG9o",
            "b2xvLlJwYy5CYXR0bGVBY3Rpb25Qcm90bxIXCg9iYXR0bGVfc3RhcnRfbXMY",
            "BSABKAMSFQoNYmF0dGxlX2VuZF9tcxgGIAEoAyJOCgVTdGF0ZRIPCgtTVEFU",
            "RV9VTlNFVBAAEgoKBkFDVElWRRABEgsKB1ZJQ1RPUlkQAhIMCghERUZFQVRF",
            "RBADEg0KCVRJTUVEX09VVBAEIkcKCkJhdHRsZVR5cGUSFQoRQkFUVExFX1RZ",
            "UEVfVU5TRVQQABIKCgZOT1JNQUwQARIMCghUUkFJTklORxACEggKBFJBSUQQ",
            "AyLyAQoLQmF0dGxlUHJvdG8SFwoPYmF0dGxlX3N0YXJ0X21zGAEgASgDEhUK",
            "DWJhdHRsZV9lbmRfbXMYAiABKAMSEQoJYmF0dGxlX2lkGAMgASgJEjYKCGRl",
            "ZmVuZGVyGAQgASgLMiQuSG9sb2hvbG8uUnBjLkJhdHRsZVBhcnRpY2lwYW50",
            "UHJvdG8SMAoKYmF0dGxlX2xvZxgFIAEoCzIcLkhvbG9ob2xvLlJwYy5CYXR0",
            "bGVMb2dQcm90bxI2CghhdHRhY2tlchgGIAEoCzIkLkhvbG9ob2xvLlJwYy5C",
            "YXR0bGVQYXJ0aWNpcGFudFByb3RvIrEEChdHeW1TdGFydFNlc3Npb25PdXRQ",
            "cm90bxI8CgZyZXN1bHQYASABKA4yLC5Ib2xvaG9sby5ScGMuR3ltU3RhcnRT",
            "ZXNzaW9uT3V0UHJvdG8uUmVzdWx0EikKBmJhdHRsZRgCIAEoCzIZLkhvbG9o",
            "b2xvLlJwYy5CYXR0bGVQcm90byKsAwoGUmVzdWx0EgkKBVVOU0VUEAASCwoH",
            "U1VDQ0VTUxABEhcKE0VSUk9SX0dZTV9OT1RfRk9VTkQQAhIVChFFUlJPUl9H",
            "WU1fTkVVVFJBTBADEhgKFEVSUk9SX0dZTV9XUk9OR19URUFNEAQSEwoPRVJS",
            "T1JfR1lNX0VNUFRZEAUSGgoWRVJST1JfSU5WQUxJRF9ERUZFTkRFUhAGEikK",
            "JUVSUk9SX1RSQUlOSU5HX0lOVkFMSURfQVRUQUNLRVJfQ09VTlQQBxIdChlF",
            "UlJPUl9BTExfUE9LRU1PTl9GQUlOVEVEEAgSGgoWRVJST1JfVE9PX01BTllf",
            "QkFUVExFUxAJEhoKFkVSUk9SX1RPT19NQU5ZX1BMQVlFUlMQChIcChhFUlJP",
            "Ul9HWU1fQkFUVExFX0xPQ0tPVVQQCxIkCiBFUlJPUl9QTEFZRVJfQkVMT1df",
            "TUlOSU1VTV9MRVZFTBAMEhYKEkVSUk9SX05PVF9JTl9SQU5HRRANEhoKFkVS",
            "Uk9SX1BPSV9JTkFDQ0VTU0lCTEUQDhIVChFFUlJPUl9SQUlEX0FDVElWRRAP",
            "KrNUCg1Ib2xvUG9rZW1vbklkEhEKDVBPS0VNT05fVU5TRVQQABIbChdWMDAw",
            "MV9QT0tFTU9OX0JVTEJBU0FVUhABEhkKFVYwMDAyX1BPS0VNT05fSVZZU0FV",
            "UhACEhoKFlYwMDAzX1BPS0VNT05fVkVOVVNBVVIQAxIcChhWMDAwNF9QT0tF",
            "TU9OX0NIQVJNQU5ERVIQBBIcChhWMDAwNV9QT0tFTU9OX0NIQVJNRUxFT04Q",
            "BRIbChdWMDAwNl9QT0tFTU9OX0NIQVJJWkFSRBAGEhoKFlYwMDA3X1BPS0VN",
            "T05fU1FVSVJUTEUQBxIbChdWMDAwOF9QT0tFTU9OX1dBUlRPUlRMRRAIEhsK",
            "F1YwMDA5X1BPS0VNT05fQkxBU1RPSVNFEAkSGgoWVjAwMTBfUE9LRU1PTl9D",
            "QVRFUlBJRRAKEhkKFVYwMDExX1BPS0VNT05fTUVUQVBPRBALEhwKGFYwMDEy",
            "X1BPS0VNT05fQlVUVEVSRlJFRRAMEhgKFFYwMDEzX1BPS0VNT05fV0VFRExF",
            "EA0SGAoUVjAwMTRfUE9LRU1PTl9LQUtVTkEQDhIaChZWMDAxNV9QT0tFTU9O",
            "X0JFRURSSUxMEA8SGAoUVjAwMTZfUE9LRU1PTl9QSURHRVkQEBIbChdWMDAx",
            "N19QT0tFTU9OX1BJREdFT1RUTxAREhkKFVYwMDE4X1BPS0VNT05fUElER0VP",
            "VBASEhkKFVYwMDE5X1BPS0VNT05fUkFUVEFUQRATEhoKFlYwMDIwX1BPS0VN",
            "T05fUkFUSUNBVEUQFBIZChVWMDAyMV9QT0tFTU9OX1NQRUFST1cQFRIYChRW",
            "MDAyMl9QT0tFTU9OX0ZFQVJPVxAWEhcKE1YwMDIzX1BPS0VNT05fRUtBTlMQ",
            "FxIXChNWMDAyNF9QT0tFTU9OX0FSQk9LEBgSGQoVVjAwMjVfUE9LRU1PTl9Q",
            "SUtBQ0hVEBkSGAoUVjAwMjZfUE9LRU1PTl9SQUlDSFUQGhIbChdWMDAyN19Q",
            "T0tFTU9OX1NBTkRTSFJFVxAbEhsKF1YwMDI4X1BPS0VNT05fU0FORFNMQVNI",
            "EBwSGQoVVjAwMjlfUE9LRU1PTl9OSURPUkFOEB0SGgoWVjAwMzBfUE9LRU1P",
            "Tl9OSURPUklOQRAeEhsKF1YwMDMxX1BPS0VNT05fTklET1FVRUVOEB8SGQoV",
            "VjAwMzJfUE9LRU1PTl9OSURPUkFOECASGgoWVjAwMzNfUE9LRU1PTl9OSURP",
            "UklOTxAhEhoKFlYwMDM0X1BPS0VNT05fTklET0tJTkcQIhIaChZWMDAzNV9Q",
            "T0tFTU9OX0NMRUZBSVJZECMSGgoWVjAwMzZfUE9LRU1PTl9DTEVGQUJMRRAk",
            "EhgKFFYwMDM3X1BPS0VNT05fVlVMUElYECUSGwoXVjAwMzhfUE9LRU1PTl9O",
            "SU5FVEFMRVMQJhIcChhWMDAzOV9QT0tFTU9OX0pJR0dMWVBVRkYQJxIcChhW",
            "MDA0MF9QT0tFTU9OX1dJR0dMWVRVRkYQKBIXChNWMDA0MV9QT0tFTU9OX1pV",
            "QkFUECkSGAoUVjAwNDJfUE9LRU1PTl9HT0xCQVQQKhIYChRWMDA0M19QT0tF",
            "TU9OX09ERElTSBArEhcKE1YwMDQ0X1BPS0VNT05fR0xPT00QLBIbChdWMDA0",
            "NV9QT0tFTU9OX1ZJTEVQTFVNRRAtEhcKE1YwMDQ2X1BPS0VNT05fUEFSQVMQ",
            "LhIaChZWMDA0N19QT0tFTU9OX1BBUkFTRUNUEC8SGQoVVjAwNDhfUE9LRU1P",
            "Tl9WRU5PTkFUEDASGgoWVjAwNDlfUE9LRU1PTl9WRU5PTU9USBAxEhkKFVYw",
            "MDUwX1BPS0VNT05fRElHTEVUVBAyEhkKFVYwMDUxX1BPS0VNT05fRFVHVFJJ",
            "TxAzEhgKFFYwMDUyX1BPS0VNT05fTUVPV1RIEDQSGQoVVjAwNTNfUE9LRU1P",
            "Tl9QRVJTSUFOEDUSGQoVVjAwNTRfUE9LRU1PTl9QU1lEVUNLEDYSGQoVVjAw",
            "NTVfUE9LRU1PTl9HT0xEVUNLEDcSGAoUVjAwNTZfUE9LRU1PTl9NQU5LRVkQ",
            "OBIaChZWMDA1N19QT0tFTU9OX1BSSU1FQVBFEDkSGwoXVjAwNThfUE9LRU1P",
            "Tl9HUk9XTElUSEUQOhIaChZWMDA1OV9QT0tFTU9OX0FSQ0FOSU5FEDsSGQoV",
            "VjAwNjBfUE9LRU1PTl9QT0xJV0FHEDwSGwoXVjAwNjFfUE9LRU1PTl9QT0xJ",
            "V0hJUkwQPRIbChdWMDA2Ml9QT0tFTU9OX1BPTElXUkFUSBA+EhYKElYwMDYz",
            "X1BPS0VNT05fQUJSQRA/EhkKFVYwMDY0X1BPS0VNT05fS0FEQUJSQRBAEhoK",
            "FlYwMDY1X1BPS0VNT05fQUxBS0FaQU0QQRIYChRWMDA2Nl9QT0tFTU9OX01B",
            "Q0hPUBBCEhkKFVYwMDY3X1BPS0VNT05fTUFDSE9LRRBDEhkKFVYwMDY4X1BP",
            "S0VNT05fTUFDSEFNUBBEEhwKGFYwMDY5X1BPS0VNT05fQkVMTFNQUk9VVBBF",
            "EhwKGFYwMDcwX1BPS0VNT05fV0VFUElOQkVMTBBGEhwKGFYwMDcxX1BPS0VN",
            "T05fVklDVFJFRUJFTBBHEhsKF1YwMDcyX1BPS0VNT05fVEVOVEFDT09MEEgS",
            "HAoYVjAwNzNfUE9LRU1PTl9URU5UQUNSVUVMEEkSGQoVVjAwNzRfUE9LRU1P",
            "Tl9HRU9EVURFEEoSGgoWVjAwNzVfUE9LRU1PTl9HUkFWRUxFUhBLEhcKE1Yw",
            "MDc2X1BPS0VNT05fR09MRU0QTBIYChRWMDA3N19QT0tFTU9OX1BPTllUQRBN",
            "EhoKFlYwMDc4X1BPS0VNT05fUkFQSURBU0gQThIaChZWMDA3OV9QT0tFTU9O",
            "X1NMT1dQT0tFEE8SGQoVVjAwODBfUE9LRU1PTl9TTE9XQlJPEFASGwoXVjAw",
            "ODFfUE9LRU1PTl9NQUdORU1JVEUQURIaChZWMDA4Ml9QT0tFTU9OX01BR05F",
            "VE9OEFISGwoXVjAwODNfUE9LRU1PTl9GQVJGRVRDSEQQUxIXChNWMDA4NF9Q",
            "T0tFTU9OX0RPRFVPEFQSGAoUVjAwODVfUE9LRU1PTl9ET0RSSU8QVRIWChJW",
            "MDA4Nl9QT0tFTU9OX1NFRUwQVhIZChVWMDA4N19QT0tFTU9OX0RFV0dPTkcQ",
            "VxIYChRWMDA4OF9QT0tFTU9OX0dSSU1FUhBYEhUKEVYwMDg5X1BPS0VNT05f",
            "TVVLEFkSGgoWVjAwOTBfUE9LRU1PTl9TSEVMTERFUhBaEhoKFlYwMDkxX1BP",
            "S0VNT05fQ0xPWVNURVIQWxIYChRWMDA5Ml9QT0tFTU9OX0dBU1RMWRBcEhkK",
            "FVYwMDkzX1BPS0VNT05fSEFVTlRFUhBdEhgKFFYwMDk0X1BPS0VNT05fR0VO",
            "R0FSEF4SFgoSVjAwOTVfUE9LRU1PTl9PTklYEF8SGQoVVjAwOTZfUE9LRU1P",
            "Tl9EUk9XWkVFEGASFwoTVjAwOTdfUE9LRU1PTl9IWVBOTxBhEhgKFFYwMDk4",
            "X1BPS0VNT05fS1JBQkJZEGISGQoVVjAwOTlfUE9LRU1PTl9LSU5HTEVSEGMS",
            "GQoVVjAxMDBfUE9LRU1PTl9WT0xUT1JCEGQSGwoXVjAxMDFfUE9LRU1PTl9F",
            "TEVDVFJPREUQZRIbChdWMDEwMl9QT0tFTU9OX0VYRUdHQ1VURRBmEhsKF1Yw",
            "MTAzX1BPS0VNT05fRVhFR0dVVE9SEGcSGAoUVjAxMDRfUE9LRU1PTl9DVUJP",
            "TkUQaBIZChVWMDEwNV9QT0tFTU9OX01BUk9XQUsQaRIbChdWMDEwNl9QT0tF",
            "TU9OX0hJVE1PTkxFRRBqEhwKGFYwMTA3X1BPS0VNT05fSElUTU9OQ0hBThBr",
            "EhsKF1YwMTA4X1BPS0VNT05fTElDS0lUVU5HEGwSGQoVVjAxMDlfUE9LRU1P",
            "Tl9LT0ZGSU5HEG0SGQoVVjAxMTBfUE9LRU1PTl9XRUVaSU5HEG4SGQoVVjAx",
            "MTFfUE9LRU1PTl9SSFlIT1JOEG8SGAoUVjAxMTJfUE9LRU1PTl9SSFlET04Q",
            "cBIZChVWMDExM19QT0tFTU9OX0NIQU5TRVkQcRIZChVWMDExNF9QT0tFTU9O",
            "X1RBTkdFTEEQchIcChhWMDExNV9QT0tFTU9OX0tBTkdBU0tIQU4QcxIYChRW",
            "MDExNl9QT0tFTU9OX0hPUlNFQRB0EhgKFFYwMTE3X1BPS0VNT05fU0VBRFJB",
            "EHUSGQoVVjAxMThfUE9LRU1PTl9HT0xERUVOEHYSGQoVVjAxMTlfUE9LRU1P",
            "Tl9TRUFLSU5HEHcSGAoUVjAxMjBfUE9LRU1PTl9TVEFSWVUQeBIZChVWMDEy",
            "MV9QT0tFTU9OX1NUQVJNSUUQeRIZChVWMDEyMl9QT0tFTU9OX01SX01JTUUQ",
            "ehIZChVWMDEyM19QT0tFTU9OX1NDWVRIRVIQexIWChJWMDEyNF9QT0tFTU9O",
            "X0pZTlgQfBIcChhWMDEyNV9QT0tFTU9OX0VMRUNUQUJVWloQfRIYChRWMDEy",
            "Nl9QT0tFTU9OX01BR01BUhB+EhgKFFYwMTI3X1BPS0VNT05fUElOU0lSEH8S",
            "GQoUVjAxMjhfUE9LRU1PTl9UQVVST1MQgAESGwoWVjAxMjlfUE9LRU1PTl9N",
            "QUdJS0FSUBCBARIbChZWMDEzMF9QT0tFTU9OX0dZQVJBRE9TEIIBEhkKFFYw",
            "MTMxX1BPS0VNT05fTEFQUkFTEIMBEhgKE1YwMTMyX1BPS0VNT05fRElUVE8Q",
            "hAESGAoTVjAxMzNfUE9LRU1PTl9FRVZFRRCFARIbChZWMDEzNF9QT0tFTU9O",
            "X1ZBUE9SRU9OEIYBEhoKFVYwMTM1X1BPS0VNT05fSk9MVEVPThCHARIaChVW",
            "MDEzNl9QT0tFTU9OX0ZMQVJFT04QiAESGgoVVjAxMzdfUE9LRU1PTl9QT1JZ",
            "R09OEIkBEhoKFVYwMTM4X1BPS0VNT05fT01BTllURRCKARIaChVWMDEzOV9Q",
            "T0tFTU9OX09NQVNUQVIQiwESGQoUVjAxNDBfUE9LRU1PTl9LQUJVVE8QjAES",
            "GwoWVjAxNDFfUE9LRU1PTl9LQUJVVE9QUxCNARIdChhWMDE0Ml9QT0tFTU9O",
            "X0FFUk9EQUNUWUwQjgESGgoVVjAxNDNfUE9LRU1PTl9TTk9STEFYEI8BEhsK",
            "FlYwMTQ0X1BPS0VNT05fQVJUSUNVTk8QkAESGQoUVjAxNDVfUE9LRU1PTl9a",
            "QVBET1MQkQESGgoVVjAxNDZfUE9LRU1PTl9NT0xUUkVTEJIBEhoKFVYwMTQ3",
            "X1BPS0VNT05fRFJBVElOSRCTARIcChdWMDE0OF9QT0tFTU9OX0RSQUdPTkFJ",
            "UhCUARIcChdWMDE0OV9QT0tFTU9OX0RSQUdPTklURRCVARIZChRWMDE1MF9Q",
            "T0tFTU9OX01FV1RXTxCWARIWChFWMDE1MV9QT0tFTU9OX01FVxCXARIcChdW",
            "MDE1Ml9QT0tFTU9OX0NISUtPUklUQRCYARIaChVWMDE1M19QT0tFTU9OX0JB",
            "WUxFRUYQmQESGwoWVjAxNTRfUE9LRU1PTl9NRUdBTklVTRCaARIcChdWMDE1",
            "NV9QT0tFTU9OX0NZTkRBUVVJTBCbARIaChVWMDE1Nl9QT0tFTU9OX1FVSUxB",
            "VkEQnAESHQoYVjAxNTdfUE9LRU1PTl9UWVBITE9TSU9OEJ0BEhsKFlYwMTU4",
            "X1BPS0VNT05fVE9UT0RJTEUQngESGwoWVjAxNTlfUE9LRU1PTl9DUk9DT05B",
            "VxCfARIdChhWMDE2MF9QT0tFTU9OX0ZFUkFMSUdBVFIQoAESGgoVVjAxNjFf",
            "UE9LRU1PTl9TRU5UUkVUEKEBEhkKFFYwMTYyX1BPS0VNT05fRlVSUkVUEKIB",
            "EhsKFlYwMTYzX1BPS0VNT05fSE9PVEhPT1QQowESGgoVVjAxNjRfUE9LRU1P",
            "Tl9OT0NUT1dMEKQBEhkKFFYwMTY1X1BPS0VNT05fTEVEWUJBEKUBEhkKFFYw",
            "MTY2X1BPS0VNT05fTEVESUFOEKYBEhsKFlYwMTY3X1BPS0VNT05fU1BJTkFS",
            "QUsQpwESGgoVVjAxNjhfUE9LRU1PTl9BUklBRE9TEKgBEhkKFFYwMTY5X1BP",
            "S0VNT05fQ1JPQkFUEKkBEhsKFlYwMTcwX1BPS0VNT05fQ0hJTkNIT1UQqgES",
            "GgoVVjAxNzFfUE9LRU1PTl9MQU5UVVJOEKsBEhgKE1YwMTcyX1BPS0VNT05f",
            "UElDSFUQrAESGQoUVjAxNzNfUE9LRU1PTl9DTEVGRkEQrQESHAoXVjAxNzRf",
            "UE9LRU1PTl9JR0dMWUJVRkYQrgESGQoUVjAxNzVfUE9LRU1PTl9UT0dFUEkQ",
            "rwESGgoVVjAxNzZfUE9LRU1PTl9UT0dFVElDELABEhcKElYwMTc3X1BPS0VN",
            "T05fTkFUVRCxARIXChJWMDE3OF9QT0tFTU9OX1hBVFUQsgESGQoUVjAxNzlf",
            "UE9LRU1PTl9NQVJFRVAQswESGgoVVjAxODBfUE9LRU1PTl9GTEFBRkZZELQB",
            "EhsKFlYwMTgxX1BPS0VNT05fQU1QSEFST1MQtQESHAoXVjAxODJfUE9LRU1P",
            "Tl9CRUxMT1NTT00QtgESGQoUVjAxODNfUE9LRU1PTl9NQVJJTEwQtwESHAoX",
            "VjAxODRfUE9LRU1PTl9BWlVNQVJJTEwQuAESHAoXVjAxODVfUE9LRU1PTl9T",
            "VURPV09PRE8QuQESGwoWVjAxODZfUE9LRU1PTl9QT0xJVE9FRBC6ARIZChRW",
            "MDE4N19QT0tFTU9OX0hPUFBJUBC7ARIbChZWMDE4OF9QT0tFTU9OX1NLSVBM",
            "T09NELwBEhsKFlYwMTg5X1BPS0VNT05fSlVNUExVRkYQvQESGAoTVjAxOTBf",
            "UE9LRU1PTl9BSVBPTRC+ARIaChVWMDE5MV9QT0tFTU9OX1NVTktFUk4QvwES",
            "GwoWVjAxOTJfUE9LRU1PTl9TVU5GTE9SQRDAARIYChNWMDE5M19QT0tFTU9O",
            "X1lBTk1BEMEBEhkKFFYwMTk0X1BPS0VNT05fV09PUEVSEMIBEhsKFlYwMTk1",
            "X1BPS0VNT05fUVVBR1NJUkUQwwESGQoUVjAxOTZfUE9LRU1PTl9FU1BFT04Q",
            "xAESGgoVVjAxOTdfUE9LRU1PTl9VTUJSRU9OEMUBEhoKFVYwMTk4X1BPS0VN",
            "T05fTVVSS1JPVxDGARIbChZWMDE5OV9QT0tFTU9OX1NMT1dLSU5HEMcBEh0K",
            "GFYwMjAwX1BPS0VNT05fTUlTRFJFQVZVUxDIARIYChNWMDIwMV9QT0tFTU9O",
            "X1VOT1dOEMkBEhwKF1YwMjAyX1BPS0VNT05fV09CQlVGRkVUEMoBEhwKF1Yw",
            "MjAzX1BPS0VNT05fR0lSQUZBUklHEMsBEhkKFFYwMjA0X1BPS0VNT05fUElO",
            "RUNPEMwBEh0KGFYwMjA1X1BPS0VNT05fRk9SUkVUUkVTUxDNARIcChdWMDIw",
            "Nl9QT0tFTU9OX0RVTlNQQVJDRRDOARIZChRWMDIwN19QT0tFTU9OX0dMSUdB",
            "UhDPARIaChVWMDIwOF9QT0tFTU9OX1NURUVMSVgQ0AESGwoWVjAyMDlfUE9L",
            "RU1PTl9TTlVCQlVMTBDRARIbChZWMDIxMF9QT0tFTU9OX0dSQU5CVUxMENIB",
            "EhsKFlYwMjExX1BPS0VNT05fUVdJTEZJU0gQ0wESGQoUVjAyMTJfUE9LRU1P",
            "Tl9TQ0laT1IQ1AESGgoVVjAyMTNfUE9LRU1PTl9TSFVDS0xFENUBEhwKF1Yw",
            "MjE0X1BPS0VNT05fSEVSQUNST1NTENYBEhoKFVYwMjE1X1BPS0VNT05fU05F",
            "QVNFTBDXARIcChdWMDIxNl9QT0tFTU9OX1RFRERJVVJTQRDYARIbChZWMDIx",
            "N19QT0tFTU9OX1VSU0FSSU5HENkBEhkKFFYwMjE4X1BPS0VNT05fU0xVR01B",
            "ENoBEhsKFlYwMjE5X1BPS0VNT05fTUFHQ0FSR08Q2wESGQoUVjAyMjBfUE9L",
            "RU1PTl9TV0lOVUIQ3AESHAoXVjAyMjFfUE9LRU1PTl9QSUxPU1dJTkUQ3QES",
            "GgoVVjAyMjJfUE9LRU1PTl9DT1JTT0xBEN4BEhsKFlYwMjIzX1BPS0VNT05f",
            "UkVNT1JBSUQQ3wESHAoXVjAyMjRfUE9LRU1PTl9PQ1RJTExFUlkQ4AESGwoW",
            "VjAyMjVfUE9LRU1PTl9ERUxJQklSRBDhARIaChVWMDIyNl9QT0tFTU9OX01B",
            "TlRJTkUQ4gESGwoWVjAyMjdfUE9LRU1PTl9TS0FSTU9SWRDjARIbChZWMDIy",
            "OF9QT0tFTU9OX0hPVU5ET1VSEOQBEhsKFlYwMjI5X1BPS0VNT05fSE9VTkRP",
            "T00Q5QESGgoVVjAyMzBfUE9LRU1PTl9LSU5HRFJBEOYBEhkKFFYwMjMxX1BP",
            "S0VNT05fUEhBTlBZEOcBEhoKFVYwMjMyX1BPS0VNT05fRE9OUEhBThDoARIb",
            "ChZWMDIzM19QT0tFTU9OX1BPUllHT04yEOkBEhsKFlYwMjM0X1BPS0VNT05f",
            "U1RBTlRMRVIQ6gESGwoWVjAyMzVfUE9LRU1PTl9TTUVBUkdMRRDrARIaChVW",
            "MDIzNl9QT0tFTU9OX1RZUk9HVUUQ7AESHAoXVjAyMzdfUE9LRU1PTl9ISVRN",
            "T05UT1AQ7QESGwoWVjAyMzhfUE9LRU1PTl9TTU9PQ0hVTRDuARIZChRWMDIz",
            "OV9QT0tFTU9OX0VMRUtJRBDvARIYChNWMDI0MF9QT0tFTU9OX01BR0JZEPAB",
            "EhoKFVYwMjQxX1BPS0VNT05fTUlMVEFOSxDxARIaChVWMDI0Ml9QT0tFTU9O",
            "X0JMSVNTRVkQ8gESGQoUVjAyNDNfUE9LRU1PTl9SQUlLT1UQ8wESGAoTVjAy",
            "NDRfUE9LRU1PTl9FTlRFSRD0ARIaChVWMDI0NV9QT0tFTU9OX1NVSUNVTkUQ",
            "9QESGwoWVjAyNDZfUE9LRU1PTl9MQVJWSVRBUhD2ARIaChVWMDI0N19QT0tF",
            "TU9OX1BVUElUQVIQ9wESHAoXVjAyNDhfUE9LRU1PTl9UWVJBTklUQVIQ+AES",
            "GAoTVjAyNDlfUE9LRU1PTl9MVUdJQRD5ARIYChNWMDI1MF9QT0tFTU9OX0hP",
            "X09IEPoBEhkKFFYwMjUxX1BPS0VNT05fQ0VMRUJJEPsBEhoKFVYwMjUyX1BP",
            "S0VNT05fVFJFRUNLTxD8ARIaChVWMDI1M19QT0tFTU9OX0dST1ZZTEUQ/QES",
            "GwoWVjAyNTRfUE9LRU1PTl9TQ0VQVElMRRD+ARIaChVWMDI1NV9QT0tFTU9O",
            "X1RPUkNISUMQ/wESHAoXVjAyNTZfUE9LRU1PTl9DT01CVVNLRU4QgAISGwoW",
            "VjAyNTdfUE9LRU1PTl9CTEFaSUtFThCBAhIZChRWMDI1OF9QT0tFTU9OX01V",
            "REtJUBCCAhIcChdWMDI1OV9QT0tFTU9OX01BUlNIVE9NUBCDAhIbChZWMDI2",
            "MF9QT0tFTU9OX1NXQU1QRVJUEIQCEhwKF1YwMjYxX1BPS0VNT05fUE9PQ0hZ",
            "RU5BEIUCEhwKF1YwMjYyX1BPS0VNT05fTUlHSFRZRU5BEIYCEhwKF1YwMjYz",
            "X1BPS0VNT05fWklHWkFHT09OEIcCEhoKFVYwMjY0X1BPS0VNT05fTElOT09O",
            "RRCIAhIaChVWMDI2NV9QT0tFTU9OX1dVUk1QTEUQiQISGgoVVjAyNjZfUE9L",
            "RU1PTl9TSUxDT09OEIoCEhwKF1YwMjY3X1BPS0VNT05fQkVBVVRJRkxZEIsC",
            "EhoKFVYwMjY4X1BPS0VNT05fQ0FTQ09PThCMAhIZChRWMDI2OV9QT0tFTU9O",
            "X0RVU1RPWBCNAhIYChNWMDI3MF9QT0tFTU9OX0xPVEFEEI4CEhkKFFYwMjcx",
            "X1BPS0VNT05fTE9NQlJFEI8CEhsKFlYwMjcyX1BPS0VNT05fTFVESUNPTE8Q",
            "kAISGQoUVjAyNzNfUE9LRU1PTl9TRUVET1QQkQISGgoVVjAyNzRfUE9LRU1P",
            "Tl9OVVpMRUFGEJICEhoKFVYwMjc1X1BPS0VNT05fU0hJRlRSWRCTAhIaChVW",
            "MDI3Nl9QT0tFTU9OX1RBSUxMT1cQlAISGgoVVjAyNzdfUE9LRU1PTl9TV0VM",
            "TE9XEJUCEhoKFVYwMjc4X1BPS0VNT05fV0lOR1VMTBCWAhIbChZWMDI3OV9Q",
            "T0tFTU9OX1BFTElQUEVSEJcCEhgKE1YwMjgwX1BPS0VNT05fUkFMVFMQmAIS",
            "GQoUVjAyODFfUE9LRU1PTl9LSVJMSUEQmQISHAoXVjAyODJfUE9LRU1PTl9H",
            "QVJERVZPSVIQmgISGgoVVjAyODNfUE9LRU1PTl9TVVJTS0lUEJsCEh0KGFYw",
            "Mjg0X1BPS0VNT05fTUFTUVVFUkFJThCcAhIcChdWMDI4NV9QT0tFTU9OX1NI",
            "Uk9PTUlTSBCdAhIaChVWMDI4Nl9QT0tFTU9OX0JSRUxPT00QngISGgoVVjAy",
            "ODdfUE9LRU1PTl9TTEFLT1RIEJ8CEhsKFlYwMjg4X1BPS0VNT05fVklHT1JP",
            "VEgQoAISGgoVVjAyODlfUE9LRU1PTl9TTEFLSU5HEKECEhoKFVYwMjkwX1BP",
            "S0VNT05fTklOQ0FEQRCiAhIaChVWMDI5MV9QT0tFTU9OX05JTkpBU0sQowIS",
            "GwoWVjAyOTJfUE9LRU1PTl9TSEVESU5KQRCkAhIaChVWMDI5M19QT0tFTU9O",
            "X1dISVNNVVIQpQISGgoVVjAyOTRfUE9LRU1PTl9MT1VEUkVEEKYCEhoKFVYw",
            "Mjk1X1BPS0VNT05fRVhQTE9VRBCnAhIbChZWMDI5Nl9QT0tFTU9OX01BS1VI",
            "SVRBEKgCEhsKFlYwMjk3X1BPS0VNT05fSEFSSVlBTUEQqQISGgoVVjAyOThf",
            "UE9LRU1PTl9BWlVSSUxMEKoCEhsKFlYwMjk5X1BPS0VNT05fTk9TRVBBU1MQ",
            "qwISGQoUVjAzMDBfUE9LRU1PTl9TS0lUVFkQrAISGwoWVjAzMDFfUE9LRU1P",
            "Tl9ERUxDQVRUWRCtAhIaChVWMDMwMl9QT0tFTU9OX1NBQkxFWUUQrgISGQoU",
            "VjAzMDNfUE9LRU1PTl9NQVdJTEUQrwISFwoSVjAzMDRfUE9LRU1PTl9BUk9O",
            "ELACEhkKFFYwMzA1X1BPS0VNT05fTEFJUk9OELECEhkKFFYwMzA2X1BPS0VN",
            "T05fQUdHUk9OELICEhsKFlYwMzA3X1BPS0VNT05fTUVESVRJVEUQswISGwoW",
            "VjAzMDhfUE9LRU1PTl9NRURJQ0hBTRC0AhIcChdWMDMwOV9QT0tFTU9OX0VM",
            "RUNUUklLRRC1AhIcChdWMDMxMF9QT0tFTU9OX01BTkVDVFJJQxC2AhIZChRW",
            "MDMxMV9QT0tFTU9OX1BMVVNMRRC3AhIYChNWMDMxMl9QT0tFTU9OX01JTlVO",
            "ELgCEhoKFVYwMzEzX1BPS0VNT05fVk9MQkVBVBC5AhIbChZWMDMxNF9QT0tF",
            "TU9OX0lMTFVNSVNFELoCEhoKFVYwMzE1X1BPS0VNT05fUk9TRUxJQRC7AhIZ",
            "ChRWMDMxNl9QT0tFTU9OX0dVTFBJThC8AhIZChRWMDMxN19QT0tFTU9OX1NX",
            "QUxPVBC9AhIbChZWMDMxOF9QT0tFTU9OX0NBUlZBTkhBEL4CEhsKFlYwMzE5",
            "X1BPS0VNT05fU0hBUlBFRE8QvwISGgoVVjAzMjBfUE9LRU1PTl9XQUlMTUVS",
            "EMACEhoKFVYwMzIxX1BPS0VNT05fV0FJTE9SRBDBAhIYChNWMDMyMl9QT0tF",
            "TU9OX05VTUVMEMICEhsKFlYwMzIzX1BPS0VNT05fQ0FNRVJVUFQQwwISGgoV",
            "VjAzMjRfUE9LRU1PTl9UT1JLT0FMEMQCEhkKFFYwMzI1X1BPS0VNT05fU1BP",
            "SU5LEMUCEhoKFVYwMzI2X1BPS0VNT05fR1JVTVBJRxDGAhIZChRWMDMyN19Q",
            "T0tFTU9OX1NQSU5EQRDHAhIbChZWMDMyOF9QT0tFTU9OX1RSQVBJTkNIEMgC",
            "EhoKFVYwMzI5X1BPS0VNT05fVklCUkFWQRDJAhIZChRWMDMzMF9QT0tFTU9O",
            "X0ZMWUdPThDKAhIZChRWMDMzMV9QT0tFTU9OX0NBQ05FQRDLAhIbChZWMDMz",
            "Ml9QT0tFTU9OX0NBQ1RVUk5FEMwCEhkKFFYwMzMzX1BPS0VNT05fU1dBQkxV",
            "EM0CEhoKFVYwMzM0X1BPS0VNT05fQUxUQVJJQRDOAhIbChZWMDMzNV9QT0tF",
            "TU9OX1pBTkdPT1NFEM8CEhoKFVYwMzM2X1BPS0VNT05fU0VWSVBFUhDQAhIb",
            "ChZWMDMzN19QT0tFTU9OX0xVTkFUT05FENECEhoKFVYwMzM4X1BPS0VNT05f",
            "U09MUk9DSxDSAhIbChZWMDMzOV9QT0tFTU9OX0JBUkJPQUNIENMCEhsKFlYw",
            "MzQwX1BPS0VNT05fV0hJU0NBU0gQ1AISGwoWVjAzNDFfUE9LRU1PTl9DT1JQ",
            "SElTSBDVAhIcChdWMDM0Ml9QT0tFTU9OX0NSQVdEQVVOVBDWAhIZChRWMDM0",
            "M19QT0tFTU9OX0JBTFRPWRDXAhIaChVWMDM0NF9QT0tFTU9OX0NMQVlET0wQ",
            "2AISGQoUVjAzNDVfUE9LRU1PTl9MSUxFRVAQ2QISGgoVVjAzNDZfUE9LRU1P",
            "Tl9DUkFESUxZENoCEhoKFVYwMzQ3X1BPS0VNT05fQU5PUklUSBDbAhIaChVW",
            "MDM0OF9QT0tFTU9OX0FSTUFMRE8Q3AISGQoUVjAzNDlfUE9LRU1PTl9GRUVC",
            "QVMQ3QISGgoVVjAzNTBfUE9LRU1PTl9NSUxPVElDEN4CEhsKFlYwMzUxX1BP",
            "S0VNT05fQ0FTVEZPUk0Q3wISGgoVVjAzNTJfUE9LRU1PTl9LRUNMRU9OEOAC",
            "EhoKFVYwMzUzX1BPS0VNT05fU0hVUFBFVBDhAhIaChVWMDM1NF9QT0tFTU9O",
            "X0JBTkVUVEUQ4gISGgoVVjAzNTVfUE9LRU1PTl9EVVNLVUxMEOMCEhsKFlYw",
            "MzU2X1BPS0VNT05fRFVTQ0xPUFMQ5AISGgoVVjAzNTdfUE9LRU1PTl9UUk9Q",
            "SVVTEOUCEhsKFlYwMzU4X1BPS0VNT05fQ0hJTUVDSE8Q5gISGAoTVjAzNTlf",
            "UE9LRU1PTl9BQlNPTBDnAhIZChRWMDM2MF9QT0tFTU9OX1dZTkFVVBDoAhIa",
            "ChVWMDM2MV9QT0tFTU9OX1NOT1JVTlQQ6QISGQoUVjAzNjJfUE9LRU1PTl9H",
            "TEFMSUUQ6gISGQoUVjAzNjNfUE9LRU1PTl9TUEhFQUwQ6wISGQoUVjAzNjRf",
            "UE9LRU1PTl9TRUFMRU8Q7AISGgoVVjAzNjVfUE9LRU1PTl9XQUxSRUlOEO0C",
            "EhsKFlYwMzY2X1BPS0VNT05fQ0xBTVBFUkwQ7gISGgoVVjAzNjdfUE9LRU1P",
            "Tl9IVU5UQUlMEO8CEhsKFlYwMzY4X1BPS0VNT05fR09SRUJZU1MQ8AISHAoX",
            "VjAzNjlfUE9LRU1PTl9SRUxJQ0FOVEgQ8QISGgoVVjAzNzBfUE9LRU1PTl9M",
            "VVZESVNDEPICEhgKE1YwMzcxX1BPS0VNT05fQkFHT04Q8wISGgoVVjAzNzJf",
            "UE9LRU1PTl9TSEVMR09OEPQCEhwKF1YwMzczX1BPS0VNT05fU0FMQU1FTkNF",
            "EPUCEhkKFFYwMzc0X1BPS0VNT05fQkVMRFVNEPYCEhkKFFYwMzc1X1BPS0VN",
            "T05fTUVUQU5HEPcCEhwKF1YwMzc2X1BPS0VNT05fTUVUQUdST1NTEPgCEhsK",
            "FlYwMzc3X1BPS0VNT05fUkVHSVJPQ0sQ+QISGQoUVjAzNzhfUE9LRU1PTl9S",
            "RUdJQ0UQ+gISHAoXVjAzNzlfUE9LRU1PTl9SRUdJU1RFRUwQ+wISGQoUVjAz",
            "ODBfUE9LRU1PTl9MQVRJQVMQ/AISGQoUVjAzODFfUE9LRU1PTl9MQVRJT1MQ",
            "/QISGQoUVjAzODJfUE9LRU1PTl9LWU9HUkUQ/gISGgoVVjAzODNfUE9LRU1P",
            "Tl9HUk9VRE9OEP8CEhsKFlYwMzg0X1BPS0VNT05fUkFZUVVBWkEQgAMSGgoV",
            "VjAzODVfUE9LRU1PTl9KSVJBQ0hJEIEDEhkKFFYwMzg2X1BPS0VNT05fREVP",
            "WFlTEIIDKmIKFFBva2Vtb25DcmVhdGVDb250ZXh0EhcKE0NSRUFURV9DT05U",
            "RVhUX1dJTEQQABIWChJDUkVBVEVfQ09OVEVYVF9FR0cQARIZChVDUkVBVEVf",
            "Q09OVEVYVF9FVk9MVkUQAir1CAoESXRlbRIQCgxJVEVNX1VOS05PV04QABIS",
            "Cg5JVEVNX1BPS0VfQkFMTBABEhMKD0lURU1fR1JFQVRfQkFMTBACEhMKD0lU",
            "RU1fVUxUUkFfQkFMTBADEhQKEElURU1fTUFTVEVSX0JBTEwQBBIVChFJVEVN",
            "X1BSRU1JRVJfQkFMTBAFEg8KC0lURU1fUE9USU9OEGUSFQoRSVRFTV9TVVBF",
            "Ul9QT1RJT04QZhIVChFJVEVNX0hZUEVSX1BPVElPThBnEhMKD0lURU1fTUFY",
            "X1BPVElPThBoEhAKC0lURU1fUkVWSVZFEMkBEhQKD0lURU1fTUFYX1JFVklW",
            "RRDKARITCg5JVEVNX0xVQ0tZX0VHRxCtAhIaChVJVEVNX0lOQ0VOU0VfT1JE",
            "SU5BUlkQkQMSFwoSSVRFTV9JTkNFTlNFX1NQSUNZEJIDEhYKEUlURU1fSU5D",
            "RU5TRV9DT09MEJMDEhgKE0lURU1fSU5DRU5TRV9GTE9SQUwQlAMSEwoOSVRF",
            "TV9UUk9ZX0RJU0sQ9QMSEgoNSVRFTV9YX0FUVEFDSxDaBBITCg5JVEVNX1hf",
            "REVGRU5TRRDbBBITCg5JVEVNX1hfTUlSQUNMRRDcBBIUCg9JVEVNX1JBWlpf",
            "QkVSUlkQvQUSFAoPSVRFTV9CTFVLX0JFUlJZEL4FEhUKEElURU1fTkFOQUJf",
            "QkVSUlkQvwUSFQoQSVRFTV9XRVBBUl9CRVJSWRDABRIVChBJVEVNX1BJTkFQ",
            "X0JFUlJZEMEFEhsKFklURU1fR09MREVOX1JBWlpfQkVSUlkQwgUSHAoXSVRF",
            "TV9HT0xERU5fTkFOQUJfQkVSUlkQwwUSHAoXSVRFTV9HT0xERU5fUElOQVBf",
            "QkVSUlkQxAUSGAoTSVRFTV9TUEVDSUFMX0NBTUVSQRChBhIjCh5JVEVNX0lO",
            "Q1VCQVRPUl9CQVNJQ19VTkxJTUlURUQQhQcSGQoUSVRFTV9JTkNVQkFUT1Jf",
            "QkFTSUMQhgcSGQoUSVRFTV9JTkNVQkFUT1JfU1VQRVIQhwcSIQocSVRFTV9Q",
            "T0tFTU9OX1NUT1JBR0VfVVBHUkFERRDpBxIeChlJVEVNX0lURU1fU1RPUkFH",
            "RV9VUEdSQURFEOoHEhMKDklURU1fU1VOX1NUT05FEM0IEhQKD0lURU1fS0lO",
            "R1NfUk9DSxDOCBIUCg9JVEVNX01FVEFMX0NPQVQQzwgSFgoRSVRFTV9EUkFH",
            "T05fU0NBTEUQ0AgSEgoNSVRFTV9VUF9HUkFERRDRCBIhChxJVEVNX01PVkVf",
            "UkVST0xMX0ZBU1RfQVRUQUNLELEJEiQKH0lURU1fTU9WRV9SRVJPTExfU1BF",
            "Q0lBTF9BVFRBQ0sQsgkSFAoPSVRFTV9SQVJFX0NBTkRZEJUKEhoKFUlURU1f",
            "RlJFRV9SQUlEX1RJQ0tFVBD5ChIaChVJVEVNX1BBSURfUkFJRF9USUNLRVQQ",
            "+goSHwoaSVRFTV9MRUdFTkRBUllfUkFJRF9USUNLRVQQ+woqewoJUmFpZExl",
            "dmVsEhQKEFJBSURfTEVWRUxfVU5TRVQQABIQCgxSQUlEX0xFVkVMXzEQARIQ",
            "CgxSQUlEX0xFVkVMXzIQAhIQCgxSQUlEX0xFVkVMXzMQAxIQCgxSQUlEX0xF",
            "VkVMXzQQBBIQCgxSQUlEX0xFVkVMXzUQBSp6CgxHeW1CYWRnZVR5cGUSEwoP",
            "R1lNX0JBREdFX1VOU0VUEAASFQoRR1lNX0JBREdFX1ZBTklMTEEQARIUChBH",
            "WU1fQkFER0VfQlJPTlpFEAISFAoQR1lNX0JBREdFX1NJTFZFUhADEhIKDkdZ",
            "TV9CQURHRV9HT0xEEARiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::POGOProtos.Networking.Responses.HoloPokemonId), typeof(global::POGOProtos.Networking.Responses.PokemonCreateContext), typeof(global::POGOProtos.Networking.Responses.Item), typeof(global::POGOProtos.Networking.Responses.RaidLevel), typeof(global::POGOProtos.Networking.Responses.GymBadgeType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.PokemonDisplayProto), global::POGOProtos.Networking.Responses.PokemonDisplayProto.Parser, new[]{ "Costume", "Gender", "Shiny", "Form" }, null, new[]{ typeof(global::POGOProtos.Networking.Responses.PokemonDisplayProto.Types.Form), typeof(global::POGOProtos.Networking.Responses.PokemonDisplayProto.Types.Costume), typeof(global::POGOProtos.Networking.Responses.PokemonDisplayProto.Types.Gender) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.PokemonProto), global::POGOProtos.Networking.Responses.PokemonProto.Parser, new[]{ "Id", "PokemonId", "Cp", "Stamina", "MaxStamina", "Move1", "Move2", "DeployedFortId", "OwnerName", "IsEgg", "EggKmWalkedTarget", "EggKmWalkedStart", "Origin", "HeightM", "WeightKg", "IndividualAttack", "IndividualDefense", "IndividualStamina", "CpMultiplier", "Pokeball", "CapturedS2CellId", "BattlesAttacked", "BattlesDefended", "EggIncubatorId", "CreationTimeMs", "NumUpgrades", "AdditionalCpMultiplier", "Favorite", "Nickname", "FromFort", "BuddyCandyAwarded", "BuddyKmWalked", "DisplayPokemonId", "DisplayCp", "PokemonDisplay", "IsBad", "HatchedFromEgg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.PokemonInfo), global::POGOProtos.Networking.Responses.PokemonInfo.Parser, new[]{ "Pokemon", "CurrentHealth", "CurrentEnergy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.PlayerAvatarProto), global::POGOProtos.Networking.Responses.PlayerAvatarProto.Parser, new[]{ "Avatar", "Skin", "Hair", "Shirt", "Pants", "Hat", "Shoes", "Eyes", "Backpack", "AvatarHair", "AvatarShirt", "AvatarPants", "AvatarHat", "AvatarShoes", "AvatarEyes", "AvatarBackpack", "AvatarGloves", "AvatarSocks", "AvatarBelt", "AvatarGlasses", "AvatarNecklace" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.PlayerPublicProfileProto), global::POGOProtos.Networking.Responses.PlayerPublicProfileProto.Parser, new[]{ "Name", "Level", "Avatar", "Team", "BattlesWon", "KmWalked", "CaughtPokemon", "GymBadgeType" }, null, new[]{ typeof(global::POGOProtos.Networking.Responses.PlayerPublicProfileProto.Types.Team), typeof(global::POGOProtos.Networking.Responses.PlayerPublicProfileProto.Types.GymBadgeType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.LobbyPokemonProto), global::POGOProtos.Networking.Responses.LobbyPokemonProto.Parser, new[]{ "Id", "PokedexId", "Cp", "PercentHealth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.BattleParticipantProto), global::POGOProtos.Networking.Responses.BattleParticipantProto.Parser, new[]{ "ActivePokemon", "TrainerPublicProfile", "ReservePokemon", "DefeatedPokemon", "LobbyPokemon", "DamageDealt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.MapPokemonProto), global::POGOProtos.Networking.Responses.MapPokemonProto.Parser, new[]{ "SpawnpointId", "EncounterId", "PokedexTypeId", "ExpirationTimeMs", "Latitude", "Longitude", "PokemonDisplay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.RaidInfoProto), global::POGOProtos.Networking.Responses.RaidInfoProto.Parser, new[]{ "RaidSeed", "RaidSpawnMs", "RaidBattleMs", "RaidEndMs", "RaidPokemon", "RaidLevel", "Complete", "IsExclusive", "IsRaidHidden" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.GymEventProto), global::POGOProtos.Networking.Responses.GymEventProto.Parser, new[]{ "Trainer", "TimestampMs", "Event", "PokedexId", "PokemonId" }, null, new[]{ typeof(global::POGOProtos.Networking.Responses.GymEventProto.Types.Event) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.GymDisplayProto), global::POGOProtos.Networking.Responses.GymDisplayProto.Parser, new[]{ "GymEvent", "TotalGymCp", "LowestPokemonMotivation", "SlotsAvailable", "OccupiedMillis" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.PokemonFortProto), global::POGOProtos.Networking.Responses.PokemonFortProto.Parser, new[]{ "FortId", "LastModifiedMs", "Latitude", "Longitude", "Team", "GuardPokemonId", "GuardPokemonLevel", "Enabled", "FortType", "GymPoints", "IsInBattle", "ActiveFortModifier", "ActivePokemon", "CooldownCompleteMs", "Sponsor", "RenderingType", "DeployLockoutEndMs", "GuardPokemonDisplay", "Closed", "RaidInfo", "GymDisplay", "Visited", "SameTeamDeployLockoutEndMs", "AllowCheckin", "ImageUrl", "InEvent", "BannerUrl" }, null, new[]{ typeof(global::POGOProtos.Networking.Responses.PokemonFortProto.Types.Sponsor), typeof(global::POGOProtos.Networking.Responses.PokemonFortProto.Types.RenderingType), typeof(global::POGOProtos.Networking.Responses.PokemonFortProto.Types.FortType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.GymMembershipProto), global::POGOProtos.Networking.Responses.GymMembershipProto.Parser, new[]{ "Pokemon", "TrainerPublicProfile", "TrainingPokemon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.GymStateProto), global::POGOProtos.Networking.Responses.GymStateProto.Parser, new[]{ "FortMapData", "GymMembership", "DeployLockout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.GymStatusAndDefendersProto), global::POGOProtos.Networking.Responses.GymStatusAndDefendersProto.Parser, new[]{ "PokemonFortProto", "GymDefender" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.DeploymentTotalsProto), global::POGOProtos.Networking.Responses.DeploymentTotalsProto.Parser, new[]{ "TimesFed", "BattlesWon", "BattlesLost", "DeploymentDurationMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.GymDefenderProto), global::POGOProtos.Networking.Responses.GymDefenderProto.Parser, new[]{ "MotivatedPokemon", "DeploymentTotals", "TrainerPublicProfile" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.MotivatedPokemonProto), global::POGOProtos.Networking.Responses.MotivatedPokemonProto.Parser, new[]{ "Pokemon", "DeployMs", "CpWhenDeployed", "MotivationNow", "CpNow", "BerryValue", "FeedCooldownDurationMillis", "FoodValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.FoodValue), global::POGOProtos.Networking.Responses.FoodValue.Parser, new[]{ "MotivationIncrease", "CpIncrease", "FoodItem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.ParticipationProto), global::POGOProtos.Networking.Responses.ParticipationProto.Parser, new[]{ "IndividualDamagePokeballs", "TeamDamagePokeballs", "GymOwnershipPokeballs", "BasePokeballs", "BluePercentage", "RedPercentage", "YellowPercentage", "BonusItemMultiplier" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.LootProto), global::POGOProtos.Networking.Responses.LootProto.Parser, new[]{ "LootItem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.LootItemProto), global::POGOProtos.Networking.Responses.LootItemProto.Parser, new[]{ "Item", "Stardust", "Pokecoin", "PokemonCandy", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.RaidEncounterProto), global::POGOProtos.Networking.Responses.RaidEncounterProto.Parser, new[]{ "Pokemon", "EncounterId", "SpawnpointId", "CaptureProbabilities", "ThrowsRemaining", "RaidLevel", "FortId", "IsExclusive", "IsEventLegendary" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.CaptureProbabilityProto), global::POGOProtos.Networking.Responses.CaptureProbabilityProto.Parser, new[]{ "PokeballType", "CaptureProbability", "ReticleDifficultyScale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.GymBadgeStats), global::POGOProtos.Networking.Responses.GymBadgeStats.Parser, new[]{ "TotalTimeDefendedMs", "NumBattlesWon", "NumBattlesLost", "NumBerriesFed", "NumDeploys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.PlayerRaidInfoProto), global::POGOProtos.Networking.Responses.PlayerRaidInfoProto.Parser, new[]{ "TotalCompletedRaids", "TotalCompletedLegendaryRaids", "Raids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.RaidProto), global::POGOProtos.Networking.Responses.RaidProto.Parser, new[]{ "RaidSeed", "StartedMs", "CompletedMs", "EncounterPokemonId", "CompletedBattle", "ReceivedRewards", "FinishedEncounter", "ReceivedDefaultRewards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.AwardedGymBadge), global::POGOProtos.Networking.Responses.AwardedGymBadge.Parser, new[]{ "FortId", "GymBadgeType", "Score", "GymBadgeStats", "LastUpdateTimestampMs", "LastCheckTimestampMs", "EarnedPoints", "Progress", "LevelUp", "Name", "ImageUrl", "Description", "Latitude", "Longitude", "Raids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.BattleResultsProto), global::POGOProtos.Networking.Responses.BattleResultsProto.Parser, new[]{ "GymState", "Attackers", "PlayerXpAwarded", "NextDefenderPokemonId", "GymPointsDelta", "GymStatus", "Participation", "RaidItemRewards", "PostRaidEncounter", "GymBadge", "DefaultRaidItemRewards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.BattleActionProto), global::POGOProtos.Networking.Responses.BattleActionProto.Parser, new[]{ "Type", "ActionStartMs", "DurationMs", "EnergyDelta", "AttackerIndex", "TargetIndex", "ActivePokemonId", "JoinedPlayer", "BattleResults", "DamageWindowStartMs", "DamageWindowEndMs", "QuitPlayer", "TargetPokemonId" }, null, new[]{ typeof(global::POGOProtos.Networking.Responses.BattleActionProto.Types.ActionType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.BattleLogProto), global::POGOProtos.Networking.Responses.BattleLogProto.Parser, new[]{ "State", "BattleType", "ServerMs", "BattleActions", "BattleStartMs", "BattleEndMs" }, null, new[]{ typeof(global::POGOProtos.Networking.Responses.BattleLogProto.Types.State), typeof(global::POGOProtos.Networking.Responses.BattleLogProto.Types.BattleType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.BattleProto), global::POGOProtos.Networking.Responses.BattleProto.Parser, new[]{ "BattleStartMs", "BattleEndMs", "BattleId", "Defender", "BattleLog", "Attacker" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.GymStartSessionResponse), global::POGOProtos.Networking.Responses.GymStartSessionResponse.Parser, new[]{ "Result", "Battle" }, null, new[]{ typeof(global::POGOProtos.Networking.Responses.GymStartSessionResponse.Types.Result) }, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum HoloPokemonId {
    [pbr::OriginalName("POKEMON_UNSET")] PokemonUnset = 0,
    [pbr::OriginalName("V0001_POKEMON_BULBASAUR")] V0001PokemonBulbasaur = 1,
    [pbr::OriginalName("V0002_POKEMON_IVYSAUR")] V0002PokemonIvysaur = 2,
    [pbr::OriginalName("V0003_POKEMON_VENUSAUR")] V0003PokemonVenusaur = 3,
    [pbr::OriginalName("V0004_POKEMON_CHARMANDER")] V0004PokemonCharmander = 4,
    [pbr::OriginalName("V0005_POKEMON_CHARMELEON")] V0005PokemonCharmeleon = 5,
    [pbr::OriginalName("V0006_POKEMON_CHARIZARD")] V0006PokemonCharizard = 6,
    [pbr::OriginalName("V0007_POKEMON_SQUIRTLE")] V0007PokemonSquirtle = 7,
    [pbr::OriginalName("V0008_POKEMON_WARTORTLE")] V0008PokemonWartortle = 8,
    [pbr::OriginalName("V0009_POKEMON_BLASTOISE")] V0009PokemonBlastoise = 9,
    [pbr::OriginalName("V0010_POKEMON_CATERPIE")] V0010PokemonCaterpie = 10,
    [pbr::OriginalName("V0011_POKEMON_METAPOD")] V0011PokemonMetapod = 11,
    [pbr::OriginalName("V0012_POKEMON_BUTTERFREE")] V0012PokemonButterfree = 12,
    [pbr::OriginalName("V0013_POKEMON_WEEDLE")] V0013PokemonWeedle = 13,
    [pbr::OriginalName("V0014_POKEMON_KAKUNA")] V0014PokemonKakuna = 14,
    [pbr::OriginalName("V0015_POKEMON_BEEDRILL")] V0015PokemonBeedrill = 15,
    [pbr::OriginalName("V0016_POKEMON_PIDGEY")] V0016PokemonPidgey = 16,
    [pbr::OriginalName("V0017_POKEMON_PIDGEOTTO")] V0017PokemonPidgeotto = 17,
    [pbr::OriginalName("V0018_POKEMON_PIDGEOT")] V0018PokemonPidgeot = 18,
    [pbr::OriginalName("V0019_POKEMON_RATTATA")] V0019PokemonRattata = 19,
    [pbr::OriginalName("V0020_POKEMON_RATICATE")] V0020PokemonRaticate = 20,
    [pbr::OriginalName("V0021_POKEMON_SPEAROW")] V0021PokemonSpearow = 21,
    [pbr::OriginalName("V0022_POKEMON_FEAROW")] V0022PokemonFearow = 22,
    [pbr::OriginalName("V0023_POKEMON_EKANS")] V0023PokemonEkans = 23,
    [pbr::OriginalName("V0024_POKEMON_ARBOK")] V0024PokemonArbok = 24,
    [pbr::OriginalName("V0025_POKEMON_PIKACHU")] V0025PokemonPikachu = 25,
    [pbr::OriginalName("V0026_POKEMON_RAICHU")] V0026PokemonRaichu = 26,
    [pbr::OriginalName("V0027_POKEMON_SANDSHREW")] V0027PokemonSandshrew = 27,
    [pbr::OriginalName("V0028_POKEMON_SANDSLASH")] V0028PokemonSandslash = 28,
    [pbr::OriginalName("V0029_POKEMON_NIDORAN")] V0029PokemonNidoran = 29,
    [pbr::OriginalName("V0030_POKEMON_NIDORINA")] V0030PokemonNidorina = 30,
    [pbr::OriginalName("V0031_POKEMON_NIDOQUEEN")] V0031PokemonNidoqueen = 31,
    [pbr::OriginalName("V0032_POKEMON_NIDORAN")] V0032PokemonNidoran = 32,
    [pbr::OriginalName("V0033_POKEMON_NIDORINO")] V0033PokemonNidorino = 33,
    [pbr::OriginalName("V0034_POKEMON_NIDOKING")] V0034PokemonNidoking = 34,
    [pbr::OriginalName("V0035_POKEMON_CLEFAIRY")] V0035PokemonClefairy = 35,
    [pbr::OriginalName("V0036_POKEMON_CLEFABLE")] V0036PokemonClefable = 36,
    [pbr::OriginalName("V0037_POKEMON_VULPIX")] V0037PokemonVulpix = 37,
    [pbr::OriginalName("V0038_POKEMON_NINETALES")] V0038PokemonNinetales = 38,
    [pbr::OriginalName("V0039_POKEMON_JIGGLYPUFF")] V0039PokemonJigglypuff = 39,
    [pbr::OriginalName("V0040_POKEMON_WIGGLYTUFF")] V0040PokemonWigglytuff = 40,
    [pbr::OriginalName("V0041_POKEMON_ZUBAT")] V0041PokemonZubat = 41,
    [pbr::OriginalName("V0042_POKEMON_GOLBAT")] V0042PokemonGolbat = 42,
    [pbr::OriginalName("V0043_POKEMON_ODDISH")] V0043PokemonOddish = 43,
    [pbr::OriginalName("V0044_POKEMON_GLOOM")] V0044PokemonGloom = 44,
    [pbr::OriginalName("V0045_POKEMON_VILEPLUME")] V0045PokemonVileplume = 45,
    [pbr::OriginalName("V0046_POKEMON_PARAS")] V0046PokemonParas = 46,
    [pbr::OriginalName("V0047_POKEMON_PARASECT")] V0047PokemonParasect = 47,
    [pbr::OriginalName("V0048_POKEMON_VENONAT")] V0048PokemonVenonat = 48,
    [pbr::OriginalName("V0049_POKEMON_VENOMOTH")] V0049PokemonVenomoth = 49,
    [pbr::OriginalName("V0050_POKEMON_DIGLETT")] V0050PokemonDiglett = 50,
    [pbr::OriginalName("V0051_POKEMON_DUGTRIO")] V0051PokemonDugtrio = 51,
    [pbr::OriginalName("V0052_POKEMON_MEOWTH")] V0052PokemonMeowth = 52,
    [pbr::OriginalName("V0053_POKEMON_PERSIAN")] V0053PokemonPersian = 53,
    [pbr::OriginalName("V0054_POKEMON_PSYDUCK")] V0054PokemonPsyduck = 54,
    [pbr::OriginalName("V0055_POKEMON_GOLDUCK")] V0055PokemonGolduck = 55,
    [pbr::OriginalName("V0056_POKEMON_MANKEY")] V0056PokemonMankey = 56,
    [pbr::OriginalName("V0057_POKEMON_PRIMEAPE")] V0057PokemonPrimeape = 57,
    [pbr::OriginalName("V0058_POKEMON_GROWLITHE")] V0058PokemonGrowlithe = 58,
    [pbr::OriginalName("V0059_POKEMON_ARCANINE")] V0059PokemonArcanine = 59,
    [pbr::OriginalName("V0060_POKEMON_POLIWAG")] V0060PokemonPoliwag = 60,
    [pbr::OriginalName("V0061_POKEMON_POLIWHIRL")] V0061PokemonPoliwhirl = 61,
    [pbr::OriginalName("V0062_POKEMON_POLIWRATH")] V0062PokemonPoliwrath = 62,
    [pbr::OriginalName("V0063_POKEMON_ABRA")] V0063PokemonAbra = 63,
    [pbr::OriginalName("V0064_POKEMON_KADABRA")] V0064PokemonKadabra = 64,
    [pbr::OriginalName("V0065_POKEMON_ALAKAZAM")] V0065PokemonAlakazam = 65,
    [pbr::OriginalName("V0066_POKEMON_MACHOP")] V0066PokemonMachop = 66,
    [pbr::OriginalName("V0067_POKEMON_MACHOKE")] V0067PokemonMachoke = 67,
    [pbr::OriginalName("V0068_POKEMON_MACHAMP")] V0068PokemonMachamp = 68,
    [pbr::OriginalName("V0069_POKEMON_BELLSPROUT")] V0069PokemonBellsprout = 69,
    [pbr::OriginalName("V0070_POKEMON_WEEPINBELL")] V0070PokemonWeepinbell = 70,
    [pbr::OriginalName("V0071_POKEMON_VICTREEBEL")] V0071PokemonVictreebel = 71,
    [pbr::OriginalName("V0072_POKEMON_TENTACOOL")] V0072PokemonTentacool = 72,
    [pbr::OriginalName("V0073_POKEMON_TENTACRUEL")] V0073PokemonTentacruel = 73,
    [pbr::OriginalName("V0074_POKEMON_GEODUDE")] V0074PokemonGeodude = 74,
    [pbr::OriginalName("V0075_POKEMON_GRAVELER")] V0075PokemonGraveler = 75,
    [pbr::OriginalName("V0076_POKEMON_GOLEM")] V0076PokemonGolem = 76,
    [pbr::OriginalName("V0077_POKEMON_PONYTA")] V0077PokemonPonyta = 77,
    [pbr::OriginalName("V0078_POKEMON_RAPIDASH")] V0078PokemonRapidash = 78,
    [pbr::OriginalName("V0079_POKEMON_SLOWPOKE")] V0079PokemonSlowpoke = 79,
    [pbr::OriginalName("V0080_POKEMON_SLOWBRO")] V0080PokemonSlowbro = 80,
    [pbr::OriginalName("V0081_POKEMON_MAGNEMITE")] V0081PokemonMagnemite = 81,
    [pbr::OriginalName("V0082_POKEMON_MAGNETON")] V0082PokemonMagneton = 82,
    [pbr::OriginalName("V0083_POKEMON_FARFETCHD")] V0083PokemonFarfetchd = 83,
    [pbr::OriginalName("V0084_POKEMON_DODUO")] V0084PokemonDoduo = 84,
    [pbr::OriginalName("V0085_POKEMON_DODRIO")] V0085PokemonDodrio = 85,
    [pbr::OriginalName("V0086_POKEMON_SEEL")] V0086PokemonSeel = 86,
    [pbr::OriginalName("V0087_POKEMON_DEWGONG")] V0087PokemonDewgong = 87,
    [pbr::OriginalName("V0088_POKEMON_GRIMER")] V0088PokemonGrimer = 88,
    [pbr::OriginalName("V0089_POKEMON_MUK")] V0089PokemonMuk = 89,
    [pbr::OriginalName("V0090_POKEMON_SHELLDER")] V0090PokemonShellder = 90,
    [pbr::OriginalName("V0091_POKEMON_CLOYSTER")] V0091PokemonCloyster = 91,
    [pbr::OriginalName("V0092_POKEMON_GASTLY")] V0092PokemonGastly = 92,
    [pbr::OriginalName("V0093_POKEMON_HAUNTER")] V0093PokemonHaunter = 93,
    [pbr::OriginalName("V0094_POKEMON_GENGAR")] V0094PokemonGengar = 94,
    [pbr::OriginalName("V0095_POKEMON_ONIX")] V0095PokemonOnix = 95,
    [pbr::OriginalName("V0096_POKEMON_DROWZEE")] V0096PokemonDrowzee = 96,
    [pbr::OriginalName("V0097_POKEMON_HYPNO")] V0097PokemonHypno = 97,
    [pbr::OriginalName("V0098_POKEMON_KRABBY")] V0098PokemonKrabby = 98,
    [pbr::OriginalName("V0099_POKEMON_KINGLER")] V0099PokemonKingler = 99,
    [pbr::OriginalName("V0100_POKEMON_VOLTORB")] V0100PokemonVoltorb = 100,
    [pbr::OriginalName("V0101_POKEMON_ELECTRODE")] V0101PokemonElectrode = 101,
    [pbr::OriginalName("V0102_POKEMON_EXEGGCUTE")] V0102PokemonExeggcute = 102,
    [pbr::OriginalName("V0103_POKEMON_EXEGGUTOR")] V0103PokemonExeggutor = 103,
    [pbr::OriginalName("V0104_POKEMON_CUBONE")] V0104PokemonCubone = 104,
    [pbr::OriginalName("V0105_POKEMON_MAROWAK")] V0105PokemonMarowak = 105,
    [pbr::OriginalName("V0106_POKEMON_HITMONLEE")] V0106PokemonHitmonlee = 106,
    [pbr::OriginalName("V0107_POKEMON_HITMONCHAN")] V0107PokemonHitmonchan = 107,
    [pbr::OriginalName("V0108_POKEMON_LICKITUNG")] V0108PokemonLickitung = 108,
    [pbr::OriginalName("V0109_POKEMON_KOFFING")] V0109PokemonKoffing = 109,
    [pbr::OriginalName("V0110_POKEMON_WEEZING")] V0110PokemonWeezing = 110,
    [pbr::OriginalName("V0111_POKEMON_RHYHORN")] V0111PokemonRhyhorn = 111,
    [pbr::OriginalName("V0112_POKEMON_RHYDON")] V0112PokemonRhydon = 112,
    [pbr::OriginalName("V0113_POKEMON_CHANSEY")] V0113PokemonChansey = 113,
    [pbr::OriginalName("V0114_POKEMON_TANGELA")] V0114PokemonTangela = 114,
    [pbr::OriginalName("V0115_POKEMON_KANGASKHAN")] V0115PokemonKangaskhan = 115,
    [pbr::OriginalName("V0116_POKEMON_HORSEA")] V0116PokemonHorsea = 116,
    [pbr::OriginalName("V0117_POKEMON_SEADRA")] V0117PokemonSeadra = 117,
    [pbr::OriginalName("V0118_POKEMON_GOLDEEN")] V0118PokemonGoldeen = 118,
    [pbr::OriginalName("V0119_POKEMON_SEAKING")] V0119PokemonSeaking = 119,
    [pbr::OriginalName("V0120_POKEMON_STARYU")] V0120PokemonStaryu = 120,
    [pbr::OriginalName("V0121_POKEMON_STARMIE")] V0121PokemonStarmie = 121,
    [pbr::OriginalName("V0122_POKEMON_MR_MIME")] V0122PokemonMrMime = 122,
    [pbr::OriginalName("V0123_POKEMON_SCYTHER")] V0123PokemonScyther = 123,
    [pbr::OriginalName("V0124_POKEMON_JYNX")] V0124PokemonJynx = 124,
    [pbr::OriginalName("V0125_POKEMON_ELECTABUZZ")] V0125PokemonElectabuzz = 125,
    [pbr::OriginalName("V0126_POKEMON_MAGMAR")] V0126PokemonMagmar = 126,
    [pbr::OriginalName("V0127_POKEMON_PINSIR")] V0127PokemonPinsir = 127,
    [pbr::OriginalName("V0128_POKEMON_TAUROS")] V0128PokemonTauros = 128,
    [pbr::OriginalName("V0129_POKEMON_MAGIKARP")] V0129PokemonMagikarp = 129,
    [pbr::OriginalName("V0130_POKEMON_GYARADOS")] V0130PokemonGyarados = 130,
    [pbr::OriginalName("V0131_POKEMON_LAPRAS")] V0131PokemonLapras = 131,
    [pbr::OriginalName("V0132_POKEMON_DITTO")] V0132PokemonDitto = 132,
    [pbr::OriginalName("V0133_POKEMON_EEVEE")] V0133PokemonEevee = 133,
    [pbr::OriginalName("V0134_POKEMON_VAPOREON")] V0134PokemonVaporeon = 134,
    [pbr::OriginalName("V0135_POKEMON_JOLTEON")] V0135PokemonJolteon = 135,
    [pbr::OriginalName("V0136_POKEMON_FLAREON")] V0136PokemonFlareon = 136,
    [pbr::OriginalName("V0137_POKEMON_PORYGON")] V0137PokemonPorygon = 137,
    [pbr::OriginalName("V0138_POKEMON_OMANYTE")] V0138PokemonOmanyte = 138,
    [pbr::OriginalName("V0139_POKEMON_OMASTAR")] V0139PokemonOmastar = 139,
    [pbr::OriginalName("V0140_POKEMON_KABUTO")] V0140PokemonKabuto = 140,
    [pbr::OriginalName("V0141_POKEMON_KABUTOPS")] V0141PokemonKabutops = 141,
    [pbr::OriginalName("V0142_POKEMON_AERODACTYL")] V0142PokemonAerodactyl = 142,
    [pbr::OriginalName("V0143_POKEMON_SNORLAX")] V0143PokemonSnorlax = 143,
    [pbr::OriginalName("V0144_POKEMON_ARTICUNO")] V0144PokemonArticuno = 144,
    [pbr::OriginalName("V0145_POKEMON_ZAPDOS")] V0145PokemonZapdos = 145,
    [pbr::OriginalName("V0146_POKEMON_MOLTRES")] V0146PokemonMoltres = 146,
    [pbr::OriginalName("V0147_POKEMON_DRATINI")] V0147PokemonDratini = 147,
    [pbr::OriginalName("V0148_POKEMON_DRAGONAIR")] V0148PokemonDragonair = 148,
    [pbr::OriginalName("V0149_POKEMON_DRAGONITE")] V0149PokemonDragonite = 149,
    [pbr::OriginalName("V0150_POKEMON_MEWTWO")] V0150PokemonMewtwo = 150,
    [pbr::OriginalName("V0151_POKEMON_MEW")] V0151PokemonMew = 151,
    [pbr::OriginalName("V0152_POKEMON_CHIKORITA")] V0152PokemonChikorita = 152,
    [pbr::OriginalName("V0153_POKEMON_BAYLEEF")] V0153PokemonBayleef = 153,
    [pbr::OriginalName("V0154_POKEMON_MEGANIUM")] V0154PokemonMeganium = 154,
    [pbr::OriginalName("V0155_POKEMON_CYNDAQUIL")] V0155PokemonCyndaquil = 155,
    [pbr::OriginalName("V0156_POKEMON_QUILAVA")] V0156PokemonQuilava = 156,
    [pbr::OriginalName("V0157_POKEMON_TYPHLOSION")] V0157PokemonTyphlosion = 157,
    [pbr::OriginalName("V0158_POKEMON_TOTODILE")] V0158PokemonTotodile = 158,
    [pbr::OriginalName("V0159_POKEMON_CROCONAW")] V0159PokemonCroconaw = 159,
    [pbr::OriginalName("V0160_POKEMON_FERALIGATR")] V0160PokemonFeraligatr = 160,
    [pbr::OriginalName("V0161_POKEMON_SENTRET")] V0161PokemonSentret = 161,
    [pbr::OriginalName("V0162_POKEMON_FURRET")] V0162PokemonFurret = 162,
    [pbr::OriginalName("V0163_POKEMON_HOOTHOOT")] V0163PokemonHoothoot = 163,
    [pbr::OriginalName("V0164_POKEMON_NOCTOWL")] V0164PokemonNoctowl = 164,
    [pbr::OriginalName("V0165_POKEMON_LEDYBA")] V0165PokemonLedyba = 165,
    [pbr::OriginalName("V0166_POKEMON_LEDIAN")] V0166PokemonLedian = 166,
    [pbr::OriginalName("V0167_POKEMON_SPINARAK")] V0167PokemonSpinarak = 167,
    [pbr::OriginalName("V0168_POKEMON_ARIADOS")] V0168PokemonAriados = 168,
    [pbr::OriginalName("V0169_POKEMON_CROBAT")] V0169PokemonCrobat = 169,
    [pbr::OriginalName("V0170_POKEMON_CHINCHOU")] V0170PokemonChinchou = 170,
    [pbr::OriginalName("V0171_POKEMON_LANTURN")] V0171PokemonLanturn = 171,
    [pbr::OriginalName("V0172_POKEMON_PICHU")] V0172PokemonPichu = 172,
    [pbr::OriginalName("V0173_POKEMON_CLEFFA")] V0173PokemonCleffa = 173,
    [pbr::OriginalName("V0174_POKEMON_IGGLYBUFF")] V0174PokemonIgglybuff = 174,
    [pbr::OriginalName("V0175_POKEMON_TOGEPI")] V0175PokemonTogepi = 175,
    [pbr::OriginalName("V0176_POKEMON_TOGETIC")] V0176PokemonTogetic = 176,
    [pbr::OriginalName("V0177_POKEMON_NATU")] V0177PokemonNatu = 177,
    [pbr::OriginalName("V0178_POKEMON_XATU")] V0178PokemonXatu = 178,
    [pbr::OriginalName("V0179_POKEMON_MAREEP")] V0179PokemonMareep = 179,
    [pbr::OriginalName("V0180_POKEMON_FLAAFFY")] V0180PokemonFlaaffy = 180,
    [pbr::OriginalName("V0181_POKEMON_AMPHAROS")] V0181PokemonAmpharos = 181,
    [pbr::OriginalName("V0182_POKEMON_BELLOSSOM")] V0182PokemonBellossom = 182,
    [pbr::OriginalName("V0183_POKEMON_MARILL")] V0183PokemonMarill = 183,
    [pbr::OriginalName("V0184_POKEMON_AZUMARILL")] V0184PokemonAzumarill = 184,
    [pbr::OriginalName("V0185_POKEMON_SUDOWOODO")] V0185PokemonSudowoodo = 185,
    [pbr::OriginalName("V0186_POKEMON_POLITOED")] V0186PokemonPolitoed = 186,
    [pbr::OriginalName("V0187_POKEMON_HOPPIP")] V0187PokemonHoppip = 187,
    [pbr::OriginalName("V0188_POKEMON_SKIPLOOM")] V0188PokemonSkiploom = 188,
    [pbr::OriginalName("V0189_POKEMON_JUMPLUFF")] V0189PokemonJumpluff = 189,
    [pbr::OriginalName("V0190_POKEMON_AIPOM")] V0190PokemonAipom = 190,
    [pbr::OriginalName("V0191_POKEMON_SUNKERN")] V0191PokemonSunkern = 191,
    [pbr::OriginalName("V0192_POKEMON_SUNFLORA")] V0192PokemonSunflora = 192,
    [pbr::OriginalName("V0193_POKEMON_YANMA")] V0193PokemonYanma = 193,
    [pbr::OriginalName("V0194_POKEMON_WOOPER")] V0194PokemonWooper = 194,
    [pbr::OriginalName("V0195_POKEMON_QUAGSIRE")] V0195PokemonQuagsire = 195,
    [pbr::OriginalName("V0196_POKEMON_ESPEON")] V0196PokemonEspeon = 196,
    [pbr::OriginalName("V0197_POKEMON_UMBREON")] V0197PokemonUmbreon = 197,
    [pbr::OriginalName("V0198_POKEMON_MURKROW")] V0198PokemonMurkrow = 198,
    [pbr::OriginalName("V0199_POKEMON_SLOWKING")] V0199PokemonSlowking = 199,
    [pbr::OriginalName("V0200_POKEMON_MISDREAVUS")] V0200PokemonMisdreavus = 200,
    [pbr::OriginalName("V0201_POKEMON_UNOWN")] V0201PokemonUnown = 201,
    [pbr::OriginalName("V0202_POKEMON_WOBBUFFET")] V0202PokemonWobbuffet = 202,
    [pbr::OriginalName("V0203_POKEMON_GIRAFARIG")] V0203PokemonGirafarig = 203,
    [pbr::OriginalName("V0204_POKEMON_PINECO")] V0204PokemonPineco = 204,
    [pbr::OriginalName("V0205_POKEMON_FORRETRESS")] V0205PokemonForretress = 205,
    [pbr::OriginalName("V0206_POKEMON_DUNSPARCE")] V0206PokemonDunsparce = 206,
    [pbr::OriginalName("V0207_POKEMON_GLIGAR")] V0207PokemonGligar = 207,
    [pbr::OriginalName("V0208_POKEMON_STEELIX")] V0208PokemonSteelix = 208,
    [pbr::OriginalName("V0209_POKEMON_SNUBBULL")] V0209PokemonSnubbull = 209,
    [pbr::OriginalName("V0210_POKEMON_GRANBULL")] V0210PokemonGranbull = 210,
    [pbr::OriginalName("V0211_POKEMON_QWILFISH")] V0211PokemonQwilfish = 211,
    [pbr::OriginalName("V0212_POKEMON_SCIZOR")] V0212PokemonScizor = 212,
    [pbr::OriginalName("V0213_POKEMON_SHUCKLE")] V0213PokemonShuckle = 213,
    [pbr::OriginalName("V0214_POKEMON_HERACROSS")] V0214PokemonHeracross = 214,
    [pbr::OriginalName("V0215_POKEMON_SNEASEL")] V0215PokemonSneasel = 215,
    [pbr::OriginalName("V0216_POKEMON_TEDDIURSA")] V0216PokemonTeddiursa = 216,
    [pbr::OriginalName("V0217_POKEMON_URSARING")] V0217PokemonUrsaring = 217,
    [pbr::OriginalName("V0218_POKEMON_SLUGMA")] V0218PokemonSlugma = 218,
    [pbr::OriginalName("V0219_POKEMON_MAGCARGO")] V0219PokemonMagcargo = 219,
    [pbr::OriginalName("V0220_POKEMON_SWINUB")] V0220PokemonSwinub = 220,
    [pbr::OriginalName("V0221_POKEMON_PILOSWINE")] V0221PokemonPiloswine = 221,
    [pbr::OriginalName("V0222_POKEMON_CORSOLA")] V0222PokemonCorsola = 222,
    [pbr::OriginalName("V0223_POKEMON_REMORAID")] V0223PokemonRemoraid = 223,
    [pbr::OriginalName("V0224_POKEMON_OCTILLERY")] V0224PokemonOctillery = 224,
    [pbr::OriginalName("V0225_POKEMON_DELIBIRD")] V0225PokemonDelibird = 225,
    [pbr::OriginalName("V0226_POKEMON_MANTINE")] V0226PokemonMantine = 226,
    [pbr::OriginalName("V0227_POKEMON_SKARMORY")] V0227PokemonSkarmory = 227,
    [pbr::OriginalName("V0228_POKEMON_HOUNDOUR")] V0228PokemonHoundour = 228,
    [pbr::OriginalName("V0229_POKEMON_HOUNDOOM")] V0229PokemonHoundoom = 229,
    [pbr::OriginalName("V0230_POKEMON_KINGDRA")] V0230PokemonKingdra = 230,
    [pbr::OriginalName("V0231_POKEMON_PHANPY")] V0231PokemonPhanpy = 231,
    [pbr::OriginalName("V0232_POKEMON_DONPHAN")] V0232PokemonDonphan = 232,
    [pbr::OriginalName("V0233_POKEMON_PORYGON2")] V0233PokemonPorygon2 = 233,
    [pbr::OriginalName("V0234_POKEMON_STANTLER")] V0234PokemonStantler = 234,
    [pbr::OriginalName("V0235_POKEMON_SMEARGLE")] V0235PokemonSmeargle = 235,
    [pbr::OriginalName("V0236_POKEMON_TYROGUE")] V0236PokemonTyrogue = 236,
    [pbr::OriginalName("V0237_POKEMON_HITMONTOP")] V0237PokemonHitmontop = 237,
    [pbr::OriginalName("V0238_POKEMON_SMOOCHUM")] V0238PokemonSmoochum = 238,
    [pbr::OriginalName("V0239_POKEMON_ELEKID")] V0239PokemonElekid = 239,
    [pbr::OriginalName("V0240_POKEMON_MAGBY")] V0240PokemonMagby = 240,
    [pbr::OriginalName("V0241_POKEMON_MILTANK")] V0241PokemonMiltank = 241,
    [pbr::OriginalName("V0242_POKEMON_BLISSEY")] V0242PokemonBlissey = 242,
    [pbr::OriginalName("V0243_POKEMON_RAIKOU")] V0243PokemonRaikou = 243,
    [pbr::OriginalName("V0244_POKEMON_ENTEI")] V0244PokemonEntei = 244,
    [pbr::OriginalName("V0245_POKEMON_SUICUNE")] V0245PokemonSuicune = 245,
    [pbr::OriginalName("V0246_POKEMON_LARVITAR")] V0246PokemonLarvitar = 246,
    [pbr::OriginalName("V0247_POKEMON_PUPITAR")] V0247PokemonPupitar = 247,
    [pbr::OriginalName("V0248_POKEMON_TYRANITAR")] V0248PokemonTyranitar = 248,
    [pbr::OriginalName("V0249_POKEMON_LUGIA")] V0249PokemonLugia = 249,
    [pbr::OriginalName("V0250_POKEMON_HO_OH")] V0250PokemonHoOh = 250,
    [pbr::OriginalName("V0251_POKEMON_CELEBI")] V0251PokemonCelebi = 251,
    [pbr::OriginalName("V0252_POKEMON_TREECKO")] V0252PokemonTreecko = 252,
    [pbr::OriginalName("V0253_POKEMON_GROVYLE")] V0253PokemonGrovyle = 253,
    [pbr::OriginalName("V0254_POKEMON_SCEPTILE")] V0254PokemonSceptile = 254,
    [pbr::OriginalName("V0255_POKEMON_TORCHIC")] V0255PokemonTorchic = 255,
    [pbr::OriginalName("V0256_POKEMON_COMBUSKEN")] V0256PokemonCombusken = 256,
    [pbr::OriginalName("V0257_POKEMON_BLAZIKEN")] V0257PokemonBlaziken = 257,
    [pbr::OriginalName("V0258_POKEMON_MUDKIP")] V0258PokemonMudkip = 258,
    [pbr::OriginalName("V0259_POKEMON_MARSHTOMP")] V0259PokemonMarshtomp = 259,
    [pbr::OriginalName("V0260_POKEMON_SWAMPERT")] V0260PokemonSwampert = 260,
    [pbr::OriginalName("V0261_POKEMON_POOCHYENA")] V0261PokemonPoochyena = 261,
    [pbr::OriginalName("V0262_POKEMON_MIGHTYENA")] V0262PokemonMightyena = 262,
    [pbr::OriginalName("V0263_POKEMON_ZIGZAGOON")] V0263PokemonZigzagoon = 263,
    [pbr::OriginalName("V0264_POKEMON_LINOONE")] V0264PokemonLinoone = 264,
    [pbr::OriginalName("V0265_POKEMON_WURMPLE")] V0265PokemonWurmple = 265,
    [pbr::OriginalName("V0266_POKEMON_SILCOON")] V0266PokemonSilcoon = 266,
    [pbr::OriginalName("V0267_POKEMON_BEAUTIFLY")] V0267PokemonBeautifly = 267,
    [pbr::OriginalName("V0268_POKEMON_CASCOON")] V0268PokemonCascoon = 268,
    [pbr::OriginalName("V0269_POKEMON_DUSTOX")] V0269PokemonDustox = 269,
    [pbr::OriginalName("V0270_POKEMON_LOTAD")] V0270PokemonLotad = 270,
    [pbr::OriginalName("V0271_POKEMON_LOMBRE")] V0271PokemonLombre = 271,
    [pbr::OriginalName("V0272_POKEMON_LUDICOLO")] V0272PokemonLudicolo = 272,
    [pbr::OriginalName("V0273_POKEMON_SEEDOT")] V0273PokemonSeedot = 273,
    [pbr::OriginalName("V0274_POKEMON_NUZLEAF")] V0274PokemonNuzleaf = 274,
    [pbr::OriginalName("V0275_POKEMON_SHIFTRY")] V0275PokemonShiftry = 275,
    [pbr::OriginalName("V0276_POKEMON_TAILLOW")] V0276PokemonTaillow = 276,
    [pbr::OriginalName("V0277_POKEMON_SWELLOW")] V0277PokemonSwellow = 277,
    [pbr::OriginalName("V0278_POKEMON_WINGULL")] V0278PokemonWingull = 278,
    [pbr::OriginalName("V0279_POKEMON_PELIPPER")] V0279PokemonPelipper = 279,
    [pbr::OriginalName("V0280_POKEMON_RALTS")] V0280PokemonRalts = 280,
    [pbr::OriginalName("V0281_POKEMON_KIRLIA")] V0281PokemonKirlia = 281,
    [pbr::OriginalName("V0282_POKEMON_GARDEVOIR")] V0282PokemonGardevoir = 282,
    [pbr::OriginalName("V0283_POKEMON_SURSKIT")] V0283PokemonSurskit = 283,
    [pbr::OriginalName("V0284_POKEMON_MASQUERAIN")] V0284PokemonMasquerain = 284,
    [pbr::OriginalName("V0285_POKEMON_SHROOMISH")] V0285PokemonShroomish = 285,
    [pbr::OriginalName("V0286_POKEMON_BRELOOM")] V0286PokemonBreloom = 286,
    [pbr::OriginalName("V0287_POKEMON_SLAKOTH")] V0287PokemonSlakoth = 287,
    [pbr::OriginalName("V0288_POKEMON_VIGOROTH")] V0288PokemonVigoroth = 288,
    [pbr::OriginalName("V0289_POKEMON_SLAKING")] V0289PokemonSlaking = 289,
    [pbr::OriginalName("V0290_POKEMON_NINCADA")] V0290PokemonNincada = 290,
    [pbr::OriginalName("V0291_POKEMON_NINJASK")] V0291PokemonNinjask = 291,
    [pbr::OriginalName("V0292_POKEMON_SHEDINJA")] V0292PokemonShedinja = 292,
    [pbr::OriginalName("V0293_POKEMON_WHISMUR")] V0293PokemonWhismur = 293,
    [pbr::OriginalName("V0294_POKEMON_LOUDRED")] V0294PokemonLoudred = 294,
    [pbr::OriginalName("V0295_POKEMON_EXPLOUD")] V0295PokemonExploud = 295,
    [pbr::OriginalName("V0296_POKEMON_MAKUHITA")] V0296PokemonMakuhita = 296,
    [pbr::OriginalName("V0297_POKEMON_HARIYAMA")] V0297PokemonHariyama = 297,
    [pbr::OriginalName("V0298_POKEMON_AZURILL")] V0298PokemonAzurill = 298,
    [pbr::OriginalName("V0299_POKEMON_NOSEPASS")] V0299PokemonNosepass = 299,
    [pbr::OriginalName("V0300_POKEMON_SKITTY")] V0300PokemonSkitty = 300,
    [pbr::OriginalName("V0301_POKEMON_DELCATTY")] V0301PokemonDelcatty = 301,
    [pbr::OriginalName("V0302_POKEMON_SABLEYE")] V0302PokemonSableye = 302,
    [pbr::OriginalName("V0303_POKEMON_MAWILE")] V0303PokemonMawile = 303,
    [pbr::OriginalName("V0304_POKEMON_ARON")] V0304PokemonAron = 304,
    [pbr::OriginalName("V0305_POKEMON_LAIRON")] V0305PokemonLairon = 305,
    [pbr::OriginalName("V0306_POKEMON_AGGRON")] V0306PokemonAggron = 306,
    [pbr::OriginalName("V0307_POKEMON_MEDITITE")] V0307PokemonMeditite = 307,
    [pbr::OriginalName("V0308_POKEMON_MEDICHAM")] V0308PokemonMedicham = 308,
    [pbr::OriginalName("V0309_POKEMON_ELECTRIKE")] V0309PokemonElectrike = 309,
    [pbr::OriginalName("V0310_POKEMON_MANECTRIC")] V0310PokemonManectric = 310,
    [pbr::OriginalName("V0311_POKEMON_PLUSLE")] V0311PokemonPlusle = 311,
    [pbr::OriginalName("V0312_POKEMON_MINUN")] V0312PokemonMinun = 312,
    [pbr::OriginalName("V0313_POKEMON_VOLBEAT")] V0313PokemonVolbeat = 313,
    [pbr::OriginalName("V0314_POKEMON_ILLUMISE")] V0314PokemonIllumise = 314,
    [pbr::OriginalName("V0315_POKEMON_ROSELIA")] V0315PokemonRoselia = 315,
    [pbr::OriginalName("V0316_POKEMON_GULPIN")] V0316PokemonGulpin = 316,
    [pbr::OriginalName("V0317_POKEMON_SWALOT")] V0317PokemonSwalot = 317,
    [pbr::OriginalName("V0318_POKEMON_CARVANHA")] V0318PokemonCarvanha = 318,
    [pbr::OriginalName("V0319_POKEMON_SHARPEDO")] V0319PokemonSharpedo = 319,
    [pbr::OriginalName("V0320_POKEMON_WAILMER")] V0320PokemonWailmer = 320,
    [pbr::OriginalName("V0321_POKEMON_WAILORD")] V0321PokemonWailord = 321,
    [pbr::OriginalName("V0322_POKEMON_NUMEL")] V0322PokemonNumel = 322,
    [pbr::OriginalName("V0323_POKEMON_CAMERUPT")] V0323PokemonCamerupt = 323,
    [pbr::OriginalName("V0324_POKEMON_TORKOAL")] V0324PokemonTorkoal = 324,
    [pbr::OriginalName("V0325_POKEMON_SPOINK")] V0325PokemonSpoink = 325,
    [pbr::OriginalName("V0326_POKEMON_GRUMPIG")] V0326PokemonGrumpig = 326,
    [pbr::OriginalName("V0327_POKEMON_SPINDA")] V0327PokemonSpinda = 327,
    [pbr::OriginalName("V0328_POKEMON_TRAPINCH")] V0328PokemonTrapinch = 328,
    [pbr::OriginalName("V0329_POKEMON_VIBRAVA")] V0329PokemonVibrava = 329,
    [pbr::OriginalName("V0330_POKEMON_FLYGON")] V0330PokemonFlygon = 330,
    [pbr::OriginalName("V0331_POKEMON_CACNEA")] V0331PokemonCacnea = 331,
    [pbr::OriginalName("V0332_POKEMON_CACTURNE")] V0332PokemonCacturne = 332,
    [pbr::OriginalName("V0333_POKEMON_SWABLU")] V0333PokemonSwablu = 333,
    [pbr::OriginalName("V0334_POKEMON_ALTARIA")] V0334PokemonAltaria = 334,
    [pbr::OriginalName("V0335_POKEMON_ZANGOOSE")] V0335PokemonZangoose = 335,
    [pbr::OriginalName("V0336_POKEMON_SEVIPER")] V0336PokemonSeviper = 336,
    [pbr::OriginalName("V0337_POKEMON_LUNATONE")] V0337PokemonLunatone = 337,
    [pbr::OriginalName("V0338_POKEMON_SOLROCK")] V0338PokemonSolrock = 338,
    [pbr::OriginalName("V0339_POKEMON_BARBOACH")] V0339PokemonBarboach = 339,
    [pbr::OriginalName("V0340_POKEMON_WHISCASH")] V0340PokemonWhiscash = 340,
    [pbr::OriginalName("V0341_POKEMON_CORPHISH")] V0341PokemonCorphish = 341,
    [pbr::OriginalName("V0342_POKEMON_CRAWDAUNT")] V0342PokemonCrawdaunt = 342,
    [pbr::OriginalName("V0343_POKEMON_BALTOY")] V0343PokemonBaltoy = 343,
    [pbr::OriginalName("V0344_POKEMON_CLAYDOL")] V0344PokemonClaydol = 344,
    [pbr::OriginalName("V0345_POKEMON_LILEEP")] V0345PokemonLileep = 345,
    [pbr::OriginalName("V0346_POKEMON_CRADILY")] V0346PokemonCradily = 346,
    [pbr::OriginalName("V0347_POKEMON_ANORITH")] V0347PokemonAnorith = 347,
    [pbr::OriginalName("V0348_POKEMON_ARMALDO")] V0348PokemonArmaldo = 348,
    [pbr::OriginalName("V0349_POKEMON_FEEBAS")] V0349PokemonFeebas = 349,
    [pbr::OriginalName("V0350_POKEMON_MILOTIC")] V0350PokemonMilotic = 350,
    [pbr::OriginalName("V0351_POKEMON_CASTFORM")] V0351PokemonCastform = 351,
    [pbr::OriginalName("V0352_POKEMON_KECLEON")] V0352PokemonKecleon = 352,
    [pbr::OriginalName("V0353_POKEMON_SHUPPET")] V0353PokemonShuppet = 353,
    [pbr::OriginalName("V0354_POKEMON_BANETTE")] V0354PokemonBanette = 354,
    [pbr::OriginalName("V0355_POKEMON_DUSKULL")] V0355PokemonDuskull = 355,
    [pbr::OriginalName("V0356_POKEMON_DUSCLOPS")] V0356PokemonDusclops = 356,
    [pbr::OriginalName("V0357_POKEMON_TROPIUS")] V0357PokemonTropius = 357,
    [pbr::OriginalName("V0358_POKEMON_CHIMECHO")] V0358PokemonChimecho = 358,
    [pbr::OriginalName("V0359_POKEMON_ABSOL")] V0359PokemonAbsol = 359,
    [pbr::OriginalName("V0360_POKEMON_WYNAUT")] V0360PokemonWynaut = 360,
    [pbr::OriginalName("V0361_POKEMON_SNORUNT")] V0361PokemonSnorunt = 361,
    [pbr::OriginalName("V0362_POKEMON_GLALIE")] V0362PokemonGlalie = 362,
    [pbr::OriginalName("V0363_POKEMON_SPHEAL")] V0363PokemonSpheal = 363,
    [pbr::OriginalName("V0364_POKEMON_SEALEO")] V0364PokemonSealeo = 364,
    [pbr::OriginalName("V0365_POKEMON_WALREIN")] V0365PokemonWalrein = 365,
    [pbr::OriginalName("V0366_POKEMON_CLAMPERL")] V0366PokemonClamperl = 366,
    [pbr::OriginalName("V0367_POKEMON_HUNTAIL")] V0367PokemonHuntail = 367,
    [pbr::OriginalName("V0368_POKEMON_GOREBYSS")] V0368PokemonGorebyss = 368,
    [pbr::OriginalName("V0369_POKEMON_RELICANTH")] V0369PokemonRelicanth = 369,
    [pbr::OriginalName("V0370_POKEMON_LUVDISC")] V0370PokemonLuvdisc = 370,
    [pbr::OriginalName("V0371_POKEMON_BAGON")] V0371PokemonBagon = 371,
    [pbr::OriginalName("V0372_POKEMON_SHELGON")] V0372PokemonShelgon = 372,
    [pbr::OriginalName("V0373_POKEMON_SALAMENCE")] V0373PokemonSalamence = 373,
    [pbr::OriginalName("V0374_POKEMON_BELDUM")] V0374PokemonBeldum = 374,
    [pbr::OriginalName("V0375_POKEMON_METANG")] V0375PokemonMetang = 375,
    [pbr::OriginalName("V0376_POKEMON_METAGROSS")] V0376PokemonMetagross = 376,
    [pbr::OriginalName("V0377_POKEMON_REGIROCK")] V0377PokemonRegirock = 377,
    [pbr::OriginalName("V0378_POKEMON_REGICE")] V0378PokemonRegice = 378,
    [pbr::OriginalName("V0379_POKEMON_REGISTEEL")] V0379PokemonRegisteel = 379,
    [pbr::OriginalName("V0380_POKEMON_LATIAS")] V0380PokemonLatias = 380,
    [pbr::OriginalName("V0381_POKEMON_LATIOS")] V0381PokemonLatios = 381,
    [pbr::OriginalName("V0382_POKEMON_KYOGRE")] V0382PokemonKyogre = 382,
    [pbr::OriginalName("V0383_POKEMON_GROUDON")] V0383PokemonGroudon = 383,
    [pbr::OriginalName("V0384_POKEMON_RAYQUAZA")] V0384PokemonRayquaza = 384,
    [pbr::OriginalName("V0385_POKEMON_JIRACHI")] V0385PokemonJirachi = 385,
    [pbr::OriginalName("V0386_POKEMON_DEOXYS")] V0386PokemonDeoxys = 386,
  }

  public enum PokemonCreateContext {
    [pbr::OriginalName("CREATE_CONTEXT_WILD")] CreateContextWild = 0,
    [pbr::OriginalName("CREATE_CONTEXT_EGG")] CreateContextEgg = 1,
    [pbr::OriginalName("CREATE_CONTEXT_EVOLVE")] CreateContextEvolve = 2,
  }

  public enum Item {
    [pbr::OriginalName("ITEM_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("ITEM_POKE_BALL")] PokeBall = 1,
    [pbr::OriginalName("ITEM_GREAT_BALL")] GreatBall = 2,
    [pbr::OriginalName("ITEM_ULTRA_BALL")] UltraBall = 3,
    [pbr::OriginalName("ITEM_MASTER_BALL")] MasterBall = 4,
    [pbr::OriginalName("ITEM_PREMIER_BALL")] PremierBall = 5,
    [pbr::OriginalName("ITEM_POTION")] Potion = 101,
    [pbr::OriginalName("ITEM_SUPER_POTION")] SuperPotion = 102,
    [pbr::OriginalName("ITEM_HYPER_POTION")] HyperPotion = 103,
    [pbr::OriginalName("ITEM_MAX_POTION")] MaxPotion = 104,
    [pbr::OriginalName("ITEM_REVIVE")] Revive = 201,
    [pbr::OriginalName("ITEM_MAX_REVIVE")] MaxRevive = 202,
    [pbr::OriginalName("ITEM_LUCKY_EGG")] LuckyEgg = 301,
    [pbr::OriginalName("ITEM_INCENSE_ORDINARY")] IncenseOrdinary = 401,
    [pbr::OriginalName("ITEM_INCENSE_SPICY")] IncenseSpicy = 402,
    [pbr::OriginalName("ITEM_INCENSE_COOL")] IncenseCool = 403,
    [pbr::OriginalName("ITEM_INCENSE_FLORAL")] IncenseFloral = 404,
    [pbr::OriginalName("ITEM_TROY_DISK")] TroyDisk = 501,
    [pbr::OriginalName("ITEM_X_ATTACK")] XAttack = 602,
    [pbr::OriginalName("ITEM_X_DEFENSE")] XDefense = 603,
    [pbr::OriginalName("ITEM_X_MIRACLE")] XMiracle = 604,
    [pbr::OriginalName("ITEM_RAZZ_BERRY")] RazzBerry = 701,
    [pbr::OriginalName("ITEM_BLUK_BERRY")] BlukBerry = 702,
    [pbr::OriginalName("ITEM_NANAB_BERRY")] NanabBerry = 703,
    [pbr::OriginalName("ITEM_WEPAR_BERRY")] WeparBerry = 704,
    [pbr::OriginalName("ITEM_PINAP_BERRY")] PinapBerry = 705,
    [pbr::OriginalName("ITEM_GOLDEN_RAZZ_BERRY")] GoldenRazzBerry = 706,
    [pbr::OriginalName("ITEM_GOLDEN_NANAB_BERRY")] GoldenNanabBerry = 707,
    [pbr::OriginalName("ITEM_GOLDEN_PINAP_BERRY")] GoldenPinapBerry = 708,
    [pbr::OriginalName("ITEM_SPECIAL_CAMERA")] SpecialCamera = 801,
    [pbr::OriginalName("ITEM_INCUBATOR_BASIC_UNLIMITED")] IncubatorBasicUnlimited = 901,
    [pbr::OriginalName("ITEM_INCUBATOR_BASIC")] IncubatorBasic = 902,
    [pbr::OriginalName("ITEM_INCUBATOR_SUPER")] IncubatorSuper = 903,
    [pbr::OriginalName("ITEM_POKEMON_STORAGE_UPGRADE")] PokemonStorageUpgrade = 1001,
    [pbr::OriginalName("ITEM_ITEM_STORAGE_UPGRADE")] ItemStorageUpgrade = 1002,
    [pbr::OriginalName("ITEM_SUN_STONE")] SunStone = 1101,
    [pbr::OriginalName("ITEM_KINGS_ROCK")] KingsRock = 1102,
    [pbr::OriginalName("ITEM_METAL_COAT")] MetalCoat = 1103,
    [pbr::OriginalName("ITEM_DRAGON_SCALE")] DragonScale = 1104,
    [pbr::OriginalName("ITEM_UP_GRADE")] UpGrade = 1105,
    [pbr::OriginalName("ITEM_MOVE_REROLL_FAST_ATTACK")] MoveRerollFastAttack = 1201,
    [pbr::OriginalName("ITEM_MOVE_REROLL_SPECIAL_ATTACK")] MoveRerollSpecialAttack = 1202,
    [pbr::OriginalName("ITEM_RARE_CANDY")] RareCandy = 1301,
    [pbr::OriginalName("ITEM_FREE_RAID_TICKET")] FreeRaidTicket = 1401,
    [pbr::OriginalName("ITEM_PAID_RAID_TICKET")] PaidRaidTicket = 1402,
    [pbr::OriginalName("ITEM_LEGENDARY_RAID_TICKET")] LegendaryRaidTicket = 1403,
  }

  public enum RaidLevel {
    [pbr::OriginalName("RAID_LEVEL_UNSET")] Unset = 0,
    [pbr::OriginalName("RAID_LEVEL_1")] _1 = 1,
    [pbr::OriginalName("RAID_LEVEL_2")] _2 = 2,
    [pbr::OriginalName("RAID_LEVEL_3")] _3 = 3,
    [pbr::OriginalName("RAID_LEVEL_4")] _4 = 4,
    [pbr::OriginalName("RAID_LEVEL_5")] _5 = 5,
  }

  public enum GymBadgeType {
    [pbr::OriginalName("GYM_BADGE_UNSET")] GymBadgeUnset = 0,
    [pbr::OriginalName("GYM_BADGE_VANILLA")] GymBadgeVanilla = 1,
    [pbr::OriginalName("GYM_BADGE_BRONZE")] GymBadgeBronze = 2,
    [pbr::OriginalName("GYM_BADGE_SILVER")] GymBadgeSilver = 3,
    [pbr::OriginalName("GYM_BADGE_GOLD")] GymBadgeGold = 4,
  }

  #endregion

  #region Messages
  public sealed partial class PokemonDisplayProto : pb::IMessage<PokemonDisplayProto> {
    private static readonly pb::MessageParser<PokemonDisplayProto> _parser = new pb::MessageParser<PokemonDisplayProto>(() => new PokemonDisplayProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PokemonDisplayProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonDisplayProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonDisplayProto(PokemonDisplayProto other) : this() {
      costume_ = other.costume_;
      gender_ = other.gender_;
      shiny_ = other.shiny_;
      form_ = other.form_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonDisplayProto Clone() {
      return new PokemonDisplayProto(this);
    }

    /// <summary>Field number for the "costume" field.</summary>
    public const int CostumeFieldNumber = 1;
    private global::POGOProtos.Networking.Responses.PokemonDisplayProto.Types.Costume costume_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PokemonDisplayProto.Types.Costume Costume {
      get { return costume_; }
      set {
        costume_ = value;
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 2;
    private global::POGOProtos.Networking.Responses.PokemonDisplayProto.Types.Gender gender_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PokemonDisplayProto.Types.Gender Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "shiny" field.</summary>
    public const int ShinyFieldNumber = 3;
    private bool shiny_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Shiny {
      get { return shiny_; }
      set {
        shiny_ = value;
      }
    }

    /// <summary>Field number for the "form" field.</summary>
    public const int FormFieldNumber = 4;
    private global::POGOProtos.Networking.Responses.PokemonDisplayProto.Types.Form form_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PokemonDisplayProto.Types.Form Form {
      get { return form_; }
      set {
        form_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PokemonDisplayProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PokemonDisplayProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Costume != other.Costume) return false;
      if (Gender != other.Gender) return false;
      if (Shiny != other.Shiny) return false;
      if (Form != other.Form) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Costume != 0) hash ^= Costume.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (Shiny != false) hash ^= Shiny.GetHashCode();
      if (Form != 0) hash ^= Form.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Costume != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Costume);
      }
      if (Gender != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Gender);
      }
      if (Shiny != false) {
        output.WriteRawTag(24);
        output.WriteBool(Shiny);
      }
      if (Form != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Form);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Costume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Costume);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gender);
      }
      if (Shiny != false) {
        size += 1 + 1;
      }
      if (Form != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Form);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PokemonDisplayProto other) {
      if (other == null) {
        return;
      }
      if (other.Costume != 0) {
        Costume = other.Costume;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.Shiny != false) {
        Shiny = other.Shiny;
      }
      if (other.Form != 0) {
        Form = other.Form;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            costume_ = (global::POGOProtos.Networking.Responses.PokemonDisplayProto.Types.Costume) input.ReadEnum();
            break;
          }
          case 16: {
            gender_ = (global::POGOProtos.Networking.Responses.PokemonDisplayProto.Types.Gender) input.ReadEnum();
            break;
          }
          case 24: {
            Shiny = input.ReadBool();
            break;
          }
          case 32: {
            form_ = (global::POGOProtos.Networking.Responses.PokemonDisplayProto.Types.Form) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PokemonDisplayProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Form {
        [pbr::OriginalName("FORM_UNSET")] Unset = 0,
        [pbr::OriginalName("UNOWN_A")] UnownA = 1,
        [pbr::OriginalName("UNOWN_B")] UnownB = 2,
        [pbr::OriginalName("UNOWN_C")] UnownC = 3,
        [pbr::OriginalName("UNOWN_D")] UnownD = 4,
        [pbr::OriginalName("UNOWN_E")] UnownE = 5,
        [pbr::OriginalName("UNOWN_F")] UnownF = 6,
        [pbr::OriginalName("UNOWN_G")] UnownG = 7,
        [pbr::OriginalName("UNOWN_H")] UnownH = 8,
        [pbr::OriginalName("UNOWN_I")] UnownI = 9,
        [pbr::OriginalName("UNOWN_J")] UnownJ = 10,
        [pbr::OriginalName("UNOWN_K")] UnownK = 11,
        [pbr::OriginalName("UNOWN_L")] UnownL = 12,
        [pbr::OriginalName("UNOWN_M")] UnownM = 13,
        [pbr::OriginalName("UNOWN_N")] UnownN = 14,
        [pbr::OriginalName("UNOWN_O")] UnownO = 15,
        [pbr::OriginalName("UNOWN_P")] UnownP = 16,
        [pbr::OriginalName("UNOWN_Q")] UnownQ = 17,
        [pbr::OriginalName("UNOWN_R")] UnownR = 18,
        [pbr::OriginalName("UNOWN_S")] UnownS = 19,
        [pbr::OriginalName("UNOWN_T")] UnownT = 20,
        [pbr::OriginalName("UNOWN_U")] UnownU = 21,
        [pbr::OriginalName("UNOWN_V")] UnownV = 22,
        [pbr::OriginalName("UNOWN_W")] UnownW = 23,
        [pbr::OriginalName("UNOWN_X")] UnownX = 24,
        [pbr::OriginalName("UNOWN_Y")] UnownY = 25,
        [pbr::OriginalName("UNOWN_Z")] UnownZ = 26,
        [pbr::OriginalName("UNOWN_EXCLAMATION_POINT")] UnownExclamationPoint = 27,
        [pbr::OriginalName("UNOWN_QUESTION_MARK")] UnownQuestionMark = 28,
      }

      public enum Costume {
        [pbr::OriginalName("UNSET")] Unset = 0,
        [pbr::OriginalName("HOLIDAY_2016")] Holiday2016 = 1,
        [pbr::OriginalName("ANNIVERSARY")] Anniversary = 2,
        [pbr::OriginalName("ONE_YEAR_ANNIVERSARY")] OneYearAnniversary = 3,
      }

      public enum Gender {
        [pbr::OriginalName("GENDER_UNSET")] Unset = 0,
        [pbr::OriginalName("MALE")] Male = 1,
        [pbr::OriginalName("FEMALE")] Female = 2,
        [pbr::OriginalName("GENDERLESS")] Less = 3,
      }

    }
    #endregion

  }

  public sealed partial class PokemonProto : pb::IMessage<PokemonProto> {
    private static readonly pb::MessageParser<PokemonProto> _parser = new pb::MessageParser<PokemonProto>(() => new PokemonProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PokemonProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonProto(PokemonProto other) : this() {
      id_ = other.id_;
      pokemonId_ = other.pokemonId_;
      cp_ = other.cp_;
      stamina_ = other.stamina_;
      maxStamina_ = other.maxStamina_;
      move1_ = other.move1_;
      move2_ = other.move2_;
      deployedFortId_ = other.deployedFortId_;
      ownerName_ = other.ownerName_;
      isEgg_ = other.isEgg_;
      eggKmWalkedTarget_ = other.eggKmWalkedTarget_;
      eggKmWalkedStart_ = other.eggKmWalkedStart_;
      origin_ = other.origin_;
      heightM_ = other.heightM_;
      weightKg_ = other.weightKg_;
      individualAttack_ = other.individualAttack_;
      individualDefense_ = other.individualDefense_;
      individualStamina_ = other.individualStamina_;
      cpMultiplier_ = other.cpMultiplier_;
      pokeball_ = other.pokeball_;
      capturedS2CellId_ = other.capturedS2CellId_;
      battlesAttacked_ = other.battlesAttacked_;
      battlesDefended_ = other.battlesDefended_;
      eggIncubatorId_ = other.eggIncubatorId_;
      creationTimeMs_ = other.creationTimeMs_;
      numUpgrades_ = other.numUpgrades_;
      additionalCpMultiplier_ = other.additionalCpMultiplier_;
      favorite_ = other.favorite_;
      nickname_ = other.nickname_;
      fromFort_ = other.fromFort_;
      buddyCandyAwarded_ = other.buddyCandyAwarded_;
      buddyKmWalked_ = other.buddyKmWalked_;
      displayPokemonId_ = other.displayPokemonId_;
      displayCp_ = other.displayCp_;
      PokemonDisplay = other.pokemonDisplay_ != null ? other.PokemonDisplay.Clone() : null;
      isBad_ = other.isBad_;
      hatchedFromEgg_ = other.hatchedFromEgg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonProto Clone() {
      return new PokemonProto(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pokemon_id" field.</summary>
    public const int PokemonIdFieldNumber = 2;
    private int pokemonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PokemonId {
      get { return pokemonId_; }
      set {
        pokemonId_ = value;
      }
    }

    /// <summary>Field number for the "cp" field.</summary>
    public const int CpFieldNumber = 3;
    private int cp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cp {
      get { return cp_; }
      set {
        cp_ = value;
      }
    }

    /// <summary>Field number for the "stamina" field.</summary>
    public const int StaminaFieldNumber = 4;
    private int stamina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stamina {
      get { return stamina_; }
      set {
        stamina_ = value;
      }
    }

    /// <summary>Field number for the "max_stamina" field.</summary>
    public const int MaxStaminaFieldNumber = 5;
    private int maxStamina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxStamina {
      get { return maxStamina_; }
      set {
        maxStamina_ = value;
      }
    }

    /// <summary>Field number for the "move1" field.</summary>
    public const int Move1FieldNumber = 6;
    private int move1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Move1 {
      get { return move1_; }
      set {
        move1_ = value;
      }
    }

    /// <summary>Field number for the "move2" field.</summary>
    public const int Move2FieldNumber = 7;
    private int move2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Move2 {
      get { return move2_; }
      set {
        move2_ = value;
      }
    }

    /// <summary>Field number for the "deployed_fort_id" field.</summary>
    public const int DeployedFortIdFieldNumber = 8;
    private string deployedFortId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeployedFortId {
      get { return deployedFortId_; }
      set {
        deployedFortId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner_name" field.</summary>
    public const int OwnerNameFieldNumber = 9;
    private string ownerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerName {
      get { return ownerName_; }
      set {
        ownerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_egg" field.</summary>
    public const int IsEggFieldNumber = 10;
    private bool isEgg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEgg {
      get { return isEgg_; }
      set {
        isEgg_ = value;
      }
    }

    /// <summary>Field number for the "egg_km_walked_target" field.</summary>
    public const int EggKmWalkedTargetFieldNumber = 11;
    private double eggKmWalkedTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EggKmWalkedTarget {
      get { return eggKmWalkedTarget_; }
      set {
        eggKmWalkedTarget_ = value;
      }
    }

    /// <summary>Field number for the "egg_km_walked_start" field.</summary>
    public const int EggKmWalkedStartFieldNumber = 12;
    private double eggKmWalkedStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EggKmWalkedStart {
      get { return eggKmWalkedStart_; }
      set {
        eggKmWalkedStart_ = value;
      }
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 14;
    private global::POGOProtos.Networking.Responses.PokemonCreateContext origin_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PokemonCreateContext Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "height_m" field.</summary>
    public const int HeightMFieldNumber = 15;
    private float heightM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightM {
      get { return heightM_; }
      set {
        heightM_ = value;
      }
    }

    /// <summary>Field number for the "weight_kg" field.</summary>
    public const int WeightKgFieldNumber = 16;
    private float weightKg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WeightKg {
      get { return weightKg_; }
      set {
        weightKg_ = value;
      }
    }

    /// <summary>Field number for the "individual_attack" field.</summary>
    public const int IndividualAttackFieldNumber = 17;
    private int individualAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IndividualAttack {
      get { return individualAttack_; }
      set {
        individualAttack_ = value;
      }
    }

    /// <summary>Field number for the "individual_defense" field.</summary>
    public const int IndividualDefenseFieldNumber = 18;
    private int individualDefense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IndividualDefense {
      get { return individualDefense_; }
      set {
        individualDefense_ = value;
      }
    }

    /// <summary>Field number for the "individual_stamina" field.</summary>
    public const int IndividualStaminaFieldNumber = 19;
    private int individualStamina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IndividualStamina {
      get { return individualStamina_; }
      set {
        individualStamina_ = value;
      }
    }

    /// <summary>Field number for the "cp_multiplier" field.</summary>
    public const int CpMultiplierFieldNumber = 20;
    private float cpMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CpMultiplier {
      get { return cpMultiplier_; }
      set {
        cpMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "pokeball" field.</summary>
    public const int PokeballFieldNumber = 21;
    private global::POGOProtos.Networking.Responses.Item pokeball_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.Item Pokeball {
      get { return pokeball_; }
      set {
        pokeball_ = value;
      }
    }

    /// <summary>Field number for the "captured_s2_cell_id" field.</summary>
    public const int CapturedS2CellIdFieldNumber = 22;
    private long capturedS2CellId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CapturedS2CellId {
      get { return capturedS2CellId_; }
      set {
        capturedS2CellId_ = value;
      }
    }

    /// <summary>Field number for the "battles_attacked" field.</summary>
    public const int BattlesAttackedFieldNumber = 23;
    private int battlesAttacked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattlesAttacked {
      get { return battlesAttacked_; }
      set {
        battlesAttacked_ = value;
      }
    }

    /// <summary>Field number for the "battles_defended" field.</summary>
    public const int BattlesDefendedFieldNumber = 24;
    private int battlesDefended_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattlesDefended {
      get { return battlesDefended_; }
      set {
        battlesDefended_ = value;
      }
    }

    /// <summary>Field number for the "egg_incubator_id" field.</summary>
    public const int EggIncubatorIdFieldNumber = 25;
    private string eggIncubatorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EggIncubatorId {
      get { return eggIncubatorId_; }
      set {
        eggIncubatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "creation_time_ms" field.</summary>
    public const int CreationTimeMsFieldNumber = 26;
    private long creationTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreationTimeMs {
      get { return creationTimeMs_; }
      set {
        creationTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "num_upgrades" field.</summary>
    public const int NumUpgradesFieldNumber = 27;
    private int numUpgrades_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumUpgrades {
      get { return numUpgrades_; }
      set {
        numUpgrades_ = value;
      }
    }

    /// <summary>Field number for the "additional_cp_multiplier" field.</summary>
    public const int AdditionalCpMultiplierFieldNumber = 28;
    private float additionalCpMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AdditionalCpMultiplier {
      get { return additionalCpMultiplier_; }
      set {
        additionalCpMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "favorite" field.</summary>
    public const int FavoriteFieldNumber = 29;
    private bool favorite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Favorite {
      get { return favorite_; }
      set {
        favorite_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 30;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from_fort" field.</summary>
    public const int FromFortFieldNumber = 31;
    private bool fromFort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FromFort {
      get { return fromFort_; }
      set {
        fromFort_ = value;
      }
    }

    /// <summary>Field number for the "buddy_candy_awarded" field.</summary>
    public const int BuddyCandyAwardedFieldNumber = 32;
    private int buddyCandyAwarded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuddyCandyAwarded {
      get { return buddyCandyAwarded_; }
      set {
        buddyCandyAwarded_ = value;
      }
    }

    /// <summary>Field number for the "buddy_km_walked" field.</summary>
    public const int BuddyKmWalkedFieldNumber = 33;
    private float buddyKmWalked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BuddyKmWalked {
      get { return buddyKmWalked_; }
      set {
        buddyKmWalked_ = value;
      }
    }

    /// <summary>Field number for the "display_pokemon_id" field.</summary>
    public const int DisplayPokemonIdFieldNumber = 34;
    private int displayPokemonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DisplayPokemonId {
      get { return displayPokemonId_; }
      set {
        displayPokemonId_ = value;
      }
    }

    /// <summary>Field number for the "display_cp" field.</summary>
    public const int DisplayCpFieldNumber = 35;
    private int displayCp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DisplayCp {
      get { return displayCp_; }
      set {
        displayCp_ = value;
      }
    }

    /// <summary>Field number for the "pokemon_display" field.</summary>
    public const int PokemonDisplayFieldNumber = 36;
    private global::POGOProtos.Networking.Responses.PokemonDisplayProto pokemonDisplay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PokemonDisplayProto PokemonDisplay {
      get { return pokemonDisplay_; }
      set {
        pokemonDisplay_ = value;
      }
    }

    /// <summary>Field number for the "is_bad" field.</summary>
    public const int IsBadFieldNumber = 37;
    private bool isBad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBad {
      get { return isBad_; }
      set {
        isBad_ = value;
      }
    }

    /// <summary>Field number for the "hatched_from_egg" field.</summary>
    public const int HatchedFromEggFieldNumber = 38;
    private bool hatchedFromEgg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HatchedFromEgg {
      get { return hatchedFromEgg_; }
      set {
        hatchedFromEgg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PokemonProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PokemonProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PokemonId != other.PokemonId) return false;
      if (Cp != other.Cp) return false;
      if (Stamina != other.Stamina) return false;
      if (MaxStamina != other.MaxStamina) return false;
      if (Move1 != other.Move1) return false;
      if (Move2 != other.Move2) return false;
      if (DeployedFortId != other.DeployedFortId) return false;
      if (OwnerName != other.OwnerName) return false;
      if (IsEgg != other.IsEgg) return false;
      if (EggKmWalkedTarget != other.EggKmWalkedTarget) return false;
      if (EggKmWalkedStart != other.EggKmWalkedStart) return false;
      if (Origin != other.Origin) return false;
      if (HeightM != other.HeightM) return false;
      if (WeightKg != other.WeightKg) return false;
      if (IndividualAttack != other.IndividualAttack) return false;
      if (IndividualDefense != other.IndividualDefense) return false;
      if (IndividualStamina != other.IndividualStamina) return false;
      if (CpMultiplier != other.CpMultiplier) return false;
      if (Pokeball != other.Pokeball) return false;
      if (CapturedS2CellId != other.CapturedS2CellId) return false;
      if (BattlesAttacked != other.BattlesAttacked) return false;
      if (BattlesDefended != other.BattlesDefended) return false;
      if (EggIncubatorId != other.EggIncubatorId) return false;
      if (CreationTimeMs != other.CreationTimeMs) return false;
      if (NumUpgrades != other.NumUpgrades) return false;
      if (AdditionalCpMultiplier != other.AdditionalCpMultiplier) return false;
      if (Favorite != other.Favorite) return false;
      if (Nickname != other.Nickname) return false;
      if (FromFort != other.FromFort) return false;
      if (BuddyCandyAwarded != other.BuddyCandyAwarded) return false;
      if (BuddyKmWalked != other.BuddyKmWalked) return false;
      if (DisplayPokemonId != other.DisplayPokemonId) return false;
      if (DisplayCp != other.DisplayCp) return false;
      if (!object.Equals(PokemonDisplay, other.PokemonDisplay)) return false;
      if (IsBad != other.IsBad) return false;
      if (HatchedFromEgg != other.HatchedFromEgg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (PokemonId != 0) hash ^= PokemonId.GetHashCode();
      if (Cp != 0) hash ^= Cp.GetHashCode();
      if (Stamina != 0) hash ^= Stamina.GetHashCode();
      if (MaxStamina != 0) hash ^= MaxStamina.GetHashCode();
      if (Move1 != 0) hash ^= Move1.GetHashCode();
      if (Move2 != 0) hash ^= Move2.GetHashCode();
      if (DeployedFortId.Length != 0) hash ^= DeployedFortId.GetHashCode();
      if (OwnerName.Length != 0) hash ^= OwnerName.GetHashCode();
      if (IsEgg != false) hash ^= IsEgg.GetHashCode();
      if (EggKmWalkedTarget != 0D) hash ^= EggKmWalkedTarget.GetHashCode();
      if (EggKmWalkedStart != 0D) hash ^= EggKmWalkedStart.GetHashCode();
      if (Origin != 0) hash ^= Origin.GetHashCode();
      if (HeightM != 0F) hash ^= HeightM.GetHashCode();
      if (WeightKg != 0F) hash ^= WeightKg.GetHashCode();
      if (IndividualAttack != 0) hash ^= IndividualAttack.GetHashCode();
      if (IndividualDefense != 0) hash ^= IndividualDefense.GetHashCode();
      if (IndividualStamina != 0) hash ^= IndividualStamina.GetHashCode();
      if (CpMultiplier != 0F) hash ^= CpMultiplier.GetHashCode();
      if (Pokeball != 0) hash ^= Pokeball.GetHashCode();
      if (CapturedS2CellId != 0L) hash ^= CapturedS2CellId.GetHashCode();
      if (BattlesAttacked != 0) hash ^= BattlesAttacked.GetHashCode();
      if (BattlesDefended != 0) hash ^= BattlesDefended.GetHashCode();
      if (EggIncubatorId.Length != 0) hash ^= EggIncubatorId.GetHashCode();
      if (CreationTimeMs != 0L) hash ^= CreationTimeMs.GetHashCode();
      if (NumUpgrades != 0) hash ^= NumUpgrades.GetHashCode();
      if (AdditionalCpMultiplier != 0F) hash ^= AdditionalCpMultiplier.GetHashCode();
      if (Favorite != false) hash ^= Favorite.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (FromFort != false) hash ^= FromFort.GetHashCode();
      if (BuddyCandyAwarded != 0) hash ^= BuddyCandyAwarded.GetHashCode();
      if (BuddyKmWalked != 0F) hash ^= BuddyKmWalked.GetHashCode();
      if (DisplayPokemonId != 0) hash ^= DisplayPokemonId.GetHashCode();
      if (DisplayCp != 0) hash ^= DisplayCp.GetHashCode();
      if (pokemonDisplay_ != null) hash ^= PokemonDisplay.GetHashCode();
      if (IsBad != false) hash ^= IsBad.GetHashCode();
      if (HatchedFromEgg != false) hash ^= HatchedFromEgg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Id);
      }
      if (PokemonId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PokemonId);
      }
      if (Cp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cp);
      }
      if (Stamina != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Stamina);
      }
      if (MaxStamina != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxStamina);
      }
      if (Move1 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Move1);
      }
      if (Move2 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Move2);
      }
      if (DeployedFortId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DeployedFortId);
      }
      if (OwnerName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(OwnerName);
      }
      if (IsEgg != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsEgg);
      }
      if (EggKmWalkedTarget != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(EggKmWalkedTarget);
      }
      if (EggKmWalkedStart != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(EggKmWalkedStart);
      }
      if (Origin != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Origin);
      }
      if (HeightM != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(HeightM);
      }
      if (WeightKg != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(WeightKg);
      }
      if (IndividualAttack != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(IndividualAttack);
      }
      if (IndividualDefense != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(IndividualDefense);
      }
      if (IndividualStamina != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(IndividualStamina);
      }
      if (CpMultiplier != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(CpMultiplier);
      }
      if (Pokeball != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) Pokeball);
      }
      if (CapturedS2CellId != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(CapturedS2CellId);
      }
      if (BattlesAttacked != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(BattlesAttacked);
      }
      if (BattlesDefended != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(BattlesDefended);
      }
      if (EggIncubatorId.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(EggIncubatorId);
      }
      if (CreationTimeMs != 0L) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(CreationTimeMs);
      }
      if (NumUpgrades != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(NumUpgrades);
      }
      if (AdditionalCpMultiplier != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(AdditionalCpMultiplier);
      }
      if (Favorite != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(Favorite);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Nickname);
      }
      if (FromFort != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(FromFort);
      }
      if (BuddyCandyAwarded != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(BuddyCandyAwarded);
      }
      if (BuddyKmWalked != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(BuddyKmWalked);
      }
      if (DisplayPokemonId != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(DisplayPokemonId);
      }
      if (DisplayCp != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(DisplayCp);
      }
      if (pokemonDisplay_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(PokemonDisplay);
      }
      if (IsBad != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(IsBad);
      }
      if (HatchedFromEgg != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(HatchedFromEgg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + 8;
      }
      if (PokemonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PokemonId);
      }
      if (Cp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cp);
      }
      if (Stamina != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stamina);
      }
      if (MaxStamina != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxStamina);
      }
      if (Move1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Move1);
      }
      if (Move2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Move2);
      }
      if (DeployedFortId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeployedFortId);
      }
      if (OwnerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerName);
      }
      if (IsEgg != false) {
        size += 1 + 1;
      }
      if (EggKmWalkedTarget != 0D) {
        size += 1 + 8;
      }
      if (EggKmWalkedStart != 0D) {
        size += 1 + 8;
      }
      if (Origin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Origin);
      }
      if (HeightM != 0F) {
        size += 1 + 4;
      }
      if (WeightKg != 0F) {
        size += 2 + 4;
      }
      if (IndividualAttack != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IndividualAttack);
      }
      if (IndividualDefense != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IndividualDefense);
      }
      if (IndividualStamina != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IndividualStamina);
      }
      if (CpMultiplier != 0F) {
        size += 2 + 4;
      }
      if (Pokeball != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Pokeball);
      }
      if (CapturedS2CellId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CapturedS2CellId);
      }
      if (BattlesAttacked != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BattlesAttacked);
      }
      if (BattlesDefended != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BattlesDefended);
      }
      if (EggIncubatorId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EggIncubatorId);
      }
      if (CreationTimeMs != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CreationTimeMs);
      }
      if (NumUpgrades != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumUpgrades);
      }
      if (AdditionalCpMultiplier != 0F) {
        size += 2 + 4;
      }
      if (Favorite != false) {
        size += 2 + 1;
      }
      if (Nickname.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (FromFort != false) {
        size += 2 + 1;
      }
      if (BuddyCandyAwarded != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BuddyCandyAwarded);
      }
      if (BuddyKmWalked != 0F) {
        size += 2 + 4;
      }
      if (DisplayPokemonId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DisplayPokemonId);
      }
      if (DisplayCp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DisplayCp);
      }
      if (pokemonDisplay_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PokemonDisplay);
      }
      if (IsBad != false) {
        size += 2 + 1;
      }
      if (HatchedFromEgg != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PokemonProto other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.PokemonId != 0) {
        PokemonId = other.PokemonId;
      }
      if (other.Cp != 0) {
        Cp = other.Cp;
      }
      if (other.Stamina != 0) {
        Stamina = other.Stamina;
      }
      if (other.MaxStamina != 0) {
        MaxStamina = other.MaxStamina;
      }
      if (other.Move1 != 0) {
        Move1 = other.Move1;
      }
      if (other.Move2 != 0) {
        Move2 = other.Move2;
      }
      if (other.DeployedFortId.Length != 0) {
        DeployedFortId = other.DeployedFortId;
      }
      if (other.OwnerName.Length != 0) {
        OwnerName = other.OwnerName;
      }
      if (other.IsEgg != false) {
        IsEgg = other.IsEgg;
      }
      if (other.EggKmWalkedTarget != 0D) {
        EggKmWalkedTarget = other.EggKmWalkedTarget;
      }
      if (other.EggKmWalkedStart != 0D) {
        EggKmWalkedStart = other.EggKmWalkedStart;
      }
      if (other.Origin != 0) {
        Origin = other.Origin;
      }
      if (other.HeightM != 0F) {
        HeightM = other.HeightM;
      }
      if (other.WeightKg != 0F) {
        WeightKg = other.WeightKg;
      }
      if (other.IndividualAttack != 0) {
        IndividualAttack = other.IndividualAttack;
      }
      if (other.IndividualDefense != 0) {
        IndividualDefense = other.IndividualDefense;
      }
      if (other.IndividualStamina != 0) {
        IndividualStamina = other.IndividualStamina;
      }
      if (other.CpMultiplier != 0F) {
        CpMultiplier = other.CpMultiplier;
      }
      if (other.Pokeball != 0) {
        Pokeball = other.Pokeball;
      }
      if (other.CapturedS2CellId != 0L) {
        CapturedS2CellId = other.CapturedS2CellId;
      }
      if (other.BattlesAttacked != 0) {
        BattlesAttacked = other.BattlesAttacked;
      }
      if (other.BattlesDefended != 0) {
        BattlesDefended = other.BattlesDefended;
      }
      if (other.EggIncubatorId.Length != 0) {
        EggIncubatorId = other.EggIncubatorId;
      }
      if (other.CreationTimeMs != 0L) {
        CreationTimeMs = other.CreationTimeMs;
      }
      if (other.NumUpgrades != 0) {
        NumUpgrades = other.NumUpgrades;
      }
      if (other.AdditionalCpMultiplier != 0F) {
        AdditionalCpMultiplier = other.AdditionalCpMultiplier;
      }
      if (other.Favorite != false) {
        Favorite = other.Favorite;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.FromFort != false) {
        FromFort = other.FromFort;
      }
      if (other.BuddyCandyAwarded != 0) {
        BuddyCandyAwarded = other.BuddyCandyAwarded;
      }
      if (other.BuddyKmWalked != 0F) {
        BuddyKmWalked = other.BuddyKmWalked;
      }
      if (other.DisplayPokemonId != 0) {
        DisplayPokemonId = other.DisplayPokemonId;
      }
      if (other.DisplayCp != 0) {
        DisplayCp = other.DisplayCp;
      }
      if (other.pokemonDisplay_ != null) {
        if (pokemonDisplay_ == null) {
          pokemonDisplay_ = new global::POGOProtos.Networking.Responses.PokemonDisplayProto();
        }
        PokemonDisplay.MergeFrom(other.PokemonDisplay);
      }
      if (other.IsBad != false) {
        IsBad = other.IsBad;
      }
      if (other.HatchedFromEgg != false) {
        HatchedFromEgg = other.HatchedFromEgg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Id = input.ReadFixed64();
            break;
          }
          case 16: {
            PokemonId = input.ReadInt32();
            break;
          }
          case 24: {
            Cp = input.ReadInt32();
            break;
          }
          case 32: {
            Stamina = input.ReadInt32();
            break;
          }
          case 40: {
            MaxStamina = input.ReadInt32();
            break;
          }
          case 48: {
            Move1 = input.ReadInt32();
            break;
          }
          case 56: {
            Move2 = input.ReadInt32();
            break;
          }
          case 66: {
            DeployedFortId = input.ReadString();
            break;
          }
          case 74: {
            OwnerName = input.ReadString();
            break;
          }
          case 80: {
            IsEgg = input.ReadBool();
            break;
          }
          case 89: {
            EggKmWalkedTarget = input.ReadDouble();
            break;
          }
          case 97: {
            EggKmWalkedStart = input.ReadDouble();
            break;
          }
          case 112: {
            origin_ = (global::POGOProtos.Networking.Responses.PokemonCreateContext) input.ReadEnum();
            break;
          }
          case 125: {
            HeightM = input.ReadFloat();
            break;
          }
          case 133: {
            WeightKg = input.ReadFloat();
            break;
          }
          case 136: {
            IndividualAttack = input.ReadInt32();
            break;
          }
          case 144: {
            IndividualDefense = input.ReadInt32();
            break;
          }
          case 152: {
            IndividualStamina = input.ReadInt32();
            break;
          }
          case 165: {
            CpMultiplier = input.ReadFloat();
            break;
          }
          case 168: {
            pokeball_ = (global::POGOProtos.Networking.Responses.Item) input.ReadEnum();
            break;
          }
          case 176: {
            CapturedS2CellId = input.ReadInt64();
            break;
          }
          case 184: {
            BattlesAttacked = input.ReadInt32();
            break;
          }
          case 192: {
            BattlesDefended = input.ReadInt32();
            break;
          }
          case 202: {
            EggIncubatorId = input.ReadString();
            break;
          }
          case 208: {
            CreationTimeMs = input.ReadInt64();
            break;
          }
          case 216: {
            NumUpgrades = input.ReadInt32();
            break;
          }
          case 229: {
            AdditionalCpMultiplier = input.ReadFloat();
            break;
          }
          case 232: {
            Favorite = input.ReadBool();
            break;
          }
          case 242: {
            Nickname = input.ReadString();
            break;
          }
          case 248: {
            FromFort = input.ReadBool();
            break;
          }
          case 256: {
            BuddyCandyAwarded = input.ReadInt32();
            break;
          }
          case 269: {
            BuddyKmWalked = input.ReadFloat();
            break;
          }
          case 272: {
            DisplayPokemonId = input.ReadInt32();
            break;
          }
          case 280: {
            DisplayCp = input.ReadInt32();
            break;
          }
          case 290: {
            if (pokemonDisplay_ == null) {
              pokemonDisplay_ = new global::POGOProtos.Networking.Responses.PokemonDisplayProto();
            }
            input.ReadMessage(pokemonDisplay_);
            break;
          }
          case 296: {
            IsBad = input.ReadBool();
            break;
          }
          case 304: {
            HatchedFromEgg = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PokemonInfo : pb::IMessage<PokemonInfo> {
    private static readonly pb::MessageParser<PokemonInfo> _parser = new pb::MessageParser<PokemonInfo>(() => new PokemonInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PokemonInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonInfo(PokemonInfo other) : this() {
      Pokemon = other.pokemon_ != null ? other.Pokemon.Clone() : null;
      currentHealth_ = other.currentHealth_;
      currentEnergy_ = other.currentEnergy_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonInfo Clone() {
      return new PokemonInfo(this);
    }

    /// <summary>Field number for the "pokemon" field.</summary>
    public const int PokemonFieldNumber = 1;
    private global::POGOProtos.Networking.Responses.PokemonProto pokemon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PokemonProto Pokemon {
      get { return pokemon_; }
      set {
        pokemon_ = value;
      }
    }

    /// <summary>Field number for the "current_health" field.</summary>
    public const int CurrentHealthFieldNumber = 2;
    private int currentHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentHealth {
      get { return currentHealth_; }
      set {
        currentHealth_ = value;
      }
    }

    /// <summary>Field number for the "current_energy" field.</summary>
    public const int CurrentEnergyFieldNumber = 3;
    private int currentEnergy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentEnergy {
      get { return currentEnergy_; }
      set {
        currentEnergy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PokemonInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PokemonInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pokemon, other.Pokemon)) return false;
      if (CurrentHealth != other.CurrentHealth) return false;
      if (CurrentEnergy != other.CurrentEnergy) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pokemon_ != null) hash ^= Pokemon.GetHashCode();
      if (CurrentHealth != 0) hash ^= CurrentHealth.GetHashCode();
      if (CurrentEnergy != 0) hash ^= CurrentEnergy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pokemon_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pokemon);
      }
      if (CurrentHealth != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrentHealth);
      }
      if (CurrentEnergy != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrentEnergy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pokemon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pokemon);
      }
      if (CurrentHealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentHealth);
      }
      if (CurrentEnergy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentEnergy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PokemonInfo other) {
      if (other == null) {
        return;
      }
      if (other.pokemon_ != null) {
        if (pokemon_ == null) {
          pokemon_ = new global::POGOProtos.Networking.Responses.PokemonProto();
        }
        Pokemon.MergeFrom(other.Pokemon);
      }
      if (other.CurrentHealth != 0) {
        CurrentHealth = other.CurrentHealth;
      }
      if (other.CurrentEnergy != 0) {
        CurrentEnergy = other.CurrentEnergy;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pokemon_ == null) {
              pokemon_ = new global::POGOProtos.Networking.Responses.PokemonProto();
            }
            input.ReadMessage(pokemon_);
            break;
          }
          case 16: {
            CurrentHealth = input.ReadInt32();
            break;
          }
          case 24: {
            CurrentEnergy = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerAvatarProto : pb::IMessage<PlayerAvatarProto> {
    private static readonly pb::MessageParser<PlayerAvatarProto> _parser = new pb::MessageParser<PlayerAvatarProto>(() => new PlayerAvatarProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerAvatarProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAvatarProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAvatarProto(PlayerAvatarProto other) : this() {
      avatar_ = other.avatar_;
      skin_ = other.skin_;
      hair_ = other.hair_;
      shirt_ = other.shirt_;
      pants_ = other.pants_;
      hat_ = other.hat_;
      shoes_ = other.shoes_;
      eyes_ = other.eyes_;
      backpack_ = other.backpack_;
      avatarHair_ = other.avatarHair_;
      avatarShirt_ = other.avatarShirt_;
      avatarPants_ = other.avatarPants_;
      avatarHat_ = other.avatarHat_;
      avatarShoes_ = other.avatarShoes_;
      avatarEyes_ = other.avatarEyes_;
      avatarBackpack_ = other.avatarBackpack_;
      avatarGloves_ = other.avatarGloves_;
      avatarSocks_ = other.avatarSocks_;
      avatarBelt_ = other.avatarBelt_;
      avatarGlasses_ = other.avatarGlasses_;
      avatarNecklace_ = other.avatarNecklace_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAvatarProto Clone() {
      return new PlayerAvatarProto(this);
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 8;
    private int avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }

    /// <summary>Field number for the "skin" field.</summary>
    public const int SkinFieldNumber = 2;
    private int skin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skin {
      get { return skin_; }
      set {
        skin_ = value;
      }
    }

    /// <summary>Field number for the "hair" field.</summary>
    public const int HairFieldNumber = 3;
    private int hair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hair {
      get { return hair_; }
      set {
        hair_ = value;
      }
    }

    /// <summary>Field number for the "shirt" field.</summary>
    public const int ShirtFieldNumber = 4;
    private int shirt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Shirt {
      get { return shirt_; }
      set {
        shirt_ = value;
      }
    }

    /// <summary>Field number for the "pants" field.</summary>
    public const int PantsFieldNumber = 5;
    private int pants_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pants {
      get { return pants_; }
      set {
        pants_ = value;
      }
    }

    /// <summary>Field number for the "hat" field.</summary>
    public const int HatFieldNumber = 6;
    private int hat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hat {
      get { return hat_; }
      set {
        hat_ = value;
      }
    }

    /// <summary>Field number for the "shoes" field.</summary>
    public const int ShoesFieldNumber = 7;
    private int shoes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Shoes {
      get { return shoes_; }
      set {
        shoes_ = value;
      }
    }

    /// <summary>Field number for the "eyes" field.</summary>
    public const int EyesFieldNumber = 9;
    private int eyes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Eyes {
      get { return eyes_; }
      set {
        eyes_ = value;
      }
    }

    /// <summary>Field number for the "backpack" field.</summary>
    public const int BackpackFieldNumber = 10;
    private int backpack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Backpack {
      get { return backpack_; }
      set {
        backpack_ = value;
      }
    }

    /// <summary>Field number for the "avatar_hair" field.</summary>
    public const int AvatarHairFieldNumber = 11;
    private string avatarHair_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarHair {
      get { return avatarHair_; }
      set {
        avatarHair_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_shirt" field.</summary>
    public const int AvatarShirtFieldNumber = 12;
    private string avatarShirt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarShirt {
      get { return avatarShirt_; }
      set {
        avatarShirt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_pants" field.</summary>
    public const int AvatarPantsFieldNumber = 13;
    private string avatarPants_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarPants {
      get { return avatarPants_; }
      set {
        avatarPants_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_hat" field.</summary>
    public const int AvatarHatFieldNumber = 14;
    private string avatarHat_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarHat {
      get { return avatarHat_; }
      set {
        avatarHat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_shoes" field.</summary>
    public const int AvatarShoesFieldNumber = 15;
    private string avatarShoes_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarShoes {
      get { return avatarShoes_; }
      set {
        avatarShoes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_eyes" field.</summary>
    public const int AvatarEyesFieldNumber = 16;
    private string avatarEyes_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarEyes {
      get { return avatarEyes_; }
      set {
        avatarEyes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_backpack" field.</summary>
    public const int AvatarBackpackFieldNumber = 17;
    private string avatarBackpack_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarBackpack {
      get { return avatarBackpack_; }
      set {
        avatarBackpack_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_gloves" field.</summary>
    public const int AvatarGlovesFieldNumber = 18;
    private string avatarGloves_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarGloves {
      get { return avatarGloves_; }
      set {
        avatarGloves_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_socks" field.</summary>
    public const int AvatarSocksFieldNumber = 19;
    private string avatarSocks_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarSocks {
      get { return avatarSocks_; }
      set {
        avatarSocks_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_belt" field.</summary>
    public const int AvatarBeltFieldNumber = 20;
    private string avatarBelt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarBelt {
      get { return avatarBelt_; }
      set {
        avatarBelt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_glasses" field.</summary>
    public const int AvatarGlassesFieldNumber = 21;
    private string avatarGlasses_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarGlasses {
      get { return avatarGlasses_; }
      set {
        avatarGlasses_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_necklace" field.</summary>
    public const int AvatarNecklaceFieldNumber = 22;
    private string avatarNecklace_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarNecklace {
      get { return avatarNecklace_; }
      set {
        avatarNecklace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerAvatarProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerAvatarProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Avatar != other.Avatar) return false;
      if (Skin != other.Skin) return false;
      if (Hair != other.Hair) return false;
      if (Shirt != other.Shirt) return false;
      if (Pants != other.Pants) return false;
      if (Hat != other.Hat) return false;
      if (Shoes != other.Shoes) return false;
      if (Eyes != other.Eyes) return false;
      if (Backpack != other.Backpack) return false;
      if (AvatarHair != other.AvatarHair) return false;
      if (AvatarShirt != other.AvatarShirt) return false;
      if (AvatarPants != other.AvatarPants) return false;
      if (AvatarHat != other.AvatarHat) return false;
      if (AvatarShoes != other.AvatarShoes) return false;
      if (AvatarEyes != other.AvatarEyes) return false;
      if (AvatarBackpack != other.AvatarBackpack) return false;
      if (AvatarGloves != other.AvatarGloves) return false;
      if (AvatarSocks != other.AvatarSocks) return false;
      if (AvatarBelt != other.AvatarBelt) return false;
      if (AvatarGlasses != other.AvatarGlasses) return false;
      if (AvatarNecklace != other.AvatarNecklace) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Avatar != 0) hash ^= Avatar.GetHashCode();
      if (Skin != 0) hash ^= Skin.GetHashCode();
      if (Hair != 0) hash ^= Hair.GetHashCode();
      if (Shirt != 0) hash ^= Shirt.GetHashCode();
      if (Pants != 0) hash ^= Pants.GetHashCode();
      if (Hat != 0) hash ^= Hat.GetHashCode();
      if (Shoes != 0) hash ^= Shoes.GetHashCode();
      if (Eyes != 0) hash ^= Eyes.GetHashCode();
      if (Backpack != 0) hash ^= Backpack.GetHashCode();
      if (AvatarHair.Length != 0) hash ^= AvatarHair.GetHashCode();
      if (AvatarShirt.Length != 0) hash ^= AvatarShirt.GetHashCode();
      if (AvatarPants.Length != 0) hash ^= AvatarPants.GetHashCode();
      if (AvatarHat.Length != 0) hash ^= AvatarHat.GetHashCode();
      if (AvatarShoes.Length != 0) hash ^= AvatarShoes.GetHashCode();
      if (AvatarEyes.Length != 0) hash ^= AvatarEyes.GetHashCode();
      if (AvatarBackpack.Length != 0) hash ^= AvatarBackpack.GetHashCode();
      if (AvatarGloves.Length != 0) hash ^= AvatarGloves.GetHashCode();
      if (AvatarSocks.Length != 0) hash ^= AvatarSocks.GetHashCode();
      if (AvatarBelt.Length != 0) hash ^= AvatarBelt.GetHashCode();
      if (AvatarGlasses.Length != 0) hash ^= AvatarGlasses.GetHashCode();
      if (AvatarNecklace.Length != 0) hash ^= AvatarNecklace.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Skin != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Skin);
      }
      if (Hair != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Hair);
      }
      if (Shirt != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Shirt);
      }
      if (Pants != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Pants);
      }
      if (Hat != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Hat);
      }
      if (Shoes != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Shoes);
      }
      if (Avatar != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Avatar);
      }
      if (Eyes != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Eyes);
      }
      if (Backpack != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Backpack);
      }
      if (AvatarHair.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(AvatarHair);
      }
      if (AvatarShirt.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(AvatarShirt);
      }
      if (AvatarPants.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(AvatarPants);
      }
      if (AvatarHat.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(AvatarHat);
      }
      if (AvatarShoes.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(AvatarShoes);
      }
      if (AvatarEyes.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(AvatarEyes);
      }
      if (AvatarBackpack.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(AvatarBackpack);
      }
      if (AvatarGloves.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(AvatarGloves);
      }
      if (AvatarSocks.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(AvatarSocks);
      }
      if (AvatarBelt.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(AvatarBelt);
      }
      if (AvatarGlasses.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(AvatarGlasses);
      }
      if (AvatarNecklace.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(AvatarNecklace);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Avatar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Avatar);
      }
      if (Skin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skin);
      }
      if (Hair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hair);
      }
      if (Shirt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Shirt);
      }
      if (Pants != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pants);
      }
      if (Hat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hat);
      }
      if (Shoes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Shoes);
      }
      if (Eyes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Eyes);
      }
      if (Backpack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Backpack);
      }
      if (AvatarHair.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarHair);
      }
      if (AvatarShirt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarShirt);
      }
      if (AvatarPants.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarPants);
      }
      if (AvatarHat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarHat);
      }
      if (AvatarShoes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarShoes);
      }
      if (AvatarEyes.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AvatarEyes);
      }
      if (AvatarBackpack.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AvatarBackpack);
      }
      if (AvatarGloves.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AvatarGloves);
      }
      if (AvatarSocks.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AvatarSocks);
      }
      if (AvatarBelt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AvatarBelt);
      }
      if (AvatarGlasses.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AvatarGlasses);
      }
      if (AvatarNecklace.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AvatarNecklace);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerAvatarProto other) {
      if (other == null) {
        return;
      }
      if (other.Avatar != 0) {
        Avatar = other.Avatar;
      }
      if (other.Skin != 0) {
        Skin = other.Skin;
      }
      if (other.Hair != 0) {
        Hair = other.Hair;
      }
      if (other.Shirt != 0) {
        Shirt = other.Shirt;
      }
      if (other.Pants != 0) {
        Pants = other.Pants;
      }
      if (other.Hat != 0) {
        Hat = other.Hat;
      }
      if (other.Shoes != 0) {
        Shoes = other.Shoes;
      }
      if (other.Eyes != 0) {
        Eyes = other.Eyes;
      }
      if (other.Backpack != 0) {
        Backpack = other.Backpack;
      }
      if (other.AvatarHair.Length != 0) {
        AvatarHair = other.AvatarHair;
      }
      if (other.AvatarShirt.Length != 0) {
        AvatarShirt = other.AvatarShirt;
      }
      if (other.AvatarPants.Length != 0) {
        AvatarPants = other.AvatarPants;
      }
      if (other.AvatarHat.Length != 0) {
        AvatarHat = other.AvatarHat;
      }
      if (other.AvatarShoes.Length != 0) {
        AvatarShoes = other.AvatarShoes;
      }
      if (other.AvatarEyes.Length != 0) {
        AvatarEyes = other.AvatarEyes;
      }
      if (other.AvatarBackpack.Length != 0) {
        AvatarBackpack = other.AvatarBackpack;
      }
      if (other.AvatarGloves.Length != 0) {
        AvatarGloves = other.AvatarGloves;
      }
      if (other.AvatarSocks.Length != 0) {
        AvatarSocks = other.AvatarSocks;
      }
      if (other.AvatarBelt.Length != 0) {
        AvatarBelt = other.AvatarBelt;
      }
      if (other.AvatarGlasses.Length != 0) {
        AvatarGlasses = other.AvatarGlasses;
      }
      if (other.AvatarNecklace.Length != 0) {
        AvatarNecklace = other.AvatarNecklace;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Skin = input.ReadInt32();
            break;
          }
          case 24: {
            Hair = input.ReadInt32();
            break;
          }
          case 32: {
            Shirt = input.ReadInt32();
            break;
          }
          case 40: {
            Pants = input.ReadInt32();
            break;
          }
          case 48: {
            Hat = input.ReadInt32();
            break;
          }
          case 56: {
            Shoes = input.ReadInt32();
            break;
          }
          case 64: {
            Avatar = input.ReadInt32();
            break;
          }
          case 72: {
            Eyes = input.ReadInt32();
            break;
          }
          case 80: {
            Backpack = input.ReadInt32();
            break;
          }
          case 90: {
            AvatarHair = input.ReadString();
            break;
          }
          case 98: {
            AvatarShirt = input.ReadString();
            break;
          }
          case 106: {
            AvatarPants = input.ReadString();
            break;
          }
          case 114: {
            AvatarHat = input.ReadString();
            break;
          }
          case 122: {
            AvatarShoes = input.ReadString();
            break;
          }
          case 130: {
            AvatarEyes = input.ReadString();
            break;
          }
          case 138: {
            AvatarBackpack = input.ReadString();
            break;
          }
          case 146: {
            AvatarGloves = input.ReadString();
            break;
          }
          case 154: {
            AvatarSocks = input.ReadString();
            break;
          }
          case 162: {
            AvatarBelt = input.ReadString();
            break;
          }
          case 170: {
            AvatarGlasses = input.ReadString();
            break;
          }
          case 178: {
            AvatarNecklace = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerPublicProfileProto : pb::IMessage<PlayerPublicProfileProto> {
    private static readonly pb::MessageParser<PlayerPublicProfileProto> _parser = new pb::MessageParser<PlayerPublicProfileProto>(() => new PlayerPublicProfileProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerPublicProfileProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPublicProfileProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPublicProfileProto(PlayerPublicProfileProto other) : this() {
      name_ = other.name_;
      level_ = other.level_;
      Avatar = other.avatar_ != null ? other.Avatar.Clone() : null;
      team_ = other.team_;
      battlesWon_ = other.battlesWon_;
      kmWalked_ = other.kmWalked_;
      caughtPokemon_ = other.caughtPokemon_;
      gymBadgeType_ = other.gymBadgeType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPublicProfileProto Clone() {
      return new PlayerPublicProfileProto(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 3;
    private global::POGOProtos.Networking.Responses.PlayerAvatarProto avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PlayerAvatarProto Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 4;
    private global::POGOProtos.Networking.Responses.PlayerPublicProfileProto.Types.Team team_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PlayerPublicProfileProto.Types.Team Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "battles_won" field.</summary>
    public const int BattlesWonFieldNumber = 5;
    private int battlesWon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattlesWon {
      get { return battlesWon_; }
      set {
        battlesWon_ = value;
      }
    }

    /// <summary>Field number for the "km_walked" field.</summary>
    public const int KmWalkedFieldNumber = 6;
    private float kmWalked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float KmWalked {
      get { return kmWalked_; }
      set {
        kmWalked_ = value;
      }
    }

    /// <summary>Field number for the "caught_pokemon" field.</summary>
    public const int CaughtPokemonFieldNumber = 7;
    private int caughtPokemon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CaughtPokemon {
      get { return caughtPokemon_; }
      set {
        caughtPokemon_ = value;
      }
    }

    /// <summary>Field number for the "gym_badge_type" field.</summary>
    public const int GymBadgeTypeFieldNumber = 8;
    private global::POGOProtos.Networking.Responses.PlayerPublicProfileProto.Types.GymBadgeType gymBadgeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PlayerPublicProfileProto.Types.GymBadgeType GymBadgeType {
      get { return gymBadgeType_; }
      set {
        gymBadgeType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerPublicProfileProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerPublicProfileProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (!object.Equals(Avatar, other.Avatar)) return false;
      if (Team != other.Team) return false;
      if (BattlesWon != other.BattlesWon) return false;
      if (KmWalked != other.KmWalked) return false;
      if (CaughtPokemon != other.CaughtPokemon) return false;
      if (GymBadgeType != other.GymBadgeType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (avatar_ != null) hash ^= Avatar.GetHashCode();
      if (Team != 0) hash ^= Team.GetHashCode();
      if (BattlesWon != 0) hash ^= BattlesWon.GetHashCode();
      if (KmWalked != 0F) hash ^= KmWalked.GetHashCode();
      if (CaughtPokemon != 0) hash ^= CaughtPokemon.GetHashCode();
      if (GymBadgeType != 0) hash ^= GymBadgeType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (avatar_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Avatar);
      }
      if (Team != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Team);
      }
      if (BattlesWon != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BattlesWon);
      }
      if (KmWalked != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(KmWalked);
      }
      if (CaughtPokemon != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CaughtPokemon);
      }
      if (GymBadgeType != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) GymBadgeType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (avatar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Team);
      }
      if (BattlesWon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattlesWon);
      }
      if (KmWalked != 0F) {
        size += 1 + 4;
      }
      if (CaughtPokemon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CaughtPokemon);
      }
      if (GymBadgeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GymBadgeType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerPublicProfileProto other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.avatar_ != null) {
        if (avatar_ == null) {
          avatar_ = new global::POGOProtos.Networking.Responses.PlayerAvatarProto();
        }
        Avatar.MergeFrom(other.Avatar);
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      if (other.BattlesWon != 0) {
        BattlesWon = other.BattlesWon;
      }
      if (other.KmWalked != 0F) {
        KmWalked = other.KmWalked;
      }
      if (other.CaughtPokemon != 0) {
        CaughtPokemon = other.CaughtPokemon;
      }
      if (other.GymBadgeType != 0) {
        GymBadgeType = other.GymBadgeType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 26: {
            if (avatar_ == null) {
              avatar_ = new global::POGOProtos.Networking.Responses.PlayerAvatarProto();
            }
            input.ReadMessage(avatar_);
            break;
          }
          case 32: {
            team_ = (global::POGOProtos.Networking.Responses.PlayerPublicProfileProto.Types.Team) input.ReadEnum();
            break;
          }
          case 40: {
            BattlesWon = input.ReadInt32();
            break;
          }
          case 53: {
            KmWalked = input.ReadFloat();
            break;
          }
          case 56: {
            CaughtPokemon = input.ReadInt32();
            break;
          }
          case 64: {
            gymBadgeType_ = (global::POGOProtos.Networking.Responses.PlayerPublicProfileProto.Types.GymBadgeType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PlayerPublicProfileProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Team {
        [pbr::OriginalName("UNSET")] Unset = 0,
        [pbr::OriginalName("TEAM_BLUE")] Blue = 1,
        [pbr::OriginalName("TEAM_RED")] Red = 2,
        [pbr::OriginalName("TEAM_YELLOW")] Yellow = 3,
      }

      public enum GymBadgeType {
        [pbr::OriginalName("GYM_BADGE_UNSET")] GymBadgeUnset = 0,
        [pbr::OriginalName("GYM_BADGE_VANILLA")] GymBadgeVanilla = 1,
        [pbr::OriginalName("GYM_BADGE_BRONZE")] GymBadgeBronze = 2,
        [pbr::OriginalName("GYM_BADGE_SILVER")] GymBadgeSilver = 3,
        [pbr::OriginalName("GYM_BADGE_GOLD")] GymBadgeGold = 4,
      }

    }
    #endregion

  }

  public sealed partial class LobbyPokemonProto : pb::IMessage<LobbyPokemonProto> {
    private static readonly pb::MessageParser<LobbyPokemonProto> _parser = new pb::MessageParser<LobbyPokemonProto>(() => new LobbyPokemonProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LobbyPokemonProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyPokemonProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyPokemonProto(LobbyPokemonProto other) : this() {
      id_ = other.id_;
      pokedexId_ = other.pokedexId_;
      cp_ = other.cp_;
      percentHealth_ = other.percentHealth_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LobbyPokemonProto Clone() {
      return new LobbyPokemonProto(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pokedex_id" field.</summary>
    public const int PokedexIdFieldNumber = 2;
    private global::POGOProtos.Networking.Responses.HoloPokemonId pokedexId_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.HoloPokemonId PokedexId {
      get { return pokedexId_; }
      set {
        pokedexId_ = value;
      }
    }

    /// <summary>Field number for the "cp" field.</summary>
    public const int CpFieldNumber = 3;
    private int cp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cp {
      get { return cp_; }
      set {
        cp_ = value;
      }
    }

    /// <summary>Field number for the "percent_health" field.</summary>
    public const int PercentHealthFieldNumber = 4;
    private float percentHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PercentHealth {
      get { return percentHealth_; }
      set {
        percentHealth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LobbyPokemonProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LobbyPokemonProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PokedexId != other.PokedexId) return false;
      if (Cp != other.Cp) return false;
      if (PercentHealth != other.PercentHealth) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (PokedexId != 0) hash ^= PokedexId.GetHashCode();
      if (Cp != 0) hash ^= Cp.GetHashCode();
      if (PercentHealth != 0F) hash ^= PercentHealth.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (PokedexId != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PokedexId);
      }
      if (Cp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cp);
      }
      if (PercentHealth != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PercentHealth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (PokedexId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PokedexId);
      }
      if (Cp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cp);
      }
      if (PercentHealth != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LobbyPokemonProto other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.PokedexId != 0) {
        PokedexId = other.PokedexId;
      }
      if (other.Cp != 0) {
        Cp = other.Cp;
      }
      if (other.PercentHealth != 0F) {
        PercentHealth = other.PercentHealth;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            pokedexId_ = (global::POGOProtos.Networking.Responses.HoloPokemonId) input.ReadEnum();
            break;
          }
          case 24: {
            Cp = input.ReadInt32();
            break;
          }
          case 37: {
            PercentHealth = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleParticipantProto : pb::IMessage<BattleParticipantProto> {
    private static readonly pb::MessageParser<BattleParticipantProto> _parser = new pb::MessageParser<BattleParticipantProto>(() => new BattleParticipantProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleParticipantProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleParticipantProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleParticipantProto(BattleParticipantProto other) : this() {
      ActivePokemon = other.activePokemon_ != null ? other.ActivePokemon.Clone() : null;
      TrainerPublicProfile = other.trainerPublicProfile_ != null ? other.TrainerPublicProfile.Clone() : null;
      reservePokemon_ = other.reservePokemon_.Clone();
      defeatedPokemon_ = other.defeatedPokemon_.Clone();
      lobbyPokemon_ = other.lobbyPokemon_.Clone();
      damageDealt_ = other.damageDealt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleParticipantProto Clone() {
      return new BattleParticipantProto(this);
    }

    /// <summary>Field number for the "active_pokemon" field.</summary>
    public const int ActivePokemonFieldNumber = 1;
    private global::POGOProtos.Networking.Responses.PokemonInfo activePokemon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PokemonInfo ActivePokemon {
      get { return activePokemon_; }
      set {
        activePokemon_ = value;
      }
    }

    /// <summary>Field number for the "trainer_public_profile" field.</summary>
    public const int TrainerPublicProfileFieldNumber = 2;
    private global::POGOProtos.Networking.Responses.PlayerPublicProfileProto trainerPublicProfile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PlayerPublicProfileProto TrainerPublicProfile {
      get { return trainerPublicProfile_; }
      set {
        trainerPublicProfile_ = value;
      }
    }

    /// <summary>Field number for the "reserve_pokemon" field.</summary>
    public const int ReservePokemonFieldNumber = 3;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Responses.PokemonInfo> _repeated_reservePokemon_codec
        = pb::FieldCodec.ForMessage(26, global::POGOProtos.Networking.Responses.PokemonInfo.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Responses.PokemonInfo> reservePokemon_ = new pbc::RepeatedField<global::POGOProtos.Networking.Responses.PokemonInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Responses.PokemonInfo> ReservePokemon {
      get { return reservePokemon_; }
    }

    /// <summary>Field number for the "defeated_pokemon" field.</summary>
    public const int DefeatedPokemonFieldNumber = 4;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Responses.PokemonInfo> _repeated_defeatedPokemon_codec
        = pb::FieldCodec.ForMessage(34, global::POGOProtos.Networking.Responses.PokemonInfo.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Responses.PokemonInfo> defeatedPokemon_ = new pbc::RepeatedField<global::POGOProtos.Networking.Responses.PokemonInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Responses.PokemonInfo> DefeatedPokemon {
      get { return defeatedPokemon_; }
    }

    /// <summary>Field number for the "lobby_pokemon" field.</summary>
    public const int LobbyPokemonFieldNumber = 5;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Responses.LobbyPokemonProto> _repeated_lobbyPokemon_codec
        = pb::FieldCodec.ForMessage(42, global::POGOProtos.Networking.Responses.LobbyPokemonProto.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Responses.LobbyPokemonProto> lobbyPokemon_ = new pbc::RepeatedField<global::POGOProtos.Networking.Responses.LobbyPokemonProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Responses.LobbyPokemonProto> LobbyPokemon {
      get { return lobbyPokemon_; }
    }

    /// <summary>Field number for the "damage_dealt" field.</summary>
    public const int DamageDealtFieldNumber = 6;
    private int damageDealt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageDealt {
      get { return damageDealt_; }
      set {
        damageDealt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleParticipantProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleParticipantProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ActivePokemon, other.ActivePokemon)) return false;
      if (!object.Equals(TrainerPublicProfile, other.TrainerPublicProfile)) return false;
      if(!reservePokemon_.Equals(other.reservePokemon_)) return false;
      if(!defeatedPokemon_.Equals(other.defeatedPokemon_)) return false;
      if(!lobbyPokemon_.Equals(other.lobbyPokemon_)) return false;
      if (DamageDealt != other.DamageDealt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (activePokemon_ != null) hash ^= ActivePokemon.GetHashCode();
      if (trainerPublicProfile_ != null) hash ^= TrainerPublicProfile.GetHashCode();
      hash ^= reservePokemon_.GetHashCode();
      hash ^= defeatedPokemon_.GetHashCode();
      hash ^= lobbyPokemon_.GetHashCode();
      if (DamageDealt != 0) hash ^= DamageDealt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (activePokemon_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ActivePokemon);
      }
      if (trainerPublicProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TrainerPublicProfile);
      }
      reservePokemon_.WriteTo(output, _repeated_reservePokemon_codec);
      defeatedPokemon_.WriteTo(output, _repeated_defeatedPokemon_codec);
      lobbyPokemon_.WriteTo(output, _repeated_lobbyPokemon_codec);
      if (DamageDealt != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DamageDealt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (activePokemon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActivePokemon);
      }
      if (trainerPublicProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrainerPublicProfile);
      }
      size += reservePokemon_.CalculateSize(_repeated_reservePokemon_codec);
      size += defeatedPokemon_.CalculateSize(_repeated_defeatedPokemon_codec);
      size += lobbyPokemon_.CalculateSize(_repeated_lobbyPokemon_codec);
      if (DamageDealt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageDealt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleParticipantProto other) {
      if (other == null) {
        return;
      }
      if (other.activePokemon_ != null) {
        if (activePokemon_ == null) {
          activePokemon_ = new global::POGOProtos.Networking.Responses.PokemonInfo();
        }
        ActivePokemon.MergeFrom(other.ActivePokemon);
      }
      if (other.trainerPublicProfile_ != null) {
        if (trainerPublicProfile_ == null) {
          trainerPublicProfile_ = new global::POGOProtos.Networking.Responses.PlayerPublicProfileProto();
        }
        TrainerPublicProfile.MergeFrom(other.TrainerPublicProfile);
      }
      reservePokemon_.Add(other.reservePokemon_);
      defeatedPokemon_.Add(other.defeatedPokemon_);
      lobbyPokemon_.Add(other.lobbyPokemon_);
      if (other.DamageDealt != 0) {
        DamageDealt = other.DamageDealt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (activePokemon_ == null) {
              activePokemon_ = new global::POGOProtos.Networking.Responses.PokemonInfo();
            }
            input.ReadMessage(activePokemon_);
            break;
          }
          case 18: {
            if (trainerPublicProfile_ == null) {
              trainerPublicProfile_ = new global::POGOProtos.Networking.Responses.PlayerPublicProfileProto();
            }
            input.ReadMessage(trainerPublicProfile_);
            break;
          }
          case 26: {
            reservePokemon_.AddEntriesFrom(input, _repeated_reservePokemon_codec);
            break;
          }
          case 34: {
            defeatedPokemon_.AddEntriesFrom(input, _repeated_defeatedPokemon_codec);
            break;
          }
          case 42: {
            lobbyPokemon_.AddEntriesFrom(input, _repeated_lobbyPokemon_codec);
            break;
          }
          case 48: {
            DamageDealt = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapPokemonProto : pb::IMessage<MapPokemonProto> {
    private static readonly pb::MessageParser<MapPokemonProto> _parser = new pb::MessageParser<MapPokemonProto>(() => new MapPokemonProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapPokemonProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapPokemonProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapPokemonProto(MapPokemonProto other) : this() {
      spawnpointId_ = other.spawnpointId_;
      encounterId_ = other.encounterId_;
      pokedexTypeId_ = other.pokedexTypeId_;
      expirationTimeMs_ = other.expirationTimeMs_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      PokemonDisplay = other.pokemonDisplay_ != null ? other.PokemonDisplay.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapPokemonProto Clone() {
      return new MapPokemonProto(this);
    }

    /// <summary>Field number for the "spawnpoint_id" field.</summary>
    public const int SpawnpointIdFieldNumber = 1;
    private string spawnpointId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpawnpointId {
      get { return spawnpointId_; }
      set {
        spawnpointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encounter_id" field.</summary>
    public const int EncounterIdFieldNumber = 2;
    private ulong encounterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EncounterId {
      get { return encounterId_; }
      set {
        encounterId_ = value;
      }
    }

    /// <summary>Field number for the "pokedex_type_id" field.</summary>
    public const int PokedexTypeIdFieldNumber = 3;
    private int pokedexTypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PokedexTypeId {
      get { return pokedexTypeId_; }
      set {
        pokedexTypeId_ = value;
      }
    }

    /// <summary>Field number for the "expiration_time_ms" field.</summary>
    public const int ExpirationTimeMsFieldNumber = 4;
    private long expirationTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpirationTimeMs {
      get { return expirationTimeMs_; }
      set {
        expirationTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 5;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 6;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "pokemon_display" field.</summary>
    public const int PokemonDisplayFieldNumber = 7;
    private global::POGOProtos.Networking.Responses.PokemonDisplayProto pokemonDisplay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PokemonDisplayProto PokemonDisplay {
      get { return pokemonDisplay_; }
      set {
        pokemonDisplay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapPokemonProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapPokemonProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpawnpointId != other.SpawnpointId) return false;
      if (EncounterId != other.EncounterId) return false;
      if (PokedexTypeId != other.PokedexTypeId) return false;
      if (ExpirationTimeMs != other.ExpirationTimeMs) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (!object.Equals(PokemonDisplay, other.PokemonDisplay)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpawnpointId.Length != 0) hash ^= SpawnpointId.GetHashCode();
      if (EncounterId != 0UL) hash ^= EncounterId.GetHashCode();
      if (PokedexTypeId != 0) hash ^= PokedexTypeId.GetHashCode();
      if (ExpirationTimeMs != 0L) hash ^= ExpirationTimeMs.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      if (pokemonDisplay_ != null) hash ^= PokemonDisplay.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpawnpointId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SpawnpointId);
      }
      if (EncounterId != 0UL) {
        output.WriteRawTag(17);
        output.WriteFixed64(EncounterId);
      }
      if (PokedexTypeId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PokedexTypeId);
      }
      if (ExpirationTimeMs != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ExpirationTimeMs);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Longitude);
      }
      if (pokemonDisplay_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PokemonDisplay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpawnpointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpawnpointId);
      }
      if (EncounterId != 0UL) {
        size += 1 + 8;
      }
      if (PokedexTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PokedexTypeId);
      }
      if (ExpirationTimeMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpirationTimeMs);
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      if (pokemonDisplay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PokemonDisplay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapPokemonProto other) {
      if (other == null) {
        return;
      }
      if (other.SpawnpointId.Length != 0) {
        SpawnpointId = other.SpawnpointId;
      }
      if (other.EncounterId != 0UL) {
        EncounterId = other.EncounterId;
      }
      if (other.PokedexTypeId != 0) {
        PokedexTypeId = other.PokedexTypeId;
      }
      if (other.ExpirationTimeMs != 0L) {
        ExpirationTimeMs = other.ExpirationTimeMs;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.pokemonDisplay_ != null) {
        if (pokemonDisplay_ == null) {
          pokemonDisplay_ = new global::POGOProtos.Networking.Responses.PokemonDisplayProto();
        }
        PokemonDisplay.MergeFrom(other.PokemonDisplay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SpawnpointId = input.ReadString();
            break;
          }
          case 17: {
            EncounterId = input.ReadFixed64();
            break;
          }
          case 24: {
            PokedexTypeId = input.ReadInt32();
            break;
          }
          case 32: {
            ExpirationTimeMs = input.ReadInt64();
            break;
          }
          case 41: {
            Latitude = input.ReadDouble();
            break;
          }
          case 49: {
            Longitude = input.ReadDouble();
            break;
          }
          case 58: {
            if (pokemonDisplay_ == null) {
              pokemonDisplay_ = new global::POGOProtos.Networking.Responses.PokemonDisplayProto();
            }
            input.ReadMessage(pokemonDisplay_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RaidInfoProto : pb::IMessage<RaidInfoProto> {
    private static readonly pb::MessageParser<RaidInfoProto> _parser = new pb::MessageParser<RaidInfoProto>(() => new RaidInfoProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RaidInfoProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidInfoProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidInfoProto(RaidInfoProto other) : this() {
      raidSeed_ = other.raidSeed_;
      raidSpawnMs_ = other.raidSpawnMs_;
      raidBattleMs_ = other.raidBattleMs_;
      raidEndMs_ = other.raidEndMs_;
      RaidPokemon = other.raidPokemon_ != null ? other.RaidPokemon.Clone() : null;
      raidLevel_ = other.raidLevel_;
      complete_ = other.complete_;
      isExclusive_ = other.isExclusive_;
      isRaidHidden_ = other.isRaidHidden_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidInfoProto Clone() {
      return new RaidInfoProto(this);
    }

    /// <summary>Field number for the "raid_seed" field.</summary>
    public const int RaidSeedFieldNumber = 1;
    private long raidSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RaidSeed {
      get { return raidSeed_; }
      set {
        raidSeed_ = value;
      }
    }

    /// <summary>Field number for the "raid_spawn_ms" field.</summary>
    public const int RaidSpawnMsFieldNumber = 2;
    private long raidSpawnMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RaidSpawnMs {
      get { return raidSpawnMs_; }
      set {
        raidSpawnMs_ = value;
      }
    }

    /// <summary>Field number for the "raid_battle_ms" field.</summary>
    public const int RaidBattleMsFieldNumber = 3;
    private long raidBattleMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RaidBattleMs {
      get { return raidBattleMs_; }
      set {
        raidBattleMs_ = value;
      }
    }

    /// <summary>Field number for the "raid_end_ms" field.</summary>
    public const int RaidEndMsFieldNumber = 4;
    private long raidEndMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RaidEndMs {
      get { return raidEndMs_; }
      set {
        raidEndMs_ = value;
      }
    }

    /// <summary>Field number for the "raid_pokemon" field.</summary>
    public const int RaidPokemonFieldNumber = 5;
    private global::POGOProtos.Networking.Responses.PokemonProto raidPokemon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PokemonProto RaidPokemon {
      get { return raidPokemon_; }
      set {
        raidPokemon_ = value;
      }
    }

    /// <summary>Field number for the "raid_level" field.</summary>
    public const int RaidLevelFieldNumber = 6;
    private global::POGOProtos.Networking.Responses.RaidLevel raidLevel_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.RaidLevel RaidLevel {
      get { return raidLevel_; }
      set {
        raidLevel_ = value;
      }
    }

    /// <summary>Field number for the "complete" field.</summary>
    public const int CompleteFieldNumber = 7;
    private bool complete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Complete {
      get { return complete_; }
      set {
        complete_ = value;
      }
    }

    /// <summary>Field number for the "is_exclusive" field.</summary>
    public const int IsExclusiveFieldNumber = 8;
    private bool isExclusive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsExclusive {
      get { return isExclusive_; }
      set {
        isExclusive_ = value;
      }
    }

    /// <summary>Field number for the "is_raid_hidden" field.</summary>
    public const int IsRaidHiddenFieldNumber = 9;
    private bool isRaidHidden_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRaidHidden {
      get { return isRaidHidden_; }
      set {
        isRaidHidden_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RaidInfoProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RaidInfoProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RaidSeed != other.RaidSeed) return false;
      if (RaidSpawnMs != other.RaidSpawnMs) return false;
      if (RaidBattleMs != other.RaidBattleMs) return false;
      if (RaidEndMs != other.RaidEndMs) return false;
      if (!object.Equals(RaidPokemon, other.RaidPokemon)) return false;
      if (RaidLevel != other.RaidLevel) return false;
      if (Complete != other.Complete) return false;
      if (IsExclusive != other.IsExclusive) return false;
      if (IsRaidHidden != other.IsRaidHidden) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RaidSeed != 0L) hash ^= RaidSeed.GetHashCode();
      if (RaidSpawnMs != 0L) hash ^= RaidSpawnMs.GetHashCode();
      if (RaidBattleMs != 0L) hash ^= RaidBattleMs.GetHashCode();
      if (RaidEndMs != 0L) hash ^= RaidEndMs.GetHashCode();
      if (raidPokemon_ != null) hash ^= RaidPokemon.GetHashCode();
      if (RaidLevel != 0) hash ^= RaidLevel.GetHashCode();
      if (Complete != false) hash ^= Complete.GetHashCode();
      if (IsExclusive != false) hash ^= IsExclusive.GetHashCode();
      if (IsRaidHidden != false) hash ^= IsRaidHidden.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RaidSeed != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RaidSeed);
      }
      if (RaidSpawnMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RaidSpawnMs);
      }
      if (RaidBattleMs != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RaidBattleMs);
      }
      if (RaidEndMs != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(RaidEndMs);
      }
      if (raidPokemon_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RaidPokemon);
      }
      if (RaidLevel != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) RaidLevel);
      }
      if (Complete != false) {
        output.WriteRawTag(56);
        output.WriteBool(Complete);
      }
      if (IsExclusive != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsExclusive);
      }
      if (IsRaidHidden != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsRaidHidden);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RaidSeed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RaidSeed);
      }
      if (RaidSpawnMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RaidSpawnMs);
      }
      if (RaidBattleMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RaidBattleMs);
      }
      if (RaidEndMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RaidEndMs);
      }
      if (raidPokemon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RaidPokemon);
      }
      if (RaidLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RaidLevel);
      }
      if (Complete != false) {
        size += 1 + 1;
      }
      if (IsExclusive != false) {
        size += 1 + 1;
      }
      if (IsRaidHidden != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RaidInfoProto other) {
      if (other == null) {
        return;
      }
      if (other.RaidSeed != 0L) {
        RaidSeed = other.RaidSeed;
      }
      if (other.RaidSpawnMs != 0L) {
        RaidSpawnMs = other.RaidSpawnMs;
      }
      if (other.RaidBattleMs != 0L) {
        RaidBattleMs = other.RaidBattleMs;
      }
      if (other.RaidEndMs != 0L) {
        RaidEndMs = other.RaidEndMs;
      }
      if (other.raidPokemon_ != null) {
        if (raidPokemon_ == null) {
          raidPokemon_ = new global::POGOProtos.Networking.Responses.PokemonProto();
        }
        RaidPokemon.MergeFrom(other.RaidPokemon);
      }
      if (other.RaidLevel != 0) {
        RaidLevel = other.RaidLevel;
      }
      if (other.Complete != false) {
        Complete = other.Complete;
      }
      if (other.IsExclusive != false) {
        IsExclusive = other.IsExclusive;
      }
      if (other.IsRaidHidden != false) {
        IsRaidHidden = other.IsRaidHidden;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RaidSeed = input.ReadInt64();
            break;
          }
          case 16: {
            RaidSpawnMs = input.ReadInt64();
            break;
          }
          case 24: {
            RaidBattleMs = input.ReadInt64();
            break;
          }
          case 32: {
            RaidEndMs = input.ReadInt64();
            break;
          }
          case 42: {
            if (raidPokemon_ == null) {
              raidPokemon_ = new global::POGOProtos.Networking.Responses.PokemonProto();
            }
            input.ReadMessage(raidPokemon_);
            break;
          }
          case 48: {
            raidLevel_ = (global::POGOProtos.Networking.Responses.RaidLevel) input.ReadEnum();
            break;
          }
          case 56: {
            Complete = input.ReadBool();
            break;
          }
          case 64: {
            IsExclusive = input.ReadBool();
            break;
          }
          case 72: {
            IsRaidHidden = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GymEventProto : pb::IMessage<GymEventProto> {
    private static readonly pb::MessageParser<GymEventProto> _parser = new pb::MessageParser<GymEventProto>(() => new GymEventProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GymEventProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymEventProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymEventProto(GymEventProto other) : this() {
      trainer_ = other.trainer_;
      timestampMs_ = other.timestampMs_;
      event_ = other.event_;
      pokedexId_ = other.pokedexId_;
      pokemonId_ = other.pokemonId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymEventProto Clone() {
      return new GymEventProto(this);
    }

    /// <summary>Field number for the "trainer" field.</summary>
    public const int TrainerFieldNumber = 1;
    private string trainer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Trainer {
      get { return trainer_; }
      set {
        trainer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp_ms" field.</summary>
    public const int TimestampMsFieldNumber = 2;
    private long timestampMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimestampMs {
      get { return timestampMs_; }
      set {
        timestampMs_ = value;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 3;
    private global::POGOProtos.Networking.Responses.GymEventProto.Types.Event event_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.GymEventProto.Types.Event Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "pokedex_id" field.</summary>
    public const int PokedexIdFieldNumber = 4;
    private int pokedexId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PokedexId {
      get { return pokedexId_; }
      set {
        pokedexId_ = value;
      }
    }

    /// <summary>Field number for the "pokemon_id" field.</summary>
    public const int PokemonIdFieldNumber = 5;
    private ulong pokemonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PokemonId {
      get { return pokemonId_; }
      set {
        pokemonId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GymEventProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GymEventProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Trainer != other.Trainer) return false;
      if (TimestampMs != other.TimestampMs) return false;
      if (Event != other.Event) return false;
      if (PokedexId != other.PokedexId) return false;
      if (PokemonId != other.PokemonId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Trainer.Length != 0) hash ^= Trainer.GetHashCode();
      if (TimestampMs != 0L) hash ^= TimestampMs.GetHashCode();
      if (Event != 0) hash ^= Event.GetHashCode();
      if (PokedexId != 0) hash ^= PokedexId.GetHashCode();
      if (PokemonId != 0UL) hash ^= PokemonId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Trainer.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Trainer);
      }
      if (TimestampMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TimestampMs);
      }
      if (Event != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Event);
      }
      if (PokedexId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PokedexId);
      }
      if (PokemonId != 0UL) {
        output.WriteRawTag(41);
        output.WriteFixed64(PokemonId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Trainer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Trainer);
      }
      if (TimestampMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimestampMs);
      }
      if (Event != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Event);
      }
      if (PokedexId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PokedexId);
      }
      if (PokemonId != 0UL) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GymEventProto other) {
      if (other == null) {
        return;
      }
      if (other.Trainer.Length != 0) {
        Trainer = other.Trainer;
      }
      if (other.TimestampMs != 0L) {
        TimestampMs = other.TimestampMs;
      }
      if (other.Event != 0) {
        Event = other.Event;
      }
      if (other.PokedexId != 0) {
        PokedexId = other.PokedexId;
      }
      if (other.PokemonId != 0UL) {
        PokemonId = other.PokemonId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Trainer = input.ReadString();
            break;
          }
          case 16: {
            TimestampMs = input.ReadInt64();
            break;
          }
          case 24: {
            event_ = (global::POGOProtos.Networking.Responses.GymEventProto.Types.Event) input.ReadEnum();
            break;
          }
          case 32: {
            PokedexId = input.ReadInt32();
            break;
          }
          case 41: {
            PokemonId = input.ReadFixed64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GymEventProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Event {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("POKEMON_FED")] PokemonFed = 1,
        [pbr::OriginalName("POKEMON_DEPLOYED")] PokemonDeployed = 2,
        [pbr::OriginalName("POKEMON_RETURNED")] PokemonReturned = 3,
        [pbr::OriginalName("BATTLE_WON")] BattleWon = 4,
        [pbr::OriginalName("BATTLE_LOSS")] BattleLoss = 5,
        [pbr::OriginalName("RAID_STARTED")] RaidStarted = 6,
        [pbr::OriginalName("RAID_ENDED")] RaidEnded = 7,
        [pbr::OriginalName("GYM_NEUTRALIZED")] GymNeutralized = 8,
      }

    }
    #endregion

  }

  public sealed partial class GymDisplayProto : pb::IMessage<GymDisplayProto> {
    private static readonly pb::MessageParser<GymDisplayProto> _parser = new pb::MessageParser<GymDisplayProto>(() => new GymDisplayProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GymDisplayProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymDisplayProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymDisplayProto(GymDisplayProto other) : this() {
      gymEvent_ = other.gymEvent_.Clone();
      totalGymCp_ = other.totalGymCp_;
      lowestPokemonMotivation_ = other.lowestPokemonMotivation_;
      slotsAvailable_ = other.slotsAvailable_;
      occupiedMillis_ = other.occupiedMillis_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymDisplayProto Clone() {
      return new GymDisplayProto(this);
    }

    /// <summary>Field number for the "gym_event" field.</summary>
    public const int GymEventFieldNumber = 1;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Responses.GymEventProto> _repeated_gymEvent_codec
        = pb::FieldCodec.ForMessage(10, global::POGOProtos.Networking.Responses.GymEventProto.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Responses.GymEventProto> gymEvent_ = new pbc::RepeatedField<global::POGOProtos.Networking.Responses.GymEventProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Responses.GymEventProto> GymEvent {
      get { return gymEvent_; }
    }

    /// <summary>Field number for the "total_gym_cp" field.</summary>
    public const int TotalGymCpFieldNumber = 2;
    private int totalGymCp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalGymCp {
      get { return totalGymCp_; }
      set {
        totalGymCp_ = value;
      }
    }

    /// <summary>Field number for the "lowest_pokemon_motivation" field.</summary>
    public const int LowestPokemonMotivationFieldNumber = 3;
    private double lowestPokemonMotivation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LowestPokemonMotivation {
      get { return lowestPokemonMotivation_; }
      set {
        lowestPokemonMotivation_ = value;
      }
    }

    /// <summary>Field number for the "slots_available" field.</summary>
    public const int SlotsAvailableFieldNumber = 4;
    private int slotsAvailable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotsAvailable {
      get { return slotsAvailable_; }
      set {
        slotsAvailable_ = value;
      }
    }

    /// <summary>Field number for the "occupied_millis" field.</summary>
    public const int OccupiedMillisFieldNumber = 5;
    private long occupiedMillis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OccupiedMillis {
      get { return occupiedMillis_; }
      set {
        occupiedMillis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GymDisplayProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GymDisplayProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gymEvent_.Equals(other.gymEvent_)) return false;
      if (TotalGymCp != other.TotalGymCp) return false;
      if (LowestPokemonMotivation != other.LowestPokemonMotivation) return false;
      if (SlotsAvailable != other.SlotsAvailable) return false;
      if (OccupiedMillis != other.OccupiedMillis) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gymEvent_.GetHashCode();
      if (TotalGymCp != 0) hash ^= TotalGymCp.GetHashCode();
      if (LowestPokemonMotivation != 0D) hash ^= LowestPokemonMotivation.GetHashCode();
      if (SlotsAvailable != 0) hash ^= SlotsAvailable.GetHashCode();
      if (OccupiedMillis != 0L) hash ^= OccupiedMillis.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      gymEvent_.WriteTo(output, _repeated_gymEvent_codec);
      if (TotalGymCp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalGymCp);
      }
      if (LowestPokemonMotivation != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LowestPokemonMotivation);
      }
      if (SlotsAvailable != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SlotsAvailable);
      }
      if (OccupiedMillis != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(OccupiedMillis);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gymEvent_.CalculateSize(_repeated_gymEvent_codec);
      if (TotalGymCp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalGymCp);
      }
      if (LowestPokemonMotivation != 0D) {
        size += 1 + 8;
      }
      if (SlotsAvailable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotsAvailable);
      }
      if (OccupiedMillis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OccupiedMillis);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GymDisplayProto other) {
      if (other == null) {
        return;
      }
      gymEvent_.Add(other.gymEvent_);
      if (other.TotalGymCp != 0) {
        TotalGymCp = other.TotalGymCp;
      }
      if (other.LowestPokemonMotivation != 0D) {
        LowestPokemonMotivation = other.LowestPokemonMotivation;
      }
      if (other.SlotsAvailable != 0) {
        SlotsAvailable = other.SlotsAvailable;
      }
      if (other.OccupiedMillis != 0L) {
        OccupiedMillis = other.OccupiedMillis;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            gymEvent_.AddEntriesFrom(input, _repeated_gymEvent_codec);
            break;
          }
          case 16: {
            TotalGymCp = input.ReadInt32();
            break;
          }
          case 25: {
            LowestPokemonMotivation = input.ReadDouble();
            break;
          }
          case 32: {
            SlotsAvailable = input.ReadInt32();
            break;
          }
          case 40: {
            OccupiedMillis = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PokemonFortProto : pb::IMessage<PokemonFortProto> {
    private static readonly pb::MessageParser<PokemonFortProto> _parser = new pb::MessageParser<PokemonFortProto>(() => new PokemonFortProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PokemonFortProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonFortProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonFortProto(PokemonFortProto other) : this() {
      fortId_ = other.fortId_;
      lastModifiedMs_ = other.lastModifiedMs_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      team_ = other.team_;
      guardPokemonId_ = other.guardPokemonId_;
      guardPokemonLevel_ = other.guardPokemonLevel_;
      enabled_ = other.enabled_;
      fortType_ = other.fortType_;
      gymPoints_ = other.gymPoints_;
      isInBattle_ = other.isInBattle_;
      activeFortModifier_ = other.activeFortModifier_.Clone();
      ActivePokemon = other.activePokemon_ != null ? other.ActivePokemon.Clone() : null;
      cooldownCompleteMs_ = other.cooldownCompleteMs_;
      sponsor_ = other.sponsor_;
      renderingType_ = other.renderingType_;
      deployLockoutEndMs_ = other.deployLockoutEndMs_;
      GuardPokemonDisplay = other.guardPokemonDisplay_ != null ? other.GuardPokemonDisplay.Clone() : null;
      closed_ = other.closed_;
      RaidInfo = other.raidInfo_ != null ? other.RaidInfo.Clone() : null;
      GymDisplay = other.gymDisplay_ != null ? other.GymDisplay.Clone() : null;
      visited_ = other.visited_;
      sameTeamDeployLockoutEndMs_ = other.sameTeamDeployLockoutEndMs_;
      allowCheckin_ = other.allowCheckin_;
      imageUrl_ = other.imageUrl_;
      inEvent_ = other.inEvent_;
      bannerUrl_ = other.bannerUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonFortProto Clone() {
      return new PokemonFortProto(this);
    }

    /// <summary>Field number for the "fort_id" field.</summary>
    public const int FortIdFieldNumber = 1;
    private string fortId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FortId {
      get { return fortId_; }
      set {
        fortId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_modified_ms" field.</summary>
    public const int LastModifiedMsFieldNumber = 2;
    private long lastModifiedMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastModifiedMs {
      get { return lastModifiedMs_; }
      set {
        lastModifiedMs_ = value;
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 3;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 4;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 5;
    private int team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "guard_pokemon_id" field.</summary>
    public const int GuardPokemonIdFieldNumber = 6;
    private int guardPokemonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuardPokemonId {
      get { return guardPokemonId_; }
      set {
        guardPokemonId_ = value;
      }
    }

    /// <summary>Field number for the "guard_pokemon_level" field.</summary>
    public const int GuardPokemonLevelFieldNumber = 7;
    private int guardPokemonLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuardPokemonLevel {
      get { return guardPokemonLevel_; }
      set {
        guardPokemonLevel_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 8;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "fort_type" field.</summary>
    public const int FortTypeFieldNumber = 9;
    private global::POGOProtos.Networking.Responses.PokemonFortProto.Types.FortType fortType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PokemonFortProto.Types.FortType FortType {
      get { return fortType_; }
      set {
        fortType_ = value;
      }
    }

    /// <summary>Field number for the "gym_points" field.</summary>
    public const int GymPointsFieldNumber = 10;
    private long gymPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GymPoints {
      get { return gymPoints_; }
      set {
        gymPoints_ = value;
      }
    }

    /// <summary>Field number for the "is_in_battle" field.</summary>
    public const int IsInBattleFieldNumber = 11;
    private bool isInBattle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInBattle {
      get { return isInBattle_; }
      set {
        isInBattle_ = value;
      }
    }

    /// <summary>Field number for the "active_fort_modifier" field.</summary>
    public const int ActiveFortModifierFieldNumber = 12;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Responses.Item> _repeated_activeFortModifier_codec
        = pb::FieldCodec.ForEnum(98, x => (int) x, x => (global::POGOProtos.Networking.Responses.Item) x);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Responses.Item> activeFortModifier_ = new pbc::RepeatedField<global::POGOProtos.Networking.Responses.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Responses.Item> ActiveFortModifier {
      get { return activeFortModifier_; }
    }

    /// <summary>Field number for the "active_pokemon" field.</summary>
    public const int ActivePokemonFieldNumber = 13;
    private global::POGOProtos.Networking.Responses.MapPokemonProto activePokemon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.MapPokemonProto ActivePokemon {
      get { return activePokemon_; }
      set {
        activePokemon_ = value;
      }
    }

    /// <summary>Field number for the "cooldown_complete_ms" field.</summary>
    public const int CooldownCompleteMsFieldNumber = 14;
    private long cooldownCompleteMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CooldownCompleteMs {
      get { return cooldownCompleteMs_; }
      set {
        cooldownCompleteMs_ = value;
      }
    }

    /// <summary>Field number for the "sponsor" field.</summary>
    public const int SponsorFieldNumber = 15;
    private global::POGOProtos.Networking.Responses.PokemonFortProto.Types.Sponsor sponsor_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PokemonFortProto.Types.Sponsor Sponsor {
      get { return sponsor_; }
      set {
        sponsor_ = value;
      }
    }

    /// <summary>Field number for the "rendering_type" field.</summary>
    public const int RenderingTypeFieldNumber = 16;
    private global::POGOProtos.Networking.Responses.PokemonFortProto.Types.RenderingType renderingType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PokemonFortProto.Types.RenderingType RenderingType {
      get { return renderingType_; }
      set {
        renderingType_ = value;
      }
    }

    /// <summary>Field number for the "deploy_lockout_end_ms" field.</summary>
    public const int DeployLockoutEndMsFieldNumber = 17;
    private long deployLockoutEndMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeployLockoutEndMs {
      get { return deployLockoutEndMs_; }
      set {
        deployLockoutEndMs_ = value;
      }
    }

    /// <summary>Field number for the "guard_pokemon_display" field.</summary>
    public const int GuardPokemonDisplayFieldNumber = 18;
    private global::POGOProtos.Networking.Responses.PokemonDisplayProto guardPokemonDisplay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PokemonDisplayProto GuardPokemonDisplay {
      get { return guardPokemonDisplay_; }
      set {
        guardPokemonDisplay_ = value;
      }
    }

    /// <summary>Field number for the "closed" field.</summary>
    public const int ClosedFieldNumber = 19;
    private bool closed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Closed {
      get { return closed_; }
      set {
        closed_ = value;
      }
    }

    /// <summary>Field number for the "raid_info" field.</summary>
    public const int RaidInfoFieldNumber = 20;
    private global::POGOProtos.Networking.Responses.RaidInfoProto raidInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.RaidInfoProto RaidInfo {
      get { return raidInfo_; }
      set {
        raidInfo_ = value;
      }
    }

    /// <summary>Field number for the "gym_display" field.</summary>
    public const int GymDisplayFieldNumber = 21;
    private global::POGOProtos.Networking.Responses.GymDisplayProto gymDisplay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.GymDisplayProto GymDisplay {
      get { return gymDisplay_; }
      set {
        gymDisplay_ = value;
      }
    }

    /// <summary>Field number for the "visited" field.</summary>
    public const int VisitedFieldNumber = 22;
    private bool visited_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Visited {
      get { return visited_; }
      set {
        visited_ = value;
      }
    }

    /// <summary>Field number for the "same_team_deploy_lockout_end_ms" field.</summary>
    public const int SameTeamDeployLockoutEndMsFieldNumber = 23;
    private long sameTeamDeployLockoutEndMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SameTeamDeployLockoutEndMs {
      get { return sameTeamDeployLockoutEndMs_; }
      set {
        sameTeamDeployLockoutEndMs_ = value;
      }
    }

    /// <summary>Field number for the "allow_checkin" field.</summary>
    public const int AllowCheckinFieldNumber = 24;
    private bool allowCheckin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowCheckin {
      get { return allowCheckin_; }
      set {
        allowCheckin_ = value;
      }
    }

    /// <summary>Field number for the "image_url" field.</summary>
    public const int ImageUrlFieldNumber = 25;
    private string imageUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUrl {
      get { return imageUrl_; }
      set {
        imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "in_event" field.</summary>
    public const int InEventFieldNumber = 26;
    private bool inEvent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InEvent {
      get { return inEvent_; }
      set {
        inEvent_ = value;
      }
    }

    /// <summary>Field number for the "banner_url" field.</summary>
    public const int BannerUrlFieldNumber = 27;
    private string bannerUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BannerUrl {
      get { return bannerUrl_; }
      set {
        bannerUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PokemonFortProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PokemonFortProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FortId != other.FortId) return false;
      if (LastModifiedMs != other.LastModifiedMs) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (Team != other.Team) return false;
      if (GuardPokemonId != other.GuardPokemonId) return false;
      if (GuardPokemonLevel != other.GuardPokemonLevel) return false;
      if (Enabled != other.Enabled) return false;
      if (FortType != other.FortType) return false;
      if (GymPoints != other.GymPoints) return false;
      if (IsInBattle != other.IsInBattle) return false;
      if(!activeFortModifier_.Equals(other.activeFortModifier_)) return false;
      if (!object.Equals(ActivePokemon, other.ActivePokemon)) return false;
      if (CooldownCompleteMs != other.CooldownCompleteMs) return false;
      if (Sponsor != other.Sponsor) return false;
      if (RenderingType != other.RenderingType) return false;
      if (DeployLockoutEndMs != other.DeployLockoutEndMs) return false;
      if (!object.Equals(GuardPokemonDisplay, other.GuardPokemonDisplay)) return false;
      if (Closed != other.Closed) return false;
      if (!object.Equals(RaidInfo, other.RaidInfo)) return false;
      if (!object.Equals(GymDisplay, other.GymDisplay)) return false;
      if (Visited != other.Visited) return false;
      if (SameTeamDeployLockoutEndMs != other.SameTeamDeployLockoutEndMs) return false;
      if (AllowCheckin != other.AllowCheckin) return false;
      if (ImageUrl != other.ImageUrl) return false;
      if (InEvent != other.InEvent) return false;
      if (BannerUrl != other.BannerUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FortId.Length != 0) hash ^= FortId.GetHashCode();
      if (LastModifiedMs != 0L) hash ^= LastModifiedMs.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      if (Team != 0) hash ^= Team.GetHashCode();
      if (GuardPokemonId != 0) hash ^= GuardPokemonId.GetHashCode();
      if (GuardPokemonLevel != 0) hash ^= GuardPokemonLevel.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (FortType != 0) hash ^= FortType.GetHashCode();
      if (GymPoints != 0L) hash ^= GymPoints.GetHashCode();
      if (IsInBattle != false) hash ^= IsInBattle.GetHashCode();
      hash ^= activeFortModifier_.GetHashCode();
      if (activePokemon_ != null) hash ^= ActivePokemon.GetHashCode();
      if (CooldownCompleteMs != 0L) hash ^= CooldownCompleteMs.GetHashCode();
      if (Sponsor != 0) hash ^= Sponsor.GetHashCode();
      if (RenderingType != 0) hash ^= RenderingType.GetHashCode();
      if (DeployLockoutEndMs != 0L) hash ^= DeployLockoutEndMs.GetHashCode();
      if (guardPokemonDisplay_ != null) hash ^= GuardPokemonDisplay.GetHashCode();
      if (Closed != false) hash ^= Closed.GetHashCode();
      if (raidInfo_ != null) hash ^= RaidInfo.GetHashCode();
      if (gymDisplay_ != null) hash ^= GymDisplay.GetHashCode();
      if (Visited != false) hash ^= Visited.GetHashCode();
      if (SameTeamDeployLockoutEndMs != 0L) hash ^= SameTeamDeployLockoutEndMs.GetHashCode();
      if (AllowCheckin != false) hash ^= AllowCheckin.GetHashCode();
      if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
      if (InEvent != false) hash ^= InEvent.GetHashCode();
      if (BannerUrl.Length != 0) hash ^= BannerUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FortId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FortId);
      }
      if (LastModifiedMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastModifiedMs);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Longitude);
      }
      if (Team != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Team);
      }
      if (GuardPokemonId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GuardPokemonId);
      }
      if (GuardPokemonLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GuardPokemonLevel);
      }
      if (Enabled != false) {
        output.WriteRawTag(64);
        output.WriteBool(Enabled);
      }
      if (FortType != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) FortType);
      }
      if (GymPoints != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(GymPoints);
      }
      if (IsInBattle != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsInBattle);
      }
      activeFortModifier_.WriteTo(output, _repeated_activeFortModifier_codec);
      if (activePokemon_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(ActivePokemon);
      }
      if (CooldownCompleteMs != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(CooldownCompleteMs);
      }
      if (Sponsor != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Sponsor);
      }
      if (RenderingType != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) RenderingType);
      }
      if (DeployLockoutEndMs != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(DeployLockoutEndMs);
      }
      if (guardPokemonDisplay_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(GuardPokemonDisplay);
      }
      if (Closed != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(Closed);
      }
      if (raidInfo_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(RaidInfo);
      }
      if (gymDisplay_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(GymDisplay);
      }
      if (Visited != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(Visited);
      }
      if (SameTeamDeployLockoutEndMs != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(SameTeamDeployLockoutEndMs);
      }
      if (AllowCheckin != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(AllowCheckin);
      }
      if (ImageUrl.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(ImageUrl);
      }
      if (InEvent != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(InEvent);
      }
      if (BannerUrl.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(BannerUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FortId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FortId);
      }
      if (LastModifiedMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastModifiedMs);
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
      }
      if (GuardPokemonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuardPokemonId);
      }
      if (GuardPokemonLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuardPokemonLevel);
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (FortType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FortType);
      }
      if (GymPoints != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GymPoints);
      }
      if (IsInBattle != false) {
        size += 1 + 1;
      }
      size += activeFortModifier_.CalculateSize(_repeated_activeFortModifier_codec);
      if (activePokemon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActivePokemon);
      }
      if (CooldownCompleteMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CooldownCompleteMs);
      }
      if (Sponsor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Sponsor);
      }
      if (RenderingType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RenderingType);
      }
      if (DeployLockoutEndMs != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DeployLockoutEndMs);
      }
      if (guardPokemonDisplay_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GuardPokemonDisplay);
      }
      if (Closed != false) {
        size += 2 + 1;
      }
      if (raidInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RaidInfo);
      }
      if (gymDisplay_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GymDisplay);
      }
      if (Visited != false) {
        size += 2 + 1;
      }
      if (SameTeamDeployLockoutEndMs != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SameTeamDeployLockoutEndMs);
      }
      if (AllowCheckin != false) {
        size += 2 + 1;
      }
      if (ImageUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
      }
      if (InEvent != false) {
        size += 2 + 1;
      }
      if (BannerUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BannerUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PokemonFortProto other) {
      if (other == null) {
        return;
      }
      if (other.FortId.Length != 0) {
        FortId = other.FortId;
      }
      if (other.LastModifiedMs != 0L) {
        LastModifiedMs = other.LastModifiedMs;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      if (other.GuardPokemonId != 0) {
        GuardPokemonId = other.GuardPokemonId;
      }
      if (other.GuardPokemonLevel != 0) {
        GuardPokemonLevel = other.GuardPokemonLevel;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.FortType != 0) {
        FortType = other.FortType;
      }
      if (other.GymPoints != 0L) {
        GymPoints = other.GymPoints;
      }
      if (other.IsInBattle != false) {
        IsInBattle = other.IsInBattle;
      }
      activeFortModifier_.Add(other.activeFortModifier_);
      if (other.activePokemon_ != null) {
        if (activePokemon_ == null) {
          activePokemon_ = new global::POGOProtos.Networking.Responses.MapPokemonProto();
        }
        ActivePokemon.MergeFrom(other.ActivePokemon);
      }
      if (other.CooldownCompleteMs != 0L) {
        CooldownCompleteMs = other.CooldownCompleteMs;
      }
      if (other.Sponsor != 0) {
        Sponsor = other.Sponsor;
      }
      if (other.RenderingType != 0) {
        RenderingType = other.RenderingType;
      }
      if (other.DeployLockoutEndMs != 0L) {
        DeployLockoutEndMs = other.DeployLockoutEndMs;
      }
      if (other.guardPokemonDisplay_ != null) {
        if (guardPokemonDisplay_ == null) {
          guardPokemonDisplay_ = new global::POGOProtos.Networking.Responses.PokemonDisplayProto();
        }
        GuardPokemonDisplay.MergeFrom(other.GuardPokemonDisplay);
      }
      if (other.Closed != false) {
        Closed = other.Closed;
      }
      if (other.raidInfo_ != null) {
        if (raidInfo_ == null) {
          raidInfo_ = new global::POGOProtos.Networking.Responses.RaidInfoProto();
        }
        RaidInfo.MergeFrom(other.RaidInfo);
      }
      if (other.gymDisplay_ != null) {
        if (gymDisplay_ == null) {
          gymDisplay_ = new global::POGOProtos.Networking.Responses.GymDisplayProto();
        }
        GymDisplay.MergeFrom(other.GymDisplay);
      }
      if (other.Visited != false) {
        Visited = other.Visited;
      }
      if (other.SameTeamDeployLockoutEndMs != 0L) {
        SameTeamDeployLockoutEndMs = other.SameTeamDeployLockoutEndMs;
      }
      if (other.AllowCheckin != false) {
        AllowCheckin = other.AllowCheckin;
      }
      if (other.ImageUrl.Length != 0) {
        ImageUrl = other.ImageUrl;
      }
      if (other.InEvent != false) {
        InEvent = other.InEvent;
      }
      if (other.BannerUrl.Length != 0) {
        BannerUrl = other.BannerUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FortId = input.ReadString();
            break;
          }
          case 16: {
            LastModifiedMs = input.ReadInt64();
            break;
          }
          case 25: {
            Latitude = input.ReadDouble();
            break;
          }
          case 33: {
            Longitude = input.ReadDouble();
            break;
          }
          case 40: {
            Team = input.ReadInt32();
            break;
          }
          case 48: {
            GuardPokemonId = input.ReadInt32();
            break;
          }
          case 56: {
            GuardPokemonLevel = input.ReadInt32();
            break;
          }
          case 64: {
            Enabled = input.ReadBool();
            break;
          }
          case 72: {
            fortType_ = (global::POGOProtos.Networking.Responses.PokemonFortProto.Types.FortType) input.ReadEnum();
            break;
          }
          case 80: {
            GymPoints = input.ReadInt64();
            break;
          }
          case 88: {
            IsInBattle = input.ReadBool();
            break;
          }
          case 98:
          case 96: {
            activeFortModifier_.AddEntriesFrom(input, _repeated_activeFortModifier_codec);
            break;
          }
          case 106: {
            if (activePokemon_ == null) {
              activePokemon_ = new global::POGOProtos.Networking.Responses.MapPokemonProto();
            }
            input.ReadMessage(activePokemon_);
            break;
          }
          case 112: {
            CooldownCompleteMs = input.ReadInt64();
            break;
          }
          case 120: {
            sponsor_ = (global::POGOProtos.Networking.Responses.PokemonFortProto.Types.Sponsor) input.ReadEnum();
            break;
          }
          case 128: {
            renderingType_ = (global::POGOProtos.Networking.Responses.PokemonFortProto.Types.RenderingType) input.ReadEnum();
            break;
          }
          case 136: {
            DeployLockoutEndMs = input.ReadInt64();
            break;
          }
          case 146: {
            if (guardPokemonDisplay_ == null) {
              guardPokemonDisplay_ = new global::POGOProtos.Networking.Responses.PokemonDisplayProto();
            }
            input.ReadMessage(guardPokemonDisplay_);
            break;
          }
          case 152: {
            Closed = input.ReadBool();
            break;
          }
          case 162: {
            if (raidInfo_ == null) {
              raidInfo_ = new global::POGOProtos.Networking.Responses.RaidInfoProto();
            }
            input.ReadMessage(raidInfo_);
            break;
          }
          case 170: {
            if (gymDisplay_ == null) {
              gymDisplay_ = new global::POGOProtos.Networking.Responses.GymDisplayProto();
            }
            input.ReadMessage(gymDisplay_);
            break;
          }
          case 176: {
            Visited = input.ReadBool();
            break;
          }
          case 184: {
            SameTeamDeployLockoutEndMs = input.ReadInt64();
            break;
          }
          case 192: {
            AllowCheckin = input.ReadBool();
            break;
          }
          case 202: {
            ImageUrl = input.ReadString();
            break;
          }
          case 208: {
            InEvent = input.ReadBool();
            break;
          }
          case 218: {
            BannerUrl = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PokemonFortProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Sponsor {
        [pbr::OriginalName("UNSET")] Unset = 0,
        [pbr::OriginalName("MCDONALDS")] Mcdonalds = 1,
        [pbr::OriginalName("POKEMON_STORE")] PokemonStore = 2,
        [pbr::OriginalName("TOHO")] Toho = 3,
        [pbr::OriginalName("SOFTBANK")] Softbank = 4,
        [pbr::OriginalName("GLOBE")] Globe = 5,
        [pbr::OriginalName("SPATULA")] Spatula = 6,
        [pbr::OriginalName("THERMOMETER")] Thermometer = 7,
        [pbr::OriginalName("KNIFE")] Knife = 8,
        [pbr::OriginalName("GRILL")] Grill = 9,
        [pbr::OriginalName("SMOKER")] Smoker = 10,
        [pbr::OriginalName("PAN")] Pan = 11,
        [pbr::OriginalName("BBQ")] Bbq = 12,
        [pbr::OriginalName("FRYER")] Fryer = 13,
        [pbr::OriginalName("STEAMER")] Steamer = 14,
        [pbr::OriginalName("HOOD")] Hood = 15,
        [pbr::OriginalName("SLOWCOOKER")] Slowcooker = 16,
        [pbr::OriginalName("MIXER")] Mixer = 17,
        [pbr::OriginalName("SCOOPER")] Scooper = 18,
        [pbr::OriginalName("MUFFINTIN")] Muffintin = 19,
        [pbr::OriginalName("SALAMANDER")] Salamander = 20,
        [pbr::OriginalName("PLANCHA")] Plancha = 21,
        [pbr::OriginalName("NIA_OPS")] NiaOps = 22,
        [pbr::OriginalName("WHISK")] Whisk = 23,
      }

      public enum RenderingType {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("INTERNAL_TEST")] InternalTest = 1,
      }

      public enum FortType {
        [pbr::OriginalName("GYM")] Gym = 0,
        [pbr::OriginalName("CHECKPOINT")] Checkpoint = 1,
      }

    }
    #endregion

  }

  public sealed partial class GymMembershipProto : pb::IMessage<GymMembershipProto> {
    private static readonly pb::MessageParser<GymMembershipProto> _parser = new pb::MessageParser<GymMembershipProto>(() => new GymMembershipProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GymMembershipProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymMembershipProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymMembershipProto(GymMembershipProto other) : this() {
      Pokemon = other.pokemon_ != null ? other.Pokemon.Clone() : null;
      TrainerPublicProfile = other.trainerPublicProfile_ != null ? other.TrainerPublicProfile.Clone() : null;
      TrainingPokemon = other.trainingPokemon_ != null ? other.TrainingPokemon.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymMembershipProto Clone() {
      return new GymMembershipProto(this);
    }

    /// <summary>Field number for the "pokemon" field.</summary>
    public const int PokemonFieldNumber = 1;
    private global::POGOProtos.Networking.Responses.PokemonProto pokemon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PokemonProto Pokemon {
      get { return pokemon_; }
      set {
        pokemon_ = value;
      }
    }

    /// <summary>Field number for the "trainer_public_profile" field.</summary>
    public const int TrainerPublicProfileFieldNumber = 2;
    private global::POGOProtos.Networking.Responses.PlayerPublicProfileProto trainerPublicProfile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PlayerPublicProfileProto TrainerPublicProfile {
      get { return trainerPublicProfile_; }
      set {
        trainerPublicProfile_ = value;
      }
    }

    /// <summary>Field number for the "training_pokemon" field.</summary>
    public const int TrainingPokemonFieldNumber = 3;
    private global::POGOProtos.Networking.Responses.PokemonProto trainingPokemon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PokemonProto TrainingPokemon {
      get { return trainingPokemon_; }
      set {
        trainingPokemon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GymMembershipProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GymMembershipProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pokemon, other.Pokemon)) return false;
      if (!object.Equals(TrainerPublicProfile, other.TrainerPublicProfile)) return false;
      if (!object.Equals(TrainingPokemon, other.TrainingPokemon)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pokemon_ != null) hash ^= Pokemon.GetHashCode();
      if (trainerPublicProfile_ != null) hash ^= TrainerPublicProfile.GetHashCode();
      if (trainingPokemon_ != null) hash ^= TrainingPokemon.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pokemon_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pokemon);
      }
      if (trainerPublicProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TrainerPublicProfile);
      }
      if (trainingPokemon_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TrainingPokemon);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pokemon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pokemon);
      }
      if (trainerPublicProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrainerPublicProfile);
      }
      if (trainingPokemon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrainingPokemon);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GymMembershipProto other) {
      if (other == null) {
        return;
      }
      if (other.pokemon_ != null) {
        if (pokemon_ == null) {
          pokemon_ = new global::POGOProtos.Networking.Responses.PokemonProto();
        }
        Pokemon.MergeFrom(other.Pokemon);
      }
      if (other.trainerPublicProfile_ != null) {
        if (trainerPublicProfile_ == null) {
          trainerPublicProfile_ = new global::POGOProtos.Networking.Responses.PlayerPublicProfileProto();
        }
        TrainerPublicProfile.MergeFrom(other.TrainerPublicProfile);
      }
      if (other.trainingPokemon_ != null) {
        if (trainingPokemon_ == null) {
          trainingPokemon_ = new global::POGOProtos.Networking.Responses.PokemonProto();
        }
        TrainingPokemon.MergeFrom(other.TrainingPokemon);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pokemon_ == null) {
              pokemon_ = new global::POGOProtos.Networking.Responses.PokemonProto();
            }
            input.ReadMessage(pokemon_);
            break;
          }
          case 18: {
            if (trainerPublicProfile_ == null) {
              trainerPublicProfile_ = new global::POGOProtos.Networking.Responses.PlayerPublicProfileProto();
            }
            input.ReadMessage(trainerPublicProfile_);
            break;
          }
          case 26: {
            if (trainingPokemon_ == null) {
              trainingPokemon_ = new global::POGOProtos.Networking.Responses.PokemonProto();
            }
            input.ReadMessage(trainingPokemon_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GymStateProto : pb::IMessage<GymStateProto> {
    private static readonly pb::MessageParser<GymStateProto> _parser = new pb::MessageParser<GymStateProto>(() => new GymStateProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GymStateProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymStateProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymStateProto(GymStateProto other) : this() {
      FortMapData = other.fortMapData_ != null ? other.FortMapData.Clone() : null;
      gymMembership_ = other.gymMembership_.Clone();
      deployLockout_ = other.deployLockout_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymStateProto Clone() {
      return new GymStateProto(this);
    }

    /// <summary>Field number for the "fort_map_data" field.</summary>
    public const int FortMapDataFieldNumber = 1;
    private global::POGOProtos.Networking.Responses.PokemonFortProto fortMapData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PokemonFortProto FortMapData {
      get { return fortMapData_; }
      set {
        fortMapData_ = value;
      }
    }

    /// <summary>Field number for the "gym_membership" field.</summary>
    public const int GymMembershipFieldNumber = 2;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Responses.GymMembershipProto> _repeated_gymMembership_codec
        = pb::FieldCodec.ForMessage(18, global::POGOProtos.Networking.Responses.GymMembershipProto.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Responses.GymMembershipProto> gymMembership_ = new pbc::RepeatedField<global::POGOProtos.Networking.Responses.GymMembershipProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Responses.GymMembershipProto> GymMembership {
      get { return gymMembership_; }
    }

    /// <summary>Field number for the "deploy_lockout" field.</summary>
    public const int DeployLockoutFieldNumber = 3;
    private bool deployLockout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeployLockout {
      get { return deployLockout_; }
      set {
        deployLockout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GymStateProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GymStateProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FortMapData, other.FortMapData)) return false;
      if(!gymMembership_.Equals(other.gymMembership_)) return false;
      if (DeployLockout != other.DeployLockout) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fortMapData_ != null) hash ^= FortMapData.GetHashCode();
      hash ^= gymMembership_.GetHashCode();
      if (DeployLockout != false) hash ^= DeployLockout.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fortMapData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FortMapData);
      }
      gymMembership_.WriteTo(output, _repeated_gymMembership_codec);
      if (DeployLockout != false) {
        output.WriteRawTag(24);
        output.WriteBool(DeployLockout);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fortMapData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FortMapData);
      }
      size += gymMembership_.CalculateSize(_repeated_gymMembership_codec);
      if (DeployLockout != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GymStateProto other) {
      if (other == null) {
        return;
      }
      if (other.fortMapData_ != null) {
        if (fortMapData_ == null) {
          fortMapData_ = new global::POGOProtos.Networking.Responses.PokemonFortProto();
        }
        FortMapData.MergeFrom(other.FortMapData);
      }
      gymMembership_.Add(other.gymMembership_);
      if (other.DeployLockout != false) {
        DeployLockout = other.DeployLockout;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (fortMapData_ == null) {
              fortMapData_ = new global::POGOProtos.Networking.Responses.PokemonFortProto();
            }
            input.ReadMessage(fortMapData_);
            break;
          }
          case 18: {
            gymMembership_.AddEntriesFrom(input, _repeated_gymMembership_codec);
            break;
          }
          case 24: {
            DeployLockout = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GymStatusAndDefendersProto : pb::IMessage<GymStatusAndDefendersProto> {
    private static readonly pb::MessageParser<GymStatusAndDefendersProto> _parser = new pb::MessageParser<GymStatusAndDefendersProto>(() => new GymStatusAndDefendersProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GymStatusAndDefendersProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymStatusAndDefendersProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymStatusAndDefendersProto(GymStatusAndDefendersProto other) : this() {
      PokemonFortProto = other.pokemonFortProto_ != null ? other.PokemonFortProto.Clone() : null;
      gymDefender_ = other.gymDefender_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymStatusAndDefendersProto Clone() {
      return new GymStatusAndDefendersProto(this);
    }

    /// <summary>Field number for the "pokemon_fort_proto" field.</summary>
    public const int PokemonFortProtoFieldNumber = 1;
    private global::POGOProtos.Networking.Responses.PokemonFortProto pokemonFortProto_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PokemonFortProto PokemonFortProto {
      get { return pokemonFortProto_; }
      set {
        pokemonFortProto_ = value;
      }
    }

    /// <summary>Field number for the "gym_defender" field.</summary>
    public const int GymDefenderFieldNumber = 2;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Responses.GymDefenderProto> _repeated_gymDefender_codec
        = pb::FieldCodec.ForMessage(18, global::POGOProtos.Networking.Responses.GymDefenderProto.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Responses.GymDefenderProto> gymDefender_ = new pbc::RepeatedField<global::POGOProtos.Networking.Responses.GymDefenderProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Responses.GymDefenderProto> GymDefender {
      get { return gymDefender_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GymStatusAndDefendersProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GymStatusAndDefendersProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PokemonFortProto, other.PokemonFortProto)) return false;
      if(!gymDefender_.Equals(other.gymDefender_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pokemonFortProto_ != null) hash ^= PokemonFortProto.GetHashCode();
      hash ^= gymDefender_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pokemonFortProto_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PokemonFortProto);
      }
      gymDefender_.WriteTo(output, _repeated_gymDefender_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pokemonFortProto_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PokemonFortProto);
      }
      size += gymDefender_.CalculateSize(_repeated_gymDefender_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GymStatusAndDefendersProto other) {
      if (other == null) {
        return;
      }
      if (other.pokemonFortProto_ != null) {
        if (pokemonFortProto_ == null) {
          pokemonFortProto_ = new global::POGOProtos.Networking.Responses.PokemonFortProto();
        }
        PokemonFortProto.MergeFrom(other.PokemonFortProto);
      }
      gymDefender_.Add(other.gymDefender_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pokemonFortProto_ == null) {
              pokemonFortProto_ = new global::POGOProtos.Networking.Responses.PokemonFortProto();
            }
            input.ReadMessage(pokemonFortProto_);
            break;
          }
          case 18: {
            gymDefender_.AddEntriesFrom(input, _repeated_gymDefender_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeploymentTotalsProto : pb::IMessage<DeploymentTotalsProto> {
    private static readonly pb::MessageParser<DeploymentTotalsProto> _parser = new pb::MessageParser<DeploymentTotalsProto>(() => new DeploymentTotalsProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeploymentTotalsProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeploymentTotalsProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeploymentTotalsProto(DeploymentTotalsProto other) : this() {
      timesFed_ = other.timesFed_;
      battlesWon_ = other.battlesWon_;
      battlesLost_ = other.battlesLost_;
      deploymentDurationMs_ = other.deploymentDurationMs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeploymentTotalsProto Clone() {
      return new DeploymentTotalsProto(this);
    }

    /// <summary>Field number for the "times_fed" field.</summary>
    public const int TimesFedFieldNumber = 1;
    private int timesFed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimesFed {
      get { return timesFed_; }
      set {
        timesFed_ = value;
      }
    }

    /// <summary>Field number for the "battles_won" field.</summary>
    public const int BattlesWonFieldNumber = 2;
    private int battlesWon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattlesWon {
      get { return battlesWon_; }
      set {
        battlesWon_ = value;
      }
    }

    /// <summary>Field number for the "battles_lost" field.</summary>
    public const int BattlesLostFieldNumber = 3;
    private int battlesLost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattlesLost {
      get { return battlesLost_; }
      set {
        battlesLost_ = value;
      }
    }

    /// <summary>Field number for the "deployment_duration_ms" field.</summary>
    public const int DeploymentDurationMsFieldNumber = 4;
    private long deploymentDurationMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeploymentDurationMs {
      get { return deploymentDurationMs_; }
      set {
        deploymentDurationMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeploymentTotalsProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeploymentTotalsProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimesFed != other.TimesFed) return false;
      if (BattlesWon != other.BattlesWon) return false;
      if (BattlesLost != other.BattlesLost) return false;
      if (DeploymentDurationMs != other.DeploymentDurationMs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimesFed != 0) hash ^= TimesFed.GetHashCode();
      if (BattlesWon != 0) hash ^= BattlesWon.GetHashCode();
      if (BattlesLost != 0) hash ^= BattlesLost.GetHashCode();
      if (DeploymentDurationMs != 0L) hash ^= DeploymentDurationMs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimesFed != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TimesFed);
      }
      if (BattlesWon != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BattlesWon);
      }
      if (BattlesLost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BattlesLost);
      }
      if (DeploymentDurationMs != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(DeploymentDurationMs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimesFed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimesFed);
      }
      if (BattlesWon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattlesWon);
      }
      if (BattlesLost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattlesLost);
      }
      if (DeploymentDurationMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeploymentDurationMs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeploymentTotalsProto other) {
      if (other == null) {
        return;
      }
      if (other.TimesFed != 0) {
        TimesFed = other.TimesFed;
      }
      if (other.BattlesWon != 0) {
        BattlesWon = other.BattlesWon;
      }
      if (other.BattlesLost != 0) {
        BattlesLost = other.BattlesLost;
      }
      if (other.DeploymentDurationMs != 0L) {
        DeploymentDurationMs = other.DeploymentDurationMs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimesFed = input.ReadInt32();
            break;
          }
          case 16: {
            BattlesWon = input.ReadInt32();
            break;
          }
          case 24: {
            BattlesLost = input.ReadInt32();
            break;
          }
          case 32: {
            DeploymentDurationMs = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GymDefenderProto : pb::IMessage<GymDefenderProto> {
    private static readonly pb::MessageParser<GymDefenderProto> _parser = new pb::MessageParser<GymDefenderProto>(() => new GymDefenderProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GymDefenderProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymDefenderProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymDefenderProto(GymDefenderProto other) : this() {
      MotivatedPokemon = other.motivatedPokemon_ != null ? other.MotivatedPokemon.Clone() : null;
      DeploymentTotals = other.deploymentTotals_ != null ? other.DeploymentTotals.Clone() : null;
      TrainerPublicProfile = other.trainerPublicProfile_ != null ? other.TrainerPublicProfile.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymDefenderProto Clone() {
      return new GymDefenderProto(this);
    }

    /// <summary>Field number for the "motivated_pokemon" field.</summary>
    public const int MotivatedPokemonFieldNumber = 1;
    private global::POGOProtos.Networking.Responses.MotivatedPokemonProto motivatedPokemon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.MotivatedPokemonProto MotivatedPokemon {
      get { return motivatedPokemon_; }
      set {
        motivatedPokemon_ = value;
      }
    }

    /// <summary>Field number for the "deployment_totals" field.</summary>
    public const int DeploymentTotalsFieldNumber = 2;
    private global::POGOProtos.Networking.Responses.DeploymentTotalsProto deploymentTotals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.DeploymentTotalsProto DeploymentTotals {
      get { return deploymentTotals_; }
      set {
        deploymentTotals_ = value;
      }
    }

    /// <summary>Field number for the "trainer_public_profile" field.</summary>
    public const int TrainerPublicProfileFieldNumber = 3;
    private global::POGOProtos.Networking.Responses.PlayerPublicProfileProto trainerPublicProfile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PlayerPublicProfileProto TrainerPublicProfile {
      get { return trainerPublicProfile_; }
      set {
        trainerPublicProfile_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GymDefenderProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GymDefenderProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MotivatedPokemon, other.MotivatedPokemon)) return false;
      if (!object.Equals(DeploymentTotals, other.DeploymentTotals)) return false;
      if (!object.Equals(TrainerPublicProfile, other.TrainerPublicProfile)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (motivatedPokemon_ != null) hash ^= MotivatedPokemon.GetHashCode();
      if (deploymentTotals_ != null) hash ^= DeploymentTotals.GetHashCode();
      if (trainerPublicProfile_ != null) hash ^= TrainerPublicProfile.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (motivatedPokemon_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MotivatedPokemon);
      }
      if (deploymentTotals_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DeploymentTotals);
      }
      if (trainerPublicProfile_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TrainerPublicProfile);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (motivatedPokemon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MotivatedPokemon);
      }
      if (deploymentTotals_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeploymentTotals);
      }
      if (trainerPublicProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrainerPublicProfile);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GymDefenderProto other) {
      if (other == null) {
        return;
      }
      if (other.motivatedPokemon_ != null) {
        if (motivatedPokemon_ == null) {
          motivatedPokemon_ = new global::POGOProtos.Networking.Responses.MotivatedPokemonProto();
        }
        MotivatedPokemon.MergeFrom(other.MotivatedPokemon);
      }
      if (other.deploymentTotals_ != null) {
        if (deploymentTotals_ == null) {
          deploymentTotals_ = new global::POGOProtos.Networking.Responses.DeploymentTotalsProto();
        }
        DeploymentTotals.MergeFrom(other.DeploymentTotals);
      }
      if (other.trainerPublicProfile_ != null) {
        if (trainerPublicProfile_ == null) {
          trainerPublicProfile_ = new global::POGOProtos.Networking.Responses.PlayerPublicProfileProto();
        }
        TrainerPublicProfile.MergeFrom(other.TrainerPublicProfile);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (motivatedPokemon_ == null) {
              motivatedPokemon_ = new global::POGOProtos.Networking.Responses.MotivatedPokemonProto();
            }
            input.ReadMessage(motivatedPokemon_);
            break;
          }
          case 18: {
            if (deploymentTotals_ == null) {
              deploymentTotals_ = new global::POGOProtos.Networking.Responses.DeploymentTotalsProto();
            }
            input.ReadMessage(deploymentTotals_);
            break;
          }
          case 26: {
            if (trainerPublicProfile_ == null) {
              trainerPublicProfile_ = new global::POGOProtos.Networking.Responses.PlayerPublicProfileProto();
            }
            input.ReadMessage(trainerPublicProfile_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MotivatedPokemonProto : pb::IMessage<MotivatedPokemonProto> {
    private static readonly pb::MessageParser<MotivatedPokemonProto> _parser = new pb::MessageParser<MotivatedPokemonProto>(() => new MotivatedPokemonProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MotivatedPokemonProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MotivatedPokemonProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MotivatedPokemonProto(MotivatedPokemonProto other) : this() {
      Pokemon = other.pokemon_ != null ? other.Pokemon.Clone() : null;
      deployMs_ = other.deployMs_;
      cpWhenDeployed_ = other.cpWhenDeployed_;
      motivationNow_ = other.motivationNow_;
      cpNow_ = other.cpNow_;
      berryValue_ = other.berryValue_;
      feedCooldownDurationMillis_ = other.feedCooldownDurationMillis_;
      foodValue_ = other.foodValue_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MotivatedPokemonProto Clone() {
      return new MotivatedPokemonProto(this);
    }

    /// <summary>Field number for the "pokemon" field.</summary>
    public const int PokemonFieldNumber = 1;
    private global::POGOProtos.Networking.Responses.PokemonProto pokemon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PokemonProto Pokemon {
      get { return pokemon_; }
      set {
        pokemon_ = value;
      }
    }

    /// <summary>Field number for the "deploy_ms" field.</summary>
    public const int DeployMsFieldNumber = 2;
    private long deployMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeployMs {
      get { return deployMs_; }
      set {
        deployMs_ = value;
      }
    }

    /// <summary>Field number for the "cp_when_deployed" field.</summary>
    public const int CpWhenDeployedFieldNumber = 3;
    private int cpWhenDeployed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CpWhenDeployed {
      get { return cpWhenDeployed_; }
      set {
        cpWhenDeployed_ = value;
      }
    }

    /// <summary>Field number for the "motivation_now" field.</summary>
    public const int MotivationNowFieldNumber = 4;
    private double motivationNow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MotivationNow {
      get { return motivationNow_; }
      set {
        motivationNow_ = value;
      }
    }

    /// <summary>Field number for the "cp_now" field.</summary>
    public const int CpNowFieldNumber = 5;
    private int cpNow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CpNow {
      get { return cpNow_; }
      set {
        cpNow_ = value;
      }
    }

    /// <summary>Field number for the "berry_value" field.</summary>
    public const int BerryValueFieldNumber = 6;
    private float berryValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BerryValue {
      get { return berryValue_; }
      set {
        berryValue_ = value;
      }
    }

    /// <summary>Field number for the "feed_cooldown_duration_millis" field.</summary>
    public const int FeedCooldownDurationMillisFieldNumber = 7;
    private long feedCooldownDurationMillis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeedCooldownDurationMillis {
      get { return feedCooldownDurationMillis_; }
      set {
        feedCooldownDurationMillis_ = value;
      }
    }

    /// <summary>Field number for the "food_value" field.</summary>
    public const int FoodValueFieldNumber = 8;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Responses.FoodValue> _repeated_foodValue_codec
        = pb::FieldCodec.ForMessage(66, global::POGOProtos.Networking.Responses.FoodValue.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Responses.FoodValue> foodValue_ = new pbc::RepeatedField<global::POGOProtos.Networking.Responses.FoodValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Responses.FoodValue> FoodValue {
      get { return foodValue_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MotivatedPokemonProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MotivatedPokemonProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pokemon, other.Pokemon)) return false;
      if (DeployMs != other.DeployMs) return false;
      if (CpWhenDeployed != other.CpWhenDeployed) return false;
      if (MotivationNow != other.MotivationNow) return false;
      if (CpNow != other.CpNow) return false;
      if (BerryValue != other.BerryValue) return false;
      if (FeedCooldownDurationMillis != other.FeedCooldownDurationMillis) return false;
      if(!foodValue_.Equals(other.foodValue_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pokemon_ != null) hash ^= Pokemon.GetHashCode();
      if (DeployMs != 0L) hash ^= DeployMs.GetHashCode();
      if (CpWhenDeployed != 0) hash ^= CpWhenDeployed.GetHashCode();
      if (MotivationNow != 0D) hash ^= MotivationNow.GetHashCode();
      if (CpNow != 0) hash ^= CpNow.GetHashCode();
      if (BerryValue != 0F) hash ^= BerryValue.GetHashCode();
      if (FeedCooldownDurationMillis != 0L) hash ^= FeedCooldownDurationMillis.GetHashCode();
      hash ^= foodValue_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pokemon_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pokemon);
      }
      if (DeployMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DeployMs);
      }
      if (CpWhenDeployed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CpWhenDeployed);
      }
      if (MotivationNow != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(MotivationNow);
      }
      if (CpNow != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CpNow);
      }
      if (BerryValue != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(BerryValue);
      }
      if (FeedCooldownDurationMillis != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(FeedCooldownDurationMillis);
      }
      foodValue_.WriteTo(output, _repeated_foodValue_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pokemon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pokemon);
      }
      if (DeployMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeployMs);
      }
      if (CpWhenDeployed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CpWhenDeployed);
      }
      if (MotivationNow != 0D) {
        size += 1 + 8;
      }
      if (CpNow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CpNow);
      }
      if (BerryValue != 0F) {
        size += 1 + 4;
      }
      if (FeedCooldownDurationMillis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeedCooldownDurationMillis);
      }
      size += foodValue_.CalculateSize(_repeated_foodValue_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MotivatedPokemonProto other) {
      if (other == null) {
        return;
      }
      if (other.pokemon_ != null) {
        if (pokemon_ == null) {
          pokemon_ = new global::POGOProtos.Networking.Responses.PokemonProto();
        }
        Pokemon.MergeFrom(other.Pokemon);
      }
      if (other.DeployMs != 0L) {
        DeployMs = other.DeployMs;
      }
      if (other.CpWhenDeployed != 0) {
        CpWhenDeployed = other.CpWhenDeployed;
      }
      if (other.MotivationNow != 0D) {
        MotivationNow = other.MotivationNow;
      }
      if (other.CpNow != 0) {
        CpNow = other.CpNow;
      }
      if (other.BerryValue != 0F) {
        BerryValue = other.BerryValue;
      }
      if (other.FeedCooldownDurationMillis != 0L) {
        FeedCooldownDurationMillis = other.FeedCooldownDurationMillis;
      }
      foodValue_.Add(other.foodValue_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pokemon_ == null) {
              pokemon_ = new global::POGOProtos.Networking.Responses.PokemonProto();
            }
            input.ReadMessage(pokemon_);
            break;
          }
          case 16: {
            DeployMs = input.ReadInt64();
            break;
          }
          case 24: {
            CpWhenDeployed = input.ReadInt32();
            break;
          }
          case 33: {
            MotivationNow = input.ReadDouble();
            break;
          }
          case 40: {
            CpNow = input.ReadInt32();
            break;
          }
          case 53: {
            BerryValue = input.ReadFloat();
            break;
          }
          case 56: {
            FeedCooldownDurationMillis = input.ReadInt64();
            break;
          }
          case 66: {
            foodValue_.AddEntriesFrom(input, _repeated_foodValue_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FoodValue : pb::IMessage<FoodValue> {
    private static readonly pb::MessageParser<FoodValue> _parser = new pb::MessageParser<FoodValue>(() => new FoodValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FoodValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FoodValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FoodValue(FoodValue other) : this() {
      motivationIncrease_ = other.motivationIncrease_;
      cpIncrease_ = other.cpIncrease_;
      foodItem_ = other.foodItem_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FoodValue Clone() {
      return new FoodValue(this);
    }

    /// <summary>Field number for the "motivation_increase" field.</summary>
    public const int MotivationIncreaseFieldNumber = 1;
    private float motivationIncrease_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MotivationIncrease {
      get { return motivationIncrease_; }
      set {
        motivationIncrease_ = value;
      }
    }

    /// <summary>Field number for the "cp_increase" field.</summary>
    public const int CpIncreaseFieldNumber = 2;
    private int cpIncrease_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CpIncrease {
      get { return cpIncrease_; }
      set {
        cpIncrease_ = value;
      }
    }

    /// <summary>Field number for the "food_item" field.</summary>
    public const int FoodItemFieldNumber = 3;
    private global::POGOProtos.Networking.Responses.Item foodItem_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.Item FoodItem {
      get { return foodItem_; }
      set {
        foodItem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FoodValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FoodValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MotivationIncrease != other.MotivationIncrease) return false;
      if (CpIncrease != other.CpIncrease) return false;
      if (FoodItem != other.FoodItem) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MotivationIncrease != 0F) hash ^= MotivationIncrease.GetHashCode();
      if (CpIncrease != 0) hash ^= CpIncrease.GetHashCode();
      if (FoodItem != 0) hash ^= FoodItem.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MotivationIncrease != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(MotivationIncrease);
      }
      if (CpIncrease != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CpIncrease);
      }
      if (FoodItem != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) FoodItem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MotivationIncrease != 0F) {
        size += 1 + 4;
      }
      if (CpIncrease != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CpIncrease);
      }
      if (FoodItem != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FoodItem);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FoodValue other) {
      if (other == null) {
        return;
      }
      if (other.MotivationIncrease != 0F) {
        MotivationIncrease = other.MotivationIncrease;
      }
      if (other.CpIncrease != 0) {
        CpIncrease = other.CpIncrease;
      }
      if (other.FoodItem != 0) {
        FoodItem = other.FoodItem;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            MotivationIncrease = input.ReadFloat();
            break;
          }
          case 16: {
            CpIncrease = input.ReadInt32();
            break;
          }
          case 24: {
            foodItem_ = (global::POGOProtos.Networking.Responses.Item) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParticipationProto : pb::IMessage<ParticipationProto> {
    private static readonly pb::MessageParser<ParticipationProto> _parser = new pb::MessageParser<ParticipationProto>(() => new ParticipationProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParticipationProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticipationProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticipationProto(ParticipationProto other) : this() {
      individualDamagePokeballs_ = other.individualDamagePokeballs_;
      teamDamagePokeballs_ = other.teamDamagePokeballs_;
      gymOwnershipPokeballs_ = other.gymOwnershipPokeballs_;
      basePokeballs_ = other.basePokeballs_;
      bluePercentage_ = other.bluePercentage_;
      redPercentage_ = other.redPercentage_;
      yellowPercentage_ = other.yellowPercentage_;
      bonusItemMultiplier_ = other.bonusItemMultiplier_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParticipationProto Clone() {
      return new ParticipationProto(this);
    }

    /// <summary>Field number for the "individual_damage_pokeballs" field.</summary>
    public const int IndividualDamagePokeballsFieldNumber = 1;
    private int individualDamagePokeballs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IndividualDamagePokeballs {
      get { return individualDamagePokeballs_; }
      set {
        individualDamagePokeballs_ = value;
      }
    }

    /// <summary>Field number for the "team_damage_pokeballs" field.</summary>
    public const int TeamDamagePokeballsFieldNumber = 2;
    private int teamDamagePokeballs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamDamagePokeballs {
      get { return teamDamagePokeballs_; }
      set {
        teamDamagePokeballs_ = value;
      }
    }

    /// <summary>Field number for the "gym_ownership_pokeballs" field.</summary>
    public const int GymOwnershipPokeballsFieldNumber = 3;
    private int gymOwnershipPokeballs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GymOwnershipPokeballs {
      get { return gymOwnershipPokeballs_; }
      set {
        gymOwnershipPokeballs_ = value;
      }
    }

    /// <summary>Field number for the "base_pokeballs" field.</summary>
    public const int BasePokeballsFieldNumber = 4;
    private int basePokeballs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BasePokeballs {
      get { return basePokeballs_; }
      set {
        basePokeballs_ = value;
      }
    }

    /// <summary>Field number for the "blue_percentage" field.</summary>
    public const int BluePercentageFieldNumber = 5;
    private double bluePercentage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BluePercentage {
      get { return bluePercentage_; }
      set {
        bluePercentage_ = value;
      }
    }

    /// <summary>Field number for the "red_percentage" field.</summary>
    public const int RedPercentageFieldNumber = 6;
    private double redPercentage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RedPercentage {
      get { return redPercentage_; }
      set {
        redPercentage_ = value;
      }
    }

    /// <summary>Field number for the "yellow_percentage" field.</summary>
    public const int YellowPercentageFieldNumber = 7;
    private double yellowPercentage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YellowPercentage {
      get { return yellowPercentage_; }
      set {
        yellowPercentage_ = value;
      }
    }

    /// <summary>Field number for the "bonus_item_multiplier" field.</summary>
    public const int BonusItemMultiplierFieldNumber = 8;
    private float bonusItemMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BonusItemMultiplier {
      get { return bonusItemMultiplier_; }
      set {
        bonusItemMultiplier_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParticipationProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParticipationProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IndividualDamagePokeballs != other.IndividualDamagePokeballs) return false;
      if (TeamDamagePokeballs != other.TeamDamagePokeballs) return false;
      if (GymOwnershipPokeballs != other.GymOwnershipPokeballs) return false;
      if (BasePokeballs != other.BasePokeballs) return false;
      if (BluePercentage != other.BluePercentage) return false;
      if (RedPercentage != other.RedPercentage) return false;
      if (YellowPercentage != other.YellowPercentage) return false;
      if (BonusItemMultiplier != other.BonusItemMultiplier) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IndividualDamagePokeballs != 0) hash ^= IndividualDamagePokeballs.GetHashCode();
      if (TeamDamagePokeballs != 0) hash ^= TeamDamagePokeballs.GetHashCode();
      if (GymOwnershipPokeballs != 0) hash ^= GymOwnershipPokeballs.GetHashCode();
      if (BasePokeballs != 0) hash ^= BasePokeballs.GetHashCode();
      if (BluePercentage != 0D) hash ^= BluePercentage.GetHashCode();
      if (RedPercentage != 0D) hash ^= RedPercentage.GetHashCode();
      if (YellowPercentage != 0D) hash ^= YellowPercentage.GetHashCode();
      if (BonusItemMultiplier != 0F) hash ^= BonusItemMultiplier.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IndividualDamagePokeballs != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IndividualDamagePokeballs);
      }
      if (TeamDamagePokeballs != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TeamDamagePokeballs);
      }
      if (GymOwnershipPokeballs != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GymOwnershipPokeballs);
      }
      if (BasePokeballs != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BasePokeballs);
      }
      if (BluePercentage != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(BluePercentage);
      }
      if (RedPercentage != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RedPercentage);
      }
      if (YellowPercentage != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(YellowPercentage);
      }
      if (BonusItemMultiplier != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(BonusItemMultiplier);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IndividualDamagePokeballs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IndividualDamagePokeballs);
      }
      if (TeamDamagePokeballs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamDamagePokeballs);
      }
      if (GymOwnershipPokeballs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GymOwnershipPokeballs);
      }
      if (BasePokeballs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BasePokeballs);
      }
      if (BluePercentage != 0D) {
        size += 1 + 8;
      }
      if (RedPercentage != 0D) {
        size += 1 + 8;
      }
      if (YellowPercentage != 0D) {
        size += 1 + 8;
      }
      if (BonusItemMultiplier != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParticipationProto other) {
      if (other == null) {
        return;
      }
      if (other.IndividualDamagePokeballs != 0) {
        IndividualDamagePokeballs = other.IndividualDamagePokeballs;
      }
      if (other.TeamDamagePokeballs != 0) {
        TeamDamagePokeballs = other.TeamDamagePokeballs;
      }
      if (other.GymOwnershipPokeballs != 0) {
        GymOwnershipPokeballs = other.GymOwnershipPokeballs;
      }
      if (other.BasePokeballs != 0) {
        BasePokeballs = other.BasePokeballs;
      }
      if (other.BluePercentage != 0D) {
        BluePercentage = other.BluePercentage;
      }
      if (other.RedPercentage != 0D) {
        RedPercentage = other.RedPercentage;
      }
      if (other.YellowPercentage != 0D) {
        YellowPercentage = other.YellowPercentage;
      }
      if (other.BonusItemMultiplier != 0F) {
        BonusItemMultiplier = other.BonusItemMultiplier;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IndividualDamagePokeballs = input.ReadInt32();
            break;
          }
          case 16: {
            TeamDamagePokeballs = input.ReadInt32();
            break;
          }
          case 24: {
            GymOwnershipPokeballs = input.ReadInt32();
            break;
          }
          case 32: {
            BasePokeballs = input.ReadInt32();
            break;
          }
          case 41: {
            BluePercentage = input.ReadDouble();
            break;
          }
          case 49: {
            RedPercentage = input.ReadDouble();
            break;
          }
          case 57: {
            YellowPercentage = input.ReadDouble();
            break;
          }
          case 69: {
            BonusItemMultiplier = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LootProto : pb::IMessage<LootProto> {
    private static readonly pb::MessageParser<LootProto> _parser = new pb::MessageParser<LootProto>(() => new LootProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LootProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LootProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LootProto(LootProto other) : this() {
      lootItem_ = other.lootItem_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LootProto Clone() {
      return new LootProto(this);
    }

    /// <summary>Field number for the "loot_item" field.</summary>
    public const int LootItemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Responses.LootItemProto> _repeated_lootItem_codec
        = pb::FieldCodec.ForMessage(10, global::POGOProtos.Networking.Responses.LootItemProto.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Responses.LootItemProto> lootItem_ = new pbc::RepeatedField<global::POGOProtos.Networking.Responses.LootItemProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Responses.LootItemProto> LootItem {
      get { return lootItem_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LootProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LootProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lootItem_.Equals(other.lootItem_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lootItem_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lootItem_.WriteTo(output, _repeated_lootItem_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lootItem_.CalculateSize(_repeated_lootItem_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LootProto other) {
      if (other == null) {
        return;
      }
      lootItem_.Add(other.lootItem_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            lootItem_.AddEntriesFrom(input, _repeated_lootItem_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LootItemProto : pb::IMessage<LootItemProto> {
    private static readonly pb::MessageParser<LootItemProto> _parser = new pb::MessageParser<LootItemProto>(() => new LootItemProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LootItemProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LootItemProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LootItemProto(LootItemProto other) : this() {
      item_ = other.item_;
      stardust_ = other.stardust_;
      pokecoin_ = other.pokecoin_;
      pokemonCandy_ = other.pokemonCandy_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LootItemProto Clone() {
      return new LootItemProto(this);
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private global::POGOProtos.Networking.Responses.Item item_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.Item Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "stardust" field.</summary>
    public const int StardustFieldNumber = 2;
    private bool stardust_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Stardust {
      get { return stardust_; }
      set {
        stardust_ = value;
      }
    }

    /// <summary>Field number for the "pokecoin" field.</summary>
    public const int PokecoinFieldNumber = 3;
    private bool pokecoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Pokecoin {
      get { return pokecoin_; }
      set {
        pokecoin_ = value;
      }
    }

    /// <summary>Field number for the "pokemon_candy" field.</summary>
    public const int PokemonCandyFieldNumber = 4;
    private global::POGOProtos.Networking.Responses.HoloPokemonId pokemonCandy_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.HoloPokemonId PokemonCandy {
      get { return pokemonCandy_; }
      set {
        pokemonCandy_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LootItemProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LootItemProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Item != other.Item) return false;
      if (Stardust != other.Stardust) return false;
      if (Pokecoin != other.Pokecoin) return false;
      if (PokemonCandy != other.PokemonCandy) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Item != 0) hash ^= Item.GetHashCode();
      if (Stardust != false) hash ^= Stardust.GetHashCode();
      if (Pokecoin != false) hash ^= Pokecoin.GetHashCode();
      if (PokemonCandy != 0) hash ^= PokemonCandy.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Item != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Item);
      }
      if (Stardust != false) {
        output.WriteRawTag(16);
        output.WriteBool(Stardust);
      }
      if (Pokecoin != false) {
        output.WriteRawTag(24);
        output.WriteBool(Pokecoin);
      }
      if (PokemonCandy != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) PokemonCandy);
      }
      if (Count != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Item != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Item);
      }
      if (Stardust != false) {
        size += 1 + 1;
      }
      if (Pokecoin != false) {
        size += 1 + 1;
      }
      if (PokemonCandy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PokemonCandy);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LootItemProto other) {
      if (other == null) {
        return;
      }
      if (other.Item != 0) {
        Item = other.Item;
      }
      if (other.Stardust != false) {
        Stardust = other.Stardust;
      }
      if (other.Pokecoin != false) {
        Pokecoin = other.Pokecoin;
      }
      if (other.PokemonCandy != 0) {
        PokemonCandy = other.PokemonCandy;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            item_ = (global::POGOProtos.Networking.Responses.Item) input.ReadEnum();
            break;
          }
          case 16: {
            Stardust = input.ReadBool();
            break;
          }
          case 24: {
            Pokecoin = input.ReadBool();
            break;
          }
          case 32: {
            pokemonCandy_ = (global::POGOProtos.Networking.Responses.HoloPokemonId) input.ReadEnum();
            break;
          }
          case 40: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RaidEncounterProto : pb::IMessage<RaidEncounterProto> {
    private static readonly pb::MessageParser<RaidEncounterProto> _parser = new pb::MessageParser<RaidEncounterProto>(() => new RaidEncounterProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RaidEncounterProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidEncounterProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidEncounterProto(RaidEncounterProto other) : this() {
      Pokemon = other.pokemon_ != null ? other.Pokemon.Clone() : null;
      encounterId_ = other.encounterId_;
      spawnpointId_ = other.spawnpointId_;
      CaptureProbabilities = other.captureProbabilities_ != null ? other.CaptureProbabilities.Clone() : null;
      throwsRemaining_ = other.throwsRemaining_;
      raidLevel_ = other.raidLevel_;
      fortId_ = other.fortId_;
      isExclusive_ = other.isExclusive_;
      isEventLegendary_ = other.isEventLegendary_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidEncounterProto Clone() {
      return new RaidEncounterProto(this);
    }

    /// <summary>Field number for the "pokemon" field.</summary>
    public const int PokemonFieldNumber = 1;
    private global::POGOProtos.Networking.Responses.PokemonProto pokemon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PokemonProto Pokemon {
      get { return pokemon_; }
      set {
        pokemon_ = value;
      }
    }

    /// <summary>Field number for the "encounter_id" field.</summary>
    public const int EncounterIdFieldNumber = 2;
    private long encounterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EncounterId {
      get { return encounterId_; }
      set {
        encounterId_ = value;
      }
    }

    /// <summary>Field number for the "spawnpoint_id" field.</summary>
    public const int SpawnpointIdFieldNumber = 3;
    private string spawnpointId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpawnpointId {
      get { return spawnpointId_; }
      set {
        spawnpointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "capture_probabilities" field.</summary>
    public const int CaptureProbabilitiesFieldNumber = 4;
    private global::POGOProtos.Networking.Responses.CaptureProbabilityProto captureProbabilities_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.CaptureProbabilityProto CaptureProbabilities {
      get { return captureProbabilities_; }
      set {
        captureProbabilities_ = value;
      }
    }

    /// <summary>Field number for the "throws_remaining" field.</summary>
    public const int ThrowsRemainingFieldNumber = 5;
    private int throwsRemaining_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ThrowsRemaining {
      get { return throwsRemaining_; }
      set {
        throwsRemaining_ = value;
      }
    }

    /// <summary>Field number for the "raid_level" field.</summary>
    public const int RaidLevelFieldNumber = 6;
    private global::POGOProtos.Networking.Responses.RaidLevel raidLevel_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.RaidLevel RaidLevel {
      get { return raidLevel_; }
      set {
        raidLevel_ = value;
      }
    }

    /// <summary>Field number for the "fort_id" field.</summary>
    public const int FortIdFieldNumber = 7;
    private string fortId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FortId {
      get { return fortId_; }
      set {
        fortId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_exclusive" field.</summary>
    public const int IsExclusiveFieldNumber = 8;
    private bool isExclusive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsExclusive {
      get { return isExclusive_; }
      set {
        isExclusive_ = value;
      }
    }

    /// <summary>Field number for the "is_event_legendary" field.</summary>
    public const int IsEventLegendaryFieldNumber = 9;
    private bool isEventLegendary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEventLegendary {
      get { return isEventLegendary_; }
      set {
        isEventLegendary_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RaidEncounterProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RaidEncounterProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pokemon, other.Pokemon)) return false;
      if (EncounterId != other.EncounterId) return false;
      if (SpawnpointId != other.SpawnpointId) return false;
      if (!object.Equals(CaptureProbabilities, other.CaptureProbabilities)) return false;
      if (ThrowsRemaining != other.ThrowsRemaining) return false;
      if (RaidLevel != other.RaidLevel) return false;
      if (FortId != other.FortId) return false;
      if (IsExclusive != other.IsExclusive) return false;
      if (IsEventLegendary != other.IsEventLegendary) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pokemon_ != null) hash ^= Pokemon.GetHashCode();
      if (EncounterId != 0L) hash ^= EncounterId.GetHashCode();
      if (SpawnpointId.Length != 0) hash ^= SpawnpointId.GetHashCode();
      if (captureProbabilities_ != null) hash ^= CaptureProbabilities.GetHashCode();
      if (ThrowsRemaining != 0) hash ^= ThrowsRemaining.GetHashCode();
      if (RaidLevel != 0) hash ^= RaidLevel.GetHashCode();
      if (FortId.Length != 0) hash ^= FortId.GetHashCode();
      if (IsExclusive != false) hash ^= IsExclusive.GetHashCode();
      if (IsEventLegendary != false) hash ^= IsEventLegendary.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pokemon_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pokemon);
      }
      if (EncounterId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EncounterId);
      }
      if (SpawnpointId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SpawnpointId);
      }
      if (captureProbabilities_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CaptureProbabilities);
      }
      if (ThrowsRemaining != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ThrowsRemaining);
      }
      if (RaidLevel != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) RaidLevel);
      }
      if (FortId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FortId);
      }
      if (IsExclusive != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsExclusive);
      }
      if (IsEventLegendary != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsEventLegendary);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pokemon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pokemon);
      }
      if (EncounterId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EncounterId);
      }
      if (SpawnpointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpawnpointId);
      }
      if (captureProbabilities_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CaptureProbabilities);
      }
      if (ThrowsRemaining != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThrowsRemaining);
      }
      if (RaidLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RaidLevel);
      }
      if (FortId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FortId);
      }
      if (IsExclusive != false) {
        size += 1 + 1;
      }
      if (IsEventLegendary != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RaidEncounterProto other) {
      if (other == null) {
        return;
      }
      if (other.pokemon_ != null) {
        if (pokemon_ == null) {
          pokemon_ = new global::POGOProtos.Networking.Responses.PokemonProto();
        }
        Pokemon.MergeFrom(other.Pokemon);
      }
      if (other.EncounterId != 0L) {
        EncounterId = other.EncounterId;
      }
      if (other.SpawnpointId.Length != 0) {
        SpawnpointId = other.SpawnpointId;
      }
      if (other.captureProbabilities_ != null) {
        if (captureProbabilities_ == null) {
          captureProbabilities_ = new global::POGOProtos.Networking.Responses.CaptureProbabilityProto();
        }
        CaptureProbabilities.MergeFrom(other.CaptureProbabilities);
      }
      if (other.ThrowsRemaining != 0) {
        ThrowsRemaining = other.ThrowsRemaining;
      }
      if (other.RaidLevel != 0) {
        RaidLevel = other.RaidLevel;
      }
      if (other.FortId.Length != 0) {
        FortId = other.FortId;
      }
      if (other.IsExclusive != false) {
        IsExclusive = other.IsExclusive;
      }
      if (other.IsEventLegendary != false) {
        IsEventLegendary = other.IsEventLegendary;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pokemon_ == null) {
              pokemon_ = new global::POGOProtos.Networking.Responses.PokemonProto();
            }
            input.ReadMessage(pokemon_);
            break;
          }
          case 16: {
            EncounterId = input.ReadInt64();
            break;
          }
          case 26: {
            SpawnpointId = input.ReadString();
            break;
          }
          case 34: {
            if (captureProbabilities_ == null) {
              captureProbabilities_ = new global::POGOProtos.Networking.Responses.CaptureProbabilityProto();
            }
            input.ReadMessage(captureProbabilities_);
            break;
          }
          case 40: {
            ThrowsRemaining = input.ReadInt32();
            break;
          }
          case 48: {
            raidLevel_ = (global::POGOProtos.Networking.Responses.RaidLevel) input.ReadEnum();
            break;
          }
          case 58: {
            FortId = input.ReadString();
            break;
          }
          case 64: {
            IsExclusive = input.ReadBool();
            break;
          }
          case 72: {
            IsEventLegendary = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CaptureProbabilityProto : pb::IMessage<CaptureProbabilityProto> {
    private static readonly pb::MessageParser<CaptureProbabilityProto> _parser = new pb::MessageParser<CaptureProbabilityProto>(() => new CaptureProbabilityProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CaptureProbabilityProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureProbabilityProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureProbabilityProto(CaptureProbabilityProto other) : this() {
      pokeballType_ = other.pokeballType_.Clone();
      captureProbability_ = other.captureProbability_.Clone();
      reticleDifficultyScale_ = other.reticleDifficultyScale_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CaptureProbabilityProto Clone() {
      return new CaptureProbabilityProto(this);
    }

    /// <summary>Field number for the "pokeball_type" field.</summary>
    public const int PokeballTypeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Responses.Item> _repeated_pokeballType_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::POGOProtos.Networking.Responses.Item) x);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Responses.Item> pokeballType_ = new pbc::RepeatedField<global::POGOProtos.Networking.Responses.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Responses.Item> PokeballType {
      get { return pokeballType_; }
    }

    /// <summary>Field number for the "capture_probability" field.</summary>
    public const int CaptureProbabilityFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_captureProbability_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> captureProbability_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> CaptureProbability {
      get { return captureProbability_; }
    }

    /// <summary>Field number for the "reticle_difficulty_scale" field.</summary>
    public const int ReticleDifficultyScaleFieldNumber = 12;
    private double reticleDifficultyScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ReticleDifficultyScale {
      get { return reticleDifficultyScale_; }
      set {
        reticleDifficultyScale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CaptureProbabilityProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CaptureProbabilityProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pokeballType_.Equals(other.pokeballType_)) return false;
      if(!captureProbability_.Equals(other.captureProbability_)) return false;
      if (ReticleDifficultyScale != other.ReticleDifficultyScale) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pokeballType_.GetHashCode();
      hash ^= captureProbability_.GetHashCode();
      if (ReticleDifficultyScale != 0D) hash ^= ReticleDifficultyScale.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pokeballType_.WriteTo(output, _repeated_pokeballType_codec);
      captureProbability_.WriteTo(output, _repeated_captureProbability_codec);
      if (ReticleDifficultyScale != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(ReticleDifficultyScale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pokeballType_.CalculateSize(_repeated_pokeballType_codec);
      size += captureProbability_.CalculateSize(_repeated_captureProbability_codec);
      if (ReticleDifficultyScale != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CaptureProbabilityProto other) {
      if (other == null) {
        return;
      }
      pokeballType_.Add(other.pokeballType_);
      captureProbability_.Add(other.captureProbability_);
      if (other.ReticleDifficultyScale != 0D) {
        ReticleDifficultyScale = other.ReticleDifficultyScale;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            pokeballType_.AddEntriesFrom(input, _repeated_pokeballType_codec);
            break;
          }
          case 18:
          case 21: {
            captureProbability_.AddEntriesFrom(input, _repeated_captureProbability_codec);
            break;
          }
          case 97: {
            ReticleDifficultyScale = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GymBadgeStats : pb::IMessage<GymBadgeStats> {
    private static readonly pb::MessageParser<GymBadgeStats> _parser = new pb::MessageParser<GymBadgeStats>(() => new GymBadgeStats());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GymBadgeStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymBadgeStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymBadgeStats(GymBadgeStats other) : this() {
      totalTimeDefendedMs_ = other.totalTimeDefendedMs_;
      numBattlesWon_ = other.numBattlesWon_;
      numBattlesLost_ = other.numBattlesLost_;
      numBerriesFed_ = other.numBerriesFed_;
      numDeploys_ = other.numDeploys_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymBadgeStats Clone() {
      return new GymBadgeStats(this);
    }

    /// <summary>Field number for the "total_time_defended_ms" field.</summary>
    public const int TotalTimeDefendedMsFieldNumber = 1;
    private ulong totalTimeDefendedMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalTimeDefendedMs {
      get { return totalTimeDefendedMs_; }
      set {
        totalTimeDefendedMs_ = value;
      }
    }

    /// <summary>Field number for the "num_battles_won" field.</summary>
    public const int NumBattlesWonFieldNumber = 2;
    private uint numBattlesWon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumBattlesWon {
      get { return numBattlesWon_; }
      set {
        numBattlesWon_ = value;
      }
    }

    /// <summary>Field number for the "num_battles_lost" field.</summary>
    public const int NumBattlesLostFieldNumber = 5;
    private uint numBattlesLost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumBattlesLost {
      get { return numBattlesLost_; }
      set {
        numBattlesLost_ = value;
      }
    }

    /// <summary>Field number for the "num_berries_fed" field.</summary>
    public const int NumBerriesFedFieldNumber = 3;
    private uint numBerriesFed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumBerriesFed {
      get { return numBerriesFed_; }
      set {
        numBerriesFed_ = value;
      }
    }

    /// <summary>Field number for the "num_deploys" field.</summary>
    public const int NumDeploysFieldNumber = 4;
    private uint numDeploys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumDeploys {
      get { return numDeploys_; }
      set {
        numDeploys_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GymBadgeStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GymBadgeStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalTimeDefendedMs != other.TotalTimeDefendedMs) return false;
      if (NumBattlesWon != other.NumBattlesWon) return false;
      if (NumBattlesLost != other.NumBattlesLost) return false;
      if (NumBerriesFed != other.NumBerriesFed) return false;
      if (NumDeploys != other.NumDeploys) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalTimeDefendedMs != 0UL) hash ^= TotalTimeDefendedMs.GetHashCode();
      if (NumBattlesWon != 0) hash ^= NumBattlesWon.GetHashCode();
      if (NumBattlesLost != 0) hash ^= NumBattlesLost.GetHashCode();
      if (NumBerriesFed != 0) hash ^= NumBerriesFed.GetHashCode();
      if (NumDeploys != 0) hash ^= NumDeploys.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalTimeDefendedMs != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TotalTimeDefendedMs);
      }
      if (NumBattlesWon != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NumBattlesWon);
      }
      if (NumBerriesFed != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumBerriesFed);
      }
      if (NumDeploys != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumDeploys);
      }
      if (NumBattlesLost != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NumBattlesLost);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalTimeDefendedMs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalTimeDefendedMs);
      }
      if (NumBattlesWon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumBattlesWon);
      }
      if (NumBattlesLost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumBattlesLost);
      }
      if (NumBerriesFed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumBerriesFed);
      }
      if (NumDeploys != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumDeploys);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GymBadgeStats other) {
      if (other == null) {
        return;
      }
      if (other.TotalTimeDefendedMs != 0UL) {
        TotalTimeDefendedMs = other.TotalTimeDefendedMs;
      }
      if (other.NumBattlesWon != 0) {
        NumBattlesWon = other.NumBattlesWon;
      }
      if (other.NumBattlesLost != 0) {
        NumBattlesLost = other.NumBattlesLost;
      }
      if (other.NumBerriesFed != 0) {
        NumBerriesFed = other.NumBerriesFed;
      }
      if (other.NumDeploys != 0) {
        NumDeploys = other.NumDeploys;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TotalTimeDefendedMs = input.ReadUInt64();
            break;
          }
          case 16: {
            NumBattlesWon = input.ReadUInt32();
            break;
          }
          case 24: {
            NumBerriesFed = input.ReadUInt32();
            break;
          }
          case 32: {
            NumDeploys = input.ReadUInt32();
            break;
          }
          case 40: {
            NumBattlesLost = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerRaidInfoProto : pb::IMessage<PlayerRaidInfoProto> {
    private static readonly pb::MessageParser<PlayerRaidInfoProto> _parser = new pb::MessageParser<PlayerRaidInfoProto>(() => new PlayerRaidInfoProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRaidInfoProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRaidInfoProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRaidInfoProto(PlayerRaidInfoProto other) : this() {
      totalCompletedRaids_ = other.totalCompletedRaids_;
      totalCompletedLegendaryRaids_ = other.totalCompletedLegendaryRaids_;
      raids_ = other.raids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRaidInfoProto Clone() {
      return new PlayerRaidInfoProto(this);
    }

    /// <summary>Field number for the "total_completed_raids" field.</summary>
    public const int TotalCompletedRaidsFieldNumber = 3;
    private int totalCompletedRaids_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalCompletedRaids {
      get { return totalCompletedRaids_; }
      set {
        totalCompletedRaids_ = value;
      }
    }

    /// <summary>Field number for the "total_completed_legendary_raids" field.</summary>
    public const int TotalCompletedLegendaryRaidsFieldNumber = 4;
    private int totalCompletedLegendaryRaids_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalCompletedLegendaryRaids {
      get { return totalCompletedLegendaryRaids_; }
      set {
        totalCompletedLegendaryRaids_ = value;
      }
    }

    /// <summary>Field number for the "raids" field.</summary>
    public const int RaidsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Responses.RaidProto> _repeated_raids_codec
        = pb::FieldCodec.ForMessage(42, global::POGOProtos.Networking.Responses.RaidProto.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Responses.RaidProto> raids_ = new pbc::RepeatedField<global::POGOProtos.Networking.Responses.RaidProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Responses.RaidProto> Raids {
      get { return raids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRaidInfoProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRaidInfoProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalCompletedRaids != other.TotalCompletedRaids) return false;
      if (TotalCompletedLegendaryRaids != other.TotalCompletedLegendaryRaids) return false;
      if(!raids_.Equals(other.raids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalCompletedRaids != 0) hash ^= TotalCompletedRaids.GetHashCode();
      if (TotalCompletedLegendaryRaids != 0) hash ^= TotalCompletedLegendaryRaids.GetHashCode();
      hash ^= raids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalCompletedRaids != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalCompletedRaids);
      }
      if (TotalCompletedLegendaryRaids != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalCompletedLegendaryRaids);
      }
      raids_.WriteTo(output, _repeated_raids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalCompletedRaids != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalCompletedRaids);
      }
      if (TotalCompletedLegendaryRaids != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalCompletedLegendaryRaids);
      }
      size += raids_.CalculateSize(_repeated_raids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRaidInfoProto other) {
      if (other == null) {
        return;
      }
      if (other.TotalCompletedRaids != 0) {
        TotalCompletedRaids = other.TotalCompletedRaids;
      }
      if (other.TotalCompletedLegendaryRaids != 0) {
        TotalCompletedLegendaryRaids = other.TotalCompletedLegendaryRaids;
      }
      raids_.Add(other.raids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            TotalCompletedRaids = input.ReadInt32();
            break;
          }
          case 32: {
            TotalCompletedLegendaryRaids = input.ReadInt32();
            break;
          }
          case 42: {
            raids_.AddEntriesFrom(input, _repeated_raids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RaidProto : pb::IMessage<RaidProto> {
    private static readonly pb::MessageParser<RaidProto> _parser = new pb::MessageParser<RaidProto>(() => new RaidProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RaidProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidProto(RaidProto other) : this() {
      raidSeed_ = other.raidSeed_;
      startedMs_ = other.startedMs_;
      completedMs_ = other.completedMs_;
      encounterPokemonId_ = other.encounterPokemonId_;
      completedBattle_ = other.completedBattle_;
      receivedRewards_ = other.receivedRewards_;
      finishedEncounter_ = other.finishedEncounter_;
      receivedDefaultRewards_ = other.receivedDefaultRewards_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidProto Clone() {
      return new RaidProto(this);
    }

    /// <summary>Field number for the "raid_seed" field.</summary>
    public const int RaidSeedFieldNumber = 1;
    private long raidSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RaidSeed {
      get { return raidSeed_; }
      set {
        raidSeed_ = value;
      }
    }

    /// <summary>Field number for the "started_ms" field.</summary>
    public const int StartedMsFieldNumber = 2;
    private long startedMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartedMs {
      get { return startedMs_; }
      set {
        startedMs_ = value;
      }
    }

    /// <summary>Field number for the "completed_ms" field.</summary>
    public const int CompletedMsFieldNumber = 3;
    private long completedMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CompletedMs {
      get { return completedMs_; }
      set {
        completedMs_ = value;
      }
    }

    /// <summary>Field number for the "encounter_pokemon_id" field.</summary>
    public const int EncounterPokemonIdFieldNumber = 4;
    private global::POGOProtos.Networking.Responses.HoloPokemonId encounterPokemonId_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.HoloPokemonId EncounterPokemonId {
      get { return encounterPokemonId_; }
      set {
        encounterPokemonId_ = value;
      }
    }

    /// <summary>Field number for the "completed_battle" field.</summary>
    public const int CompletedBattleFieldNumber = 5;
    private bool completedBattle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CompletedBattle {
      get { return completedBattle_; }
      set {
        completedBattle_ = value;
      }
    }

    /// <summary>Field number for the "received_rewards" field.</summary>
    public const int ReceivedRewardsFieldNumber = 6;
    private bool receivedRewards_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReceivedRewards {
      get { return receivedRewards_; }
      set {
        receivedRewards_ = value;
      }
    }

    /// <summary>Field number for the "finished_encounter" field.</summary>
    public const int FinishedEncounterFieldNumber = 7;
    private bool finishedEncounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FinishedEncounter {
      get { return finishedEncounter_; }
      set {
        finishedEncounter_ = value;
      }
    }

    /// <summary>Field number for the "received_default_rewards" field.</summary>
    public const int ReceivedDefaultRewardsFieldNumber = 8;
    private bool receivedDefaultRewards_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReceivedDefaultRewards {
      get { return receivedDefaultRewards_; }
      set {
        receivedDefaultRewards_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RaidProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RaidProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RaidSeed != other.RaidSeed) return false;
      if (StartedMs != other.StartedMs) return false;
      if (CompletedMs != other.CompletedMs) return false;
      if (EncounterPokemonId != other.EncounterPokemonId) return false;
      if (CompletedBattle != other.CompletedBattle) return false;
      if (ReceivedRewards != other.ReceivedRewards) return false;
      if (FinishedEncounter != other.FinishedEncounter) return false;
      if (ReceivedDefaultRewards != other.ReceivedDefaultRewards) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RaidSeed != 0L) hash ^= RaidSeed.GetHashCode();
      if (StartedMs != 0L) hash ^= StartedMs.GetHashCode();
      if (CompletedMs != 0L) hash ^= CompletedMs.GetHashCode();
      if (EncounterPokemonId != 0) hash ^= EncounterPokemonId.GetHashCode();
      if (CompletedBattle != false) hash ^= CompletedBattle.GetHashCode();
      if (ReceivedRewards != false) hash ^= ReceivedRewards.GetHashCode();
      if (FinishedEncounter != false) hash ^= FinishedEncounter.GetHashCode();
      if (ReceivedDefaultRewards != false) hash ^= ReceivedDefaultRewards.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RaidSeed != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RaidSeed);
      }
      if (StartedMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartedMs);
      }
      if (CompletedMs != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CompletedMs);
      }
      if (EncounterPokemonId != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EncounterPokemonId);
      }
      if (CompletedBattle != false) {
        output.WriteRawTag(40);
        output.WriteBool(CompletedBattle);
      }
      if (ReceivedRewards != false) {
        output.WriteRawTag(48);
        output.WriteBool(ReceivedRewards);
      }
      if (FinishedEncounter != false) {
        output.WriteRawTag(56);
        output.WriteBool(FinishedEncounter);
      }
      if (ReceivedDefaultRewards != false) {
        output.WriteRawTag(64);
        output.WriteBool(ReceivedDefaultRewards);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RaidSeed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RaidSeed);
      }
      if (StartedMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartedMs);
      }
      if (CompletedMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CompletedMs);
      }
      if (EncounterPokemonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EncounterPokemonId);
      }
      if (CompletedBattle != false) {
        size += 1 + 1;
      }
      if (ReceivedRewards != false) {
        size += 1 + 1;
      }
      if (FinishedEncounter != false) {
        size += 1 + 1;
      }
      if (ReceivedDefaultRewards != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RaidProto other) {
      if (other == null) {
        return;
      }
      if (other.RaidSeed != 0L) {
        RaidSeed = other.RaidSeed;
      }
      if (other.StartedMs != 0L) {
        StartedMs = other.StartedMs;
      }
      if (other.CompletedMs != 0L) {
        CompletedMs = other.CompletedMs;
      }
      if (other.EncounterPokemonId != 0) {
        EncounterPokemonId = other.EncounterPokemonId;
      }
      if (other.CompletedBattle != false) {
        CompletedBattle = other.CompletedBattle;
      }
      if (other.ReceivedRewards != false) {
        ReceivedRewards = other.ReceivedRewards;
      }
      if (other.FinishedEncounter != false) {
        FinishedEncounter = other.FinishedEncounter;
      }
      if (other.ReceivedDefaultRewards != false) {
        ReceivedDefaultRewards = other.ReceivedDefaultRewards;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RaidSeed = input.ReadInt64();
            break;
          }
          case 16: {
            StartedMs = input.ReadInt64();
            break;
          }
          case 24: {
            CompletedMs = input.ReadInt64();
            break;
          }
          case 32: {
            encounterPokemonId_ = (global::POGOProtos.Networking.Responses.HoloPokemonId) input.ReadEnum();
            break;
          }
          case 40: {
            CompletedBattle = input.ReadBool();
            break;
          }
          case 48: {
            ReceivedRewards = input.ReadBool();
            break;
          }
          case 56: {
            FinishedEncounter = input.ReadBool();
            break;
          }
          case 64: {
            ReceivedDefaultRewards = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AwardedGymBadge : pb::IMessage<AwardedGymBadge> {
    private static readonly pb::MessageParser<AwardedGymBadge> _parser = new pb::MessageParser<AwardedGymBadge>(() => new AwardedGymBadge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AwardedGymBadge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AwardedGymBadge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AwardedGymBadge(AwardedGymBadge other) : this() {
      fortId_ = other.fortId_;
      gymBadgeType_ = other.gymBadgeType_;
      score_ = other.score_;
      GymBadgeStats = other.gymBadgeStats_ != null ? other.GymBadgeStats.Clone() : null;
      lastUpdateTimestampMs_ = other.lastUpdateTimestampMs_;
      lastCheckTimestampMs_ = other.lastCheckTimestampMs_;
      earnedPoints_ = other.earnedPoints_;
      progress_ = other.progress_;
      levelUp_ = other.levelUp_;
      name_ = other.name_;
      imageUrl_ = other.imageUrl_;
      description_ = other.description_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      Raids = other.raids_ != null ? other.Raids.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AwardedGymBadge Clone() {
      return new AwardedGymBadge(this);
    }

    /// <summary>Field number for the "fort_id" field.</summary>
    public const int FortIdFieldNumber = 1;
    private string fortId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FortId {
      get { return fortId_; }
      set {
        fortId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gym_badge_type" field.</summary>
    public const int GymBadgeTypeFieldNumber = 2;
    private global::POGOProtos.Networking.Responses.GymBadgeType gymBadgeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.GymBadgeType GymBadgeType {
      get { return gymBadgeType_; }
      set {
        gymBadgeType_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private uint score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "gym_badge_stats" field.</summary>
    public const int GymBadgeStatsFieldNumber = 4;
    private global::POGOProtos.Networking.Responses.GymBadgeStats gymBadgeStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.GymBadgeStats GymBadgeStats {
      get { return gymBadgeStats_; }
      set {
        gymBadgeStats_ = value;
      }
    }

    /// <summary>Field number for the "last_update_timestamp_ms" field.</summary>
    public const int LastUpdateTimestampMsFieldNumber = 5;
    private ulong lastUpdateTimestampMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastUpdateTimestampMs {
      get { return lastUpdateTimestampMs_; }
      set {
        lastUpdateTimestampMs_ = value;
      }
    }

    /// <summary>Field number for the "last_check_timestamp_ms" field.</summary>
    public const int LastCheckTimestampMsFieldNumber = 11;
    private ulong lastCheckTimestampMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastCheckTimestampMs {
      get { return lastCheckTimestampMs_; }
      set {
        lastCheckTimestampMs_ = value;
      }
    }

    /// <summary>Field number for the "earned_points" field.</summary>
    public const int EarnedPointsFieldNumber = 12;
    private uint earnedPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EarnedPoints {
      get { return earnedPoints_; }
      set {
        earnedPoints_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 13;
    private float progress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "level_up" field.</summary>
    public const int LevelUpFieldNumber = 14;
    private bool levelUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LevelUp {
      get { return levelUp_; }
      set {
        levelUp_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image_url" field.</summary>
    public const int ImageUrlFieldNumber = 7;
    private string imageUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUrl {
      get { return imageUrl_; }
      set {
        imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 8;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 9;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 10;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "raids" field.</summary>
    public const int RaidsFieldNumber = 15;
    private global::POGOProtos.Networking.Responses.PlayerRaidInfoProto raids_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.PlayerRaidInfoProto Raids {
      get { return raids_; }
      set {
        raids_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AwardedGymBadge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AwardedGymBadge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FortId != other.FortId) return false;
      if (GymBadgeType != other.GymBadgeType) return false;
      if (Score != other.Score) return false;
      if (!object.Equals(GymBadgeStats, other.GymBadgeStats)) return false;
      if (LastUpdateTimestampMs != other.LastUpdateTimestampMs) return false;
      if (LastCheckTimestampMs != other.LastCheckTimestampMs) return false;
      if (EarnedPoints != other.EarnedPoints) return false;
      if (Progress != other.Progress) return false;
      if (LevelUp != other.LevelUp) return false;
      if (Name != other.Name) return false;
      if (ImageUrl != other.ImageUrl) return false;
      if (Description != other.Description) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (!object.Equals(Raids, other.Raids)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FortId.Length != 0) hash ^= FortId.GetHashCode();
      if (GymBadgeType != 0) hash ^= GymBadgeType.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (gymBadgeStats_ != null) hash ^= GymBadgeStats.GetHashCode();
      if (LastUpdateTimestampMs != 0UL) hash ^= LastUpdateTimestampMs.GetHashCode();
      if (LastCheckTimestampMs != 0UL) hash ^= LastCheckTimestampMs.GetHashCode();
      if (EarnedPoints != 0) hash ^= EarnedPoints.GetHashCode();
      if (Progress != 0F) hash ^= Progress.GetHashCode();
      if (LevelUp != false) hash ^= LevelUp.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      if (raids_ != null) hash ^= Raids.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FortId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FortId);
      }
      if (GymBadgeType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GymBadgeType);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Score);
      }
      if (gymBadgeStats_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GymBadgeStats);
      }
      if (LastUpdateTimestampMs != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(LastUpdateTimestampMs);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (ImageUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ImageUrl);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Description);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Longitude);
      }
      if (LastCheckTimestampMs != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(LastCheckTimestampMs);
      }
      if (EarnedPoints != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(EarnedPoints);
      }
      if (Progress != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(Progress);
      }
      if (LevelUp != false) {
        output.WriteRawTag(112);
        output.WriteBool(LevelUp);
      }
      if (raids_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Raids);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FortId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FortId);
      }
      if (GymBadgeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GymBadgeType);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (gymBadgeStats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GymBadgeStats);
      }
      if (LastUpdateTimestampMs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastUpdateTimestampMs);
      }
      if (LastCheckTimestampMs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastCheckTimestampMs);
      }
      if (EarnedPoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EarnedPoints);
      }
      if (Progress != 0F) {
        size += 1 + 4;
      }
      if (LevelUp != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ImageUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      if (raids_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Raids);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AwardedGymBadge other) {
      if (other == null) {
        return;
      }
      if (other.FortId.Length != 0) {
        FortId = other.FortId;
      }
      if (other.GymBadgeType != 0) {
        GymBadgeType = other.GymBadgeType;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.gymBadgeStats_ != null) {
        if (gymBadgeStats_ == null) {
          gymBadgeStats_ = new global::POGOProtos.Networking.Responses.GymBadgeStats();
        }
        GymBadgeStats.MergeFrom(other.GymBadgeStats);
      }
      if (other.LastUpdateTimestampMs != 0UL) {
        LastUpdateTimestampMs = other.LastUpdateTimestampMs;
      }
      if (other.LastCheckTimestampMs != 0UL) {
        LastCheckTimestampMs = other.LastCheckTimestampMs;
      }
      if (other.EarnedPoints != 0) {
        EarnedPoints = other.EarnedPoints;
      }
      if (other.Progress != 0F) {
        Progress = other.Progress;
      }
      if (other.LevelUp != false) {
        LevelUp = other.LevelUp;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ImageUrl.Length != 0) {
        ImageUrl = other.ImageUrl;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.raids_ != null) {
        if (raids_ == null) {
          raids_ = new global::POGOProtos.Networking.Responses.PlayerRaidInfoProto();
        }
        Raids.MergeFrom(other.Raids);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FortId = input.ReadString();
            break;
          }
          case 16: {
            gymBadgeType_ = (global::POGOProtos.Networking.Responses.GymBadgeType) input.ReadEnum();
            break;
          }
          case 24: {
            Score = input.ReadUInt32();
            break;
          }
          case 34: {
            if (gymBadgeStats_ == null) {
              gymBadgeStats_ = new global::POGOProtos.Networking.Responses.GymBadgeStats();
            }
            input.ReadMessage(gymBadgeStats_);
            break;
          }
          case 40: {
            LastUpdateTimestampMs = input.ReadUInt64();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 58: {
            ImageUrl = input.ReadString();
            break;
          }
          case 66: {
            Description = input.ReadString();
            break;
          }
          case 73: {
            Latitude = input.ReadDouble();
            break;
          }
          case 81: {
            Longitude = input.ReadDouble();
            break;
          }
          case 88: {
            LastCheckTimestampMs = input.ReadUInt64();
            break;
          }
          case 96: {
            EarnedPoints = input.ReadUInt32();
            break;
          }
          case 109: {
            Progress = input.ReadFloat();
            break;
          }
          case 112: {
            LevelUp = input.ReadBool();
            break;
          }
          case 122: {
            if (raids_ == null) {
              raids_ = new global::POGOProtos.Networking.Responses.PlayerRaidInfoProto();
            }
            input.ReadMessage(raids_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleResultsProto : pb::IMessage<BattleResultsProto> {
    private static readonly pb::MessageParser<BattleResultsProto> _parser = new pb::MessageParser<BattleResultsProto>(() => new BattleResultsProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleResultsProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleResultsProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleResultsProto(BattleResultsProto other) : this() {
      GymState = other.gymState_ != null ? other.GymState.Clone() : null;
      attackers_ = other.attackers_.Clone();
      playerXpAwarded_ = other.playerXpAwarded_.Clone();
      nextDefenderPokemonId_ = other.nextDefenderPokemonId_;
      gymPointsDelta_ = other.gymPointsDelta_;
      GymStatus = other.gymStatus_ != null ? other.GymStatus.Clone() : null;
      participation_ = other.participation_.Clone();
      raidItemRewards_ = other.raidItemRewards_.Clone();
      postRaidEncounter_ = other.postRaidEncounter_.Clone();
      gymBadge_ = other.gymBadge_.Clone();
      defaultRaidItemRewards_ = other.defaultRaidItemRewards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleResultsProto Clone() {
      return new BattleResultsProto(this);
    }

    /// <summary>Field number for the "gym_state" field.</summary>
    public const int GymStateFieldNumber = 1;
    private global::POGOProtos.Networking.Responses.GymStateProto gymState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.GymStateProto GymState {
      get { return gymState_; }
      set {
        gymState_ = value;
      }
    }

    /// <summary>Field number for the "attackers" field.</summary>
    public const int AttackersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Responses.BattleParticipantProto> _repeated_attackers_codec
        = pb::FieldCodec.ForMessage(18, global::POGOProtos.Networking.Responses.BattleParticipantProto.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Responses.BattleParticipantProto> attackers_ = new pbc::RepeatedField<global::POGOProtos.Networking.Responses.BattleParticipantProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Responses.BattleParticipantProto> Attackers {
      get { return attackers_; }
    }

    /// <summary>Field number for the "player_xp_awarded" field.</summary>
    public const int PlayerXpAwardedFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_playerXpAwarded_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> playerXpAwarded_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerXpAwarded {
      get { return playerXpAwarded_; }
    }

    /// <summary>Field number for the "next_defender_pokemon_id" field.</summary>
    public const int NextDefenderPokemonIdFieldNumber = 4;
    private long nextDefenderPokemonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NextDefenderPokemonId {
      get { return nextDefenderPokemonId_; }
      set {
        nextDefenderPokemonId_ = value;
      }
    }

    /// <summary>Field number for the "gym_points_delta" field.</summary>
    public const int GymPointsDeltaFieldNumber = 5;
    private int gymPointsDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GymPointsDelta {
      get { return gymPointsDelta_; }
      set {
        gymPointsDelta_ = value;
      }
    }

    /// <summary>Field number for the "gym_status" field.</summary>
    public const int GymStatusFieldNumber = 6;
    private global::POGOProtos.Networking.Responses.GymStatusAndDefendersProto gymStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.GymStatusAndDefendersProto GymStatus {
      get { return gymStatus_; }
      set {
        gymStatus_ = value;
      }
    }

    /// <summary>Field number for the "participation" field.</summary>
    public const int ParticipationFieldNumber = 7;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Responses.ParticipationProto> _repeated_participation_codec
        = pb::FieldCodec.ForMessage(58, global::POGOProtos.Networking.Responses.ParticipationProto.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Responses.ParticipationProto> participation_ = new pbc::RepeatedField<global::POGOProtos.Networking.Responses.ParticipationProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Responses.ParticipationProto> Participation {
      get { return participation_; }
    }

    /// <summary>Field number for the "raid_item_rewards" field.</summary>
    public const int RaidItemRewardsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Responses.LootProto> _repeated_raidItemRewards_codec
        = pb::FieldCodec.ForMessage(66, global::POGOProtos.Networking.Responses.LootProto.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Responses.LootProto> raidItemRewards_ = new pbc::RepeatedField<global::POGOProtos.Networking.Responses.LootProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Responses.LootProto> RaidItemRewards {
      get { return raidItemRewards_; }
    }

    /// <summary>Field number for the "post_raid_encounter" field.</summary>
    public const int PostRaidEncounterFieldNumber = 9;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Responses.RaidEncounterProto> _repeated_postRaidEncounter_codec
        = pb::FieldCodec.ForMessage(74, global::POGOProtos.Networking.Responses.RaidEncounterProto.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Responses.RaidEncounterProto> postRaidEncounter_ = new pbc::RepeatedField<global::POGOProtos.Networking.Responses.RaidEncounterProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Responses.RaidEncounterProto> PostRaidEncounter {
      get { return postRaidEncounter_; }
    }

    /// <summary>Field number for the "gym_badge" field.</summary>
    public const int GymBadgeFieldNumber = 10;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Responses.AwardedGymBadge> _repeated_gymBadge_codec
        = pb::FieldCodec.ForMessage(82, global::POGOProtos.Networking.Responses.AwardedGymBadge.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Responses.AwardedGymBadge> gymBadge_ = new pbc::RepeatedField<global::POGOProtos.Networking.Responses.AwardedGymBadge>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Responses.AwardedGymBadge> GymBadge {
      get { return gymBadge_; }
    }

    /// <summary>Field number for the "default_raid_item_rewards" field.</summary>
    public const int DefaultRaidItemRewardsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Responses.LootProto> _repeated_defaultRaidItemRewards_codec
        = pb::FieldCodec.ForMessage(90, global::POGOProtos.Networking.Responses.LootProto.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Responses.LootProto> defaultRaidItemRewards_ = new pbc::RepeatedField<global::POGOProtos.Networking.Responses.LootProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Responses.LootProto> DefaultRaidItemRewards {
      get { return defaultRaidItemRewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleResultsProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleResultsProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GymState, other.GymState)) return false;
      if(!attackers_.Equals(other.attackers_)) return false;
      if(!playerXpAwarded_.Equals(other.playerXpAwarded_)) return false;
      if (NextDefenderPokemonId != other.NextDefenderPokemonId) return false;
      if (GymPointsDelta != other.GymPointsDelta) return false;
      if (!object.Equals(GymStatus, other.GymStatus)) return false;
      if(!participation_.Equals(other.participation_)) return false;
      if(!raidItemRewards_.Equals(other.raidItemRewards_)) return false;
      if(!postRaidEncounter_.Equals(other.postRaidEncounter_)) return false;
      if(!gymBadge_.Equals(other.gymBadge_)) return false;
      if(!defaultRaidItemRewards_.Equals(other.defaultRaidItemRewards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gymState_ != null) hash ^= GymState.GetHashCode();
      hash ^= attackers_.GetHashCode();
      hash ^= playerXpAwarded_.GetHashCode();
      if (NextDefenderPokemonId != 0L) hash ^= NextDefenderPokemonId.GetHashCode();
      if (GymPointsDelta != 0) hash ^= GymPointsDelta.GetHashCode();
      if (gymStatus_ != null) hash ^= GymStatus.GetHashCode();
      hash ^= participation_.GetHashCode();
      hash ^= raidItemRewards_.GetHashCode();
      hash ^= postRaidEncounter_.GetHashCode();
      hash ^= gymBadge_.GetHashCode();
      hash ^= defaultRaidItemRewards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gymState_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GymState);
      }
      attackers_.WriteTo(output, _repeated_attackers_codec);
      playerXpAwarded_.WriteTo(output, _repeated_playerXpAwarded_codec);
      if (NextDefenderPokemonId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(NextDefenderPokemonId);
      }
      if (GymPointsDelta != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GymPointsDelta);
      }
      if (gymStatus_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(GymStatus);
      }
      participation_.WriteTo(output, _repeated_participation_codec);
      raidItemRewards_.WriteTo(output, _repeated_raidItemRewards_codec);
      postRaidEncounter_.WriteTo(output, _repeated_postRaidEncounter_codec);
      gymBadge_.WriteTo(output, _repeated_gymBadge_codec);
      defaultRaidItemRewards_.WriteTo(output, _repeated_defaultRaidItemRewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gymState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GymState);
      }
      size += attackers_.CalculateSize(_repeated_attackers_codec);
      size += playerXpAwarded_.CalculateSize(_repeated_playerXpAwarded_codec);
      if (NextDefenderPokemonId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextDefenderPokemonId);
      }
      if (GymPointsDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GymPointsDelta);
      }
      if (gymStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GymStatus);
      }
      size += participation_.CalculateSize(_repeated_participation_codec);
      size += raidItemRewards_.CalculateSize(_repeated_raidItemRewards_codec);
      size += postRaidEncounter_.CalculateSize(_repeated_postRaidEncounter_codec);
      size += gymBadge_.CalculateSize(_repeated_gymBadge_codec);
      size += defaultRaidItemRewards_.CalculateSize(_repeated_defaultRaidItemRewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleResultsProto other) {
      if (other == null) {
        return;
      }
      if (other.gymState_ != null) {
        if (gymState_ == null) {
          gymState_ = new global::POGOProtos.Networking.Responses.GymStateProto();
        }
        GymState.MergeFrom(other.GymState);
      }
      attackers_.Add(other.attackers_);
      playerXpAwarded_.Add(other.playerXpAwarded_);
      if (other.NextDefenderPokemonId != 0L) {
        NextDefenderPokemonId = other.NextDefenderPokemonId;
      }
      if (other.GymPointsDelta != 0) {
        GymPointsDelta = other.GymPointsDelta;
      }
      if (other.gymStatus_ != null) {
        if (gymStatus_ == null) {
          gymStatus_ = new global::POGOProtos.Networking.Responses.GymStatusAndDefendersProto();
        }
        GymStatus.MergeFrom(other.GymStatus);
      }
      participation_.Add(other.participation_);
      raidItemRewards_.Add(other.raidItemRewards_);
      postRaidEncounter_.Add(other.postRaidEncounter_);
      gymBadge_.Add(other.gymBadge_);
      defaultRaidItemRewards_.Add(other.defaultRaidItemRewards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gymState_ == null) {
              gymState_ = new global::POGOProtos.Networking.Responses.GymStateProto();
            }
            input.ReadMessage(gymState_);
            break;
          }
          case 18: {
            attackers_.AddEntriesFrom(input, _repeated_attackers_codec);
            break;
          }
          case 26:
          case 24: {
            playerXpAwarded_.AddEntriesFrom(input, _repeated_playerXpAwarded_codec);
            break;
          }
          case 32: {
            NextDefenderPokemonId = input.ReadInt64();
            break;
          }
          case 40: {
            GymPointsDelta = input.ReadInt32();
            break;
          }
          case 50: {
            if (gymStatus_ == null) {
              gymStatus_ = new global::POGOProtos.Networking.Responses.GymStatusAndDefendersProto();
            }
            input.ReadMessage(gymStatus_);
            break;
          }
          case 58: {
            participation_.AddEntriesFrom(input, _repeated_participation_codec);
            break;
          }
          case 66: {
            raidItemRewards_.AddEntriesFrom(input, _repeated_raidItemRewards_codec);
            break;
          }
          case 74: {
            postRaidEncounter_.AddEntriesFrom(input, _repeated_postRaidEncounter_codec);
            break;
          }
          case 82: {
            gymBadge_.AddEntriesFrom(input, _repeated_gymBadge_codec);
            break;
          }
          case 90: {
            defaultRaidItemRewards_.AddEntriesFrom(input, _repeated_defaultRaidItemRewards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleActionProto : pb::IMessage<BattleActionProto> {
    private static readonly pb::MessageParser<BattleActionProto> _parser = new pb::MessageParser<BattleActionProto>(() => new BattleActionProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleActionProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleActionProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleActionProto(BattleActionProto other) : this() {
      type_ = other.type_;
      actionStartMs_ = other.actionStartMs_;
      durationMs_ = other.durationMs_;
      energyDelta_ = other.energyDelta_;
      attackerIndex_ = other.attackerIndex_;
      targetIndex_ = other.targetIndex_;
      activePokemonId_ = other.activePokemonId_;
      JoinedPlayer = other.joinedPlayer_ != null ? other.JoinedPlayer.Clone() : null;
      BattleResults = other.battleResults_ != null ? other.BattleResults.Clone() : null;
      damageWindowStartMs_ = other.damageWindowStartMs_;
      damageWindowEndMs_ = other.damageWindowEndMs_;
      QuitPlayer = other.quitPlayer_ != null ? other.QuitPlayer.Clone() : null;
      targetPokemonId_ = other.targetPokemonId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleActionProto Clone() {
      return new BattleActionProto(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::POGOProtos.Networking.Responses.BattleActionProto.Types.ActionType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.BattleActionProto.Types.ActionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "action_start_ms" field.</summary>
    public const int ActionStartMsFieldNumber = 2;
    private long actionStartMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ActionStartMs {
      get { return actionStartMs_; }
      set {
        actionStartMs_ = value;
      }
    }

    /// <summary>Field number for the "duration_ms" field.</summary>
    public const int DurationMsFieldNumber = 3;
    private int durationMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DurationMs {
      get { return durationMs_; }
      set {
        durationMs_ = value;
      }
    }

    /// <summary>Field number for the "energy_delta" field.</summary>
    public const int EnergyDeltaFieldNumber = 5;
    private int energyDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnergyDelta {
      get { return energyDelta_; }
      set {
        energyDelta_ = value;
      }
    }

    /// <summary>Field number for the "attacker_index" field.</summary>
    public const int AttackerIndexFieldNumber = 6;
    private int attackerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerIndex {
      get { return attackerIndex_; }
      set {
        attackerIndex_ = value;
      }
    }

    /// <summary>Field number for the "target_index" field.</summary>
    public const int TargetIndexFieldNumber = 7;
    private int targetIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetIndex {
      get { return targetIndex_; }
      set {
        targetIndex_ = value;
      }
    }

    /// <summary>Field number for the "active_pokemon_id" field.</summary>
    public const int ActivePokemonIdFieldNumber = 8;
    private ulong activePokemonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ActivePokemonId {
      get { return activePokemonId_; }
      set {
        activePokemonId_ = value;
      }
    }

    /// <summary>Field number for the "joined_player" field.</summary>
    public const int JoinedPlayerFieldNumber = 9;
    private global::POGOProtos.Networking.Responses.BattleParticipantProto joinedPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.BattleParticipantProto JoinedPlayer {
      get { return joinedPlayer_; }
      set {
        joinedPlayer_ = value;
      }
    }

    /// <summary>Field number for the "battle_results" field.</summary>
    public const int BattleResultsFieldNumber = 10;
    private global::POGOProtos.Networking.Responses.BattleResultsProto battleResults_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.BattleResultsProto BattleResults {
      get { return battleResults_; }
      set {
        battleResults_ = value;
      }
    }

    /// <summary>Field number for the "damage_window_start_ms" field.</summary>
    public const int DamageWindowStartMsFieldNumber = 11;
    private long damageWindowStartMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DamageWindowStartMs {
      get { return damageWindowStartMs_; }
      set {
        damageWindowStartMs_ = value;
      }
    }

    /// <summary>Field number for the "damage_window_end_ms" field.</summary>
    public const int DamageWindowEndMsFieldNumber = 12;
    private long damageWindowEndMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DamageWindowEndMs {
      get { return damageWindowEndMs_; }
      set {
        damageWindowEndMs_ = value;
      }
    }

    /// <summary>Field number for the "quit_player" field.</summary>
    public const int QuitPlayerFieldNumber = 13;
    private global::POGOProtos.Networking.Responses.BattleParticipantProto quitPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.BattleParticipantProto QuitPlayer {
      get { return quitPlayer_; }
      set {
        quitPlayer_ = value;
      }
    }

    /// <summary>Field number for the "target_pokemon_id" field.</summary>
    public const int TargetPokemonIdFieldNumber = 14;
    private ulong targetPokemonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetPokemonId {
      get { return targetPokemonId_; }
      set {
        targetPokemonId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleActionProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleActionProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (ActionStartMs != other.ActionStartMs) return false;
      if (DurationMs != other.DurationMs) return false;
      if (EnergyDelta != other.EnergyDelta) return false;
      if (AttackerIndex != other.AttackerIndex) return false;
      if (TargetIndex != other.TargetIndex) return false;
      if (ActivePokemonId != other.ActivePokemonId) return false;
      if (!object.Equals(JoinedPlayer, other.JoinedPlayer)) return false;
      if (!object.Equals(BattleResults, other.BattleResults)) return false;
      if (DamageWindowStartMs != other.DamageWindowStartMs) return false;
      if (DamageWindowEndMs != other.DamageWindowEndMs) return false;
      if (!object.Equals(QuitPlayer, other.QuitPlayer)) return false;
      if (TargetPokemonId != other.TargetPokemonId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ActionStartMs != 0L) hash ^= ActionStartMs.GetHashCode();
      if (DurationMs != 0) hash ^= DurationMs.GetHashCode();
      if (EnergyDelta != 0) hash ^= EnergyDelta.GetHashCode();
      if (AttackerIndex != 0) hash ^= AttackerIndex.GetHashCode();
      if (TargetIndex != 0) hash ^= TargetIndex.GetHashCode();
      if (ActivePokemonId != 0UL) hash ^= ActivePokemonId.GetHashCode();
      if (joinedPlayer_ != null) hash ^= JoinedPlayer.GetHashCode();
      if (battleResults_ != null) hash ^= BattleResults.GetHashCode();
      if (DamageWindowStartMs != 0L) hash ^= DamageWindowStartMs.GetHashCode();
      if (DamageWindowEndMs != 0L) hash ^= DamageWindowEndMs.GetHashCode();
      if (quitPlayer_ != null) hash ^= QuitPlayer.GetHashCode();
      if (TargetPokemonId != 0UL) hash ^= TargetPokemonId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (ActionStartMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ActionStartMs);
      }
      if (DurationMs != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DurationMs);
      }
      if (EnergyDelta != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EnergyDelta);
      }
      if (AttackerIndex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AttackerIndex);
      }
      if (TargetIndex != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TargetIndex);
      }
      if (ActivePokemonId != 0UL) {
        output.WriteRawTag(65);
        output.WriteFixed64(ActivePokemonId);
      }
      if (joinedPlayer_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(JoinedPlayer);
      }
      if (battleResults_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(BattleResults);
      }
      if (DamageWindowStartMs != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(DamageWindowStartMs);
      }
      if (DamageWindowEndMs != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(DamageWindowEndMs);
      }
      if (quitPlayer_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(QuitPlayer);
      }
      if (TargetPokemonId != 0UL) {
        output.WriteRawTag(113);
        output.WriteFixed64(TargetPokemonId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (ActionStartMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActionStartMs);
      }
      if (DurationMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DurationMs);
      }
      if (EnergyDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnergyDelta);
      }
      if (AttackerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackerIndex);
      }
      if (TargetIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetIndex);
      }
      if (ActivePokemonId != 0UL) {
        size += 1 + 8;
      }
      if (joinedPlayer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinedPlayer);
      }
      if (battleResults_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleResults);
      }
      if (DamageWindowStartMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DamageWindowStartMs);
      }
      if (DamageWindowEndMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DamageWindowEndMs);
      }
      if (quitPlayer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuitPlayer);
      }
      if (TargetPokemonId != 0UL) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleActionProto other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ActionStartMs != 0L) {
        ActionStartMs = other.ActionStartMs;
      }
      if (other.DurationMs != 0) {
        DurationMs = other.DurationMs;
      }
      if (other.EnergyDelta != 0) {
        EnergyDelta = other.EnergyDelta;
      }
      if (other.AttackerIndex != 0) {
        AttackerIndex = other.AttackerIndex;
      }
      if (other.TargetIndex != 0) {
        TargetIndex = other.TargetIndex;
      }
      if (other.ActivePokemonId != 0UL) {
        ActivePokemonId = other.ActivePokemonId;
      }
      if (other.joinedPlayer_ != null) {
        if (joinedPlayer_ == null) {
          joinedPlayer_ = new global::POGOProtos.Networking.Responses.BattleParticipantProto();
        }
        JoinedPlayer.MergeFrom(other.JoinedPlayer);
      }
      if (other.battleResults_ != null) {
        if (battleResults_ == null) {
          battleResults_ = new global::POGOProtos.Networking.Responses.BattleResultsProto();
        }
        BattleResults.MergeFrom(other.BattleResults);
      }
      if (other.DamageWindowStartMs != 0L) {
        DamageWindowStartMs = other.DamageWindowStartMs;
      }
      if (other.DamageWindowEndMs != 0L) {
        DamageWindowEndMs = other.DamageWindowEndMs;
      }
      if (other.quitPlayer_ != null) {
        if (quitPlayer_ == null) {
          quitPlayer_ = new global::POGOProtos.Networking.Responses.BattleParticipantProto();
        }
        QuitPlayer.MergeFrom(other.QuitPlayer);
      }
      if (other.TargetPokemonId != 0UL) {
        TargetPokemonId = other.TargetPokemonId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::POGOProtos.Networking.Responses.BattleActionProto.Types.ActionType) input.ReadEnum();
            break;
          }
          case 16: {
            ActionStartMs = input.ReadInt64();
            break;
          }
          case 24: {
            DurationMs = input.ReadInt32();
            break;
          }
          case 40: {
            EnergyDelta = input.ReadInt32();
            break;
          }
          case 48: {
            AttackerIndex = input.ReadInt32();
            break;
          }
          case 56: {
            TargetIndex = input.ReadInt32();
            break;
          }
          case 65: {
            ActivePokemonId = input.ReadFixed64();
            break;
          }
          case 74: {
            if (joinedPlayer_ == null) {
              joinedPlayer_ = new global::POGOProtos.Networking.Responses.BattleParticipantProto();
            }
            input.ReadMessage(joinedPlayer_);
            break;
          }
          case 82: {
            if (battleResults_ == null) {
              battleResults_ = new global::POGOProtos.Networking.Responses.BattleResultsProto();
            }
            input.ReadMessage(battleResults_);
            break;
          }
          case 88: {
            DamageWindowStartMs = input.ReadInt64();
            break;
          }
          case 96: {
            DamageWindowEndMs = input.ReadInt64();
            break;
          }
          case 106: {
            if (quitPlayer_ == null) {
              quitPlayer_ = new global::POGOProtos.Networking.Responses.BattleParticipantProto();
            }
            input.ReadMessage(quitPlayer_);
            break;
          }
          case 113: {
            TargetPokemonId = input.ReadFixed64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BattleActionProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ActionType {
        [pbr::OriginalName("UNSET")] Unset = 0,
        [pbr::OriginalName("ATTACK")] Attack = 1,
        [pbr::OriginalName("DODGE")] Dodge = 2,
        [pbr::OriginalName("SPECIAL_ATTACK")] SpecialAttack = 3,
        [pbr::OriginalName("SWAP_POKEMON")] SwapPokemon = 4,
        [pbr::OriginalName("FAINT")] Faint = 5,
        [pbr::OriginalName("PLAYER_JOIN")] PlayerJoin = 6,
        [pbr::OriginalName("PLAYER_QUIT")] PlayerQuit = 7,
        [pbr::OriginalName("VICTORY")] Victory = 8,
        [pbr::OriginalName("DEFEAT")] Defeat = 9,
        [pbr::OriginalName("TIMED_OUT")] TimedOut = 10,
      }

    }
    #endregion

  }

  public sealed partial class BattleLogProto : pb::IMessage<BattleLogProto> {
    private static readonly pb::MessageParser<BattleLogProto> _parser = new pb::MessageParser<BattleLogProto>(() => new BattleLogProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleLogProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleLogProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleLogProto(BattleLogProto other) : this() {
      state_ = other.state_;
      battleType_ = other.battleType_;
      serverMs_ = other.serverMs_;
      battleActions_ = other.battleActions_.Clone();
      battleStartMs_ = other.battleStartMs_;
      battleEndMs_ = other.battleEndMs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleLogProto Clone() {
      return new BattleLogProto(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::POGOProtos.Networking.Responses.BattleLogProto.Types.State state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.BattleLogProto.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "battle_type" field.</summary>
    public const int BattleTypeFieldNumber = 2;
    private global::POGOProtos.Networking.Responses.BattleLogProto.Types.BattleType battleType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.BattleLogProto.Types.BattleType BattleType {
      get { return battleType_; }
      set {
        battleType_ = value;
      }
    }

    /// <summary>Field number for the "server_ms" field.</summary>
    public const int ServerMsFieldNumber = 3;
    private long serverMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerMs {
      get { return serverMs_; }
      set {
        serverMs_ = value;
      }
    }

    /// <summary>Field number for the "battle_actions" field.</summary>
    public const int BattleActionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Responses.BattleActionProto> _repeated_battleActions_codec
        = pb::FieldCodec.ForMessage(34, global::POGOProtos.Networking.Responses.BattleActionProto.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Responses.BattleActionProto> battleActions_ = new pbc::RepeatedField<global::POGOProtos.Networking.Responses.BattleActionProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Responses.BattleActionProto> BattleActions {
      get { return battleActions_; }
    }

    /// <summary>Field number for the "battle_start_ms" field.</summary>
    public const int BattleStartMsFieldNumber = 5;
    private long battleStartMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleStartMs {
      get { return battleStartMs_; }
      set {
        battleStartMs_ = value;
      }
    }

    /// <summary>Field number for the "battle_end_ms" field.</summary>
    public const int BattleEndMsFieldNumber = 6;
    private long battleEndMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleEndMs {
      get { return battleEndMs_; }
      set {
        battleEndMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleLogProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleLogProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (BattleType != other.BattleType) return false;
      if (ServerMs != other.ServerMs) return false;
      if(!battleActions_.Equals(other.battleActions_)) return false;
      if (BattleStartMs != other.BattleStartMs) return false;
      if (BattleEndMs != other.BattleEndMs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (BattleType != 0) hash ^= BattleType.GetHashCode();
      if (ServerMs != 0L) hash ^= ServerMs.GetHashCode();
      hash ^= battleActions_.GetHashCode();
      if (BattleStartMs != 0L) hash ^= BattleStartMs.GetHashCode();
      if (BattleEndMs != 0L) hash ^= BattleEndMs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (BattleType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) BattleType);
      }
      if (ServerMs != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ServerMs);
      }
      battleActions_.WriteTo(output, _repeated_battleActions_codec);
      if (BattleStartMs != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(BattleStartMs);
      }
      if (BattleEndMs != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(BattleEndMs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (BattleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BattleType);
      }
      if (ServerMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerMs);
      }
      size += battleActions_.CalculateSize(_repeated_battleActions_codec);
      if (BattleStartMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleStartMs);
      }
      if (BattleEndMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleEndMs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleLogProto other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.BattleType != 0) {
        BattleType = other.BattleType;
      }
      if (other.ServerMs != 0L) {
        ServerMs = other.ServerMs;
      }
      battleActions_.Add(other.battleActions_);
      if (other.BattleStartMs != 0L) {
        BattleStartMs = other.BattleStartMs;
      }
      if (other.BattleEndMs != 0L) {
        BattleEndMs = other.BattleEndMs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::POGOProtos.Networking.Responses.BattleLogProto.Types.State) input.ReadEnum();
            break;
          }
          case 16: {
            battleType_ = (global::POGOProtos.Networking.Responses.BattleLogProto.Types.BattleType) input.ReadEnum();
            break;
          }
          case 24: {
            ServerMs = input.ReadInt64();
            break;
          }
          case 34: {
            battleActions_.AddEntriesFrom(input, _repeated_battleActions_codec);
            break;
          }
          case 40: {
            BattleStartMs = input.ReadInt64();
            break;
          }
          case 48: {
            BattleEndMs = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BattleLogProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("STATE_UNSET")] Unset = 0,
        [pbr::OriginalName("ACTIVE")] Active = 1,
        [pbr::OriginalName("VICTORY")] Victory = 2,
        [pbr::OriginalName("DEFEATED")] Defeated = 3,
        [pbr::OriginalName("TIMED_OUT")] TimedOut = 4,
      }

      public enum BattleType {
        [pbr::OriginalName("BATTLE_TYPE_UNSET")] Unset = 0,
        [pbr::OriginalName("NORMAL")] Normal = 1,
        [pbr::OriginalName("TRAINING")] Training = 2,
        [pbr::OriginalName("RAID")] Raid = 3,
      }

    }
    #endregion

  }

  public sealed partial class BattleProto : pb::IMessage<BattleProto> {
    private static readonly pb::MessageParser<BattleProto> _parser = new pb::MessageParser<BattleProto>(() => new BattleProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleProto(BattleProto other) : this() {
      battleStartMs_ = other.battleStartMs_;
      battleEndMs_ = other.battleEndMs_;
      battleId_ = other.battleId_;
      Defender = other.defender_ != null ? other.Defender.Clone() : null;
      BattleLog = other.battleLog_ != null ? other.BattleLog.Clone() : null;
      Attacker = other.attacker_ != null ? other.Attacker.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleProto Clone() {
      return new BattleProto(this);
    }

    /// <summary>Field number for the "battle_start_ms" field.</summary>
    public const int BattleStartMsFieldNumber = 1;
    private long battleStartMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleStartMs {
      get { return battleStartMs_; }
      set {
        battleStartMs_ = value;
      }
    }

    /// <summary>Field number for the "battle_end_ms" field.</summary>
    public const int BattleEndMsFieldNumber = 2;
    private long battleEndMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleEndMs {
      get { return battleEndMs_; }
      set {
        battleEndMs_ = value;
      }
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 3;
    private string battleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BattleId {
      get { return battleId_; }
      set {
        battleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "defender" field.</summary>
    public const int DefenderFieldNumber = 4;
    private global::POGOProtos.Networking.Responses.BattleParticipantProto defender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.BattleParticipantProto Defender {
      get { return defender_; }
      set {
        defender_ = value;
      }
    }

    /// <summary>Field number for the "battle_log" field.</summary>
    public const int BattleLogFieldNumber = 5;
    private global::POGOProtos.Networking.Responses.BattleLogProto battleLog_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.BattleLogProto BattleLog {
      get { return battleLog_; }
      set {
        battleLog_ = value;
      }
    }

    /// <summary>Field number for the "attacker" field.</summary>
    public const int AttackerFieldNumber = 6;
    private global::POGOProtos.Networking.Responses.BattleParticipantProto attacker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.BattleParticipantProto Attacker {
      get { return attacker_; }
      set {
        attacker_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleStartMs != other.BattleStartMs) return false;
      if (BattleEndMs != other.BattleEndMs) return false;
      if (BattleId != other.BattleId) return false;
      if (!object.Equals(Defender, other.Defender)) return false;
      if (!object.Equals(BattleLog, other.BattleLog)) return false;
      if (!object.Equals(Attacker, other.Attacker)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleStartMs != 0L) hash ^= BattleStartMs.GetHashCode();
      if (BattleEndMs != 0L) hash ^= BattleEndMs.GetHashCode();
      if (BattleId.Length != 0) hash ^= BattleId.GetHashCode();
      if (defender_ != null) hash ^= Defender.GetHashCode();
      if (battleLog_ != null) hash ^= BattleLog.GetHashCode();
      if (attacker_ != null) hash ^= Attacker.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleStartMs != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BattleStartMs);
      }
      if (BattleEndMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BattleEndMs);
      }
      if (BattleId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BattleId);
      }
      if (defender_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Defender);
      }
      if (battleLog_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BattleLog);
      }
      if (attacker_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Attacker);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleStartMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleStartMs);
      }
      if (BattleEndMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleEndMs);
      }
      if (BattleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BattleId);
      }
      if (defender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Defender);
      }
      if (battleLog_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleLog);
      }
      if (attacker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attacker);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleProto other) {
      if (other == null) {
        return;
      }
      if (other.BattleStartMs != 0L) {
        BattleStartMs = other.BattleStartMs;
      }
      if (other.BattleEndMs != 0L) {
        BattleEndMs = other.BattleEndMs;
      }
      if (other.BattleId.Length != 0) {
        BattleId = other.BattleId;
      }
      if (other.defender_ != null) {
        if (defender_ == null) {
          defender_ = new global::POGOProtos.Networking.Responses.BattleParticipantProto();
        }
        Defender.MergeFrom(other.Defender);
      }
      if (other.battleLog_ != null) {
        if (battleLog_ == null) {
          battleLog_ = new global::POGOProtos.Networking.Responses.BattleLogProto();
        }
        BattleLog.MergeFrom(other.BattleLog);
      }
      if (other.attacker_ != null) {
        if (attacker_ == null) {
          attacker_ = new global::POGOProtos.Networking.Responses.BattleParticipantProto();
        }
        Attacker.MergeFrom(other.Attacker);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleStartMs = input.ReadInt64();
            break;
          }
          case 16: {
            BattleEndMs = input.ReadInt64();
            break;
          }
          case 26: {
            BattleId = input.ReadString();
            break;
          }
          case 34: {
            if (defender_ == null) {
              defender_ = new global::POGOProtos.Networking.Responses.BattleParticipantProto();
            }
            input.ReadMessage(defender_);
            break;
          }
          case 42: {
            if (battleLog_ == null) {
              battleLog_ = new global::POGOProtos.Networking.Responses.BattleLogProto();
            }
            input.ReadMessage(battleLog_);
            break;
          }
          case 50: {
            if (attacker_ == null) {
              attacker_ = new global::POGOProtos.Networking.Responses.BattleParticipantProto();
            }
            input.ReadMessage(attacker_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GymStartSessionResponse : pb::IMessage<GymStartSessionResponse> {
    private static readonly pb::MessageParser<GymStartSessionResponse> _parser = new pb::MessageParser<GymStartSessionResponse>(() => new GymStartSessionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GymStartSessionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.GymStartSessionResponseReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymStartSessionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymStartSessionResponse(GymStartSessionResponse other) : this() {
      result_ = other.result_;
      Battle = other.battle_ != null ? other.Battle.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymStartSessionResponse Clone() {
      return new GymStartSessionResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::POGOProtos.Networking.Responses.GymStartSessionResponse.Types.Result result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.GymStartSessionResponse.Types.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "battle" field.</summary>
    public const int BattleFieldNumber = 2;
    private global::POGOProtos.Networking.Responses.BattleProto battle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Responses.BattleProto Battle {
      get { return battle_; }
      set {
        battle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GymStartSessionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GymStartSessionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (!object.Equals(Battle, other.Battle)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (battle_ != null) hash ^= Battle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (battle_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Battle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (battle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Battle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GymStartSessionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.battle_ != null) {
        if (battle_ == null) {
          battle_ = new global::POGOProtos.Networking.Responses.BattleProto();
        }
        Battle.MergeFrom(other.Battle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::POGOProtos.Networking.Responses.GymStartSessionResponse.Types.Result) input.ReadEnum();
            break;
          }
          case 18: {
            if (battle_ == null) {
              battle_ = new global::POGOProtos.Networking.Responses.BattleProto();
            }
            input.ReadMessage(battle_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GymStartSessionOutProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Result {
        [pbr::OriginalName("UNSET")] Unset = 0,
        [pbr::OriginalName("SUCCESS")] Success = 1,
        [pbr::OriginalName("ERROR_GYM_NOT_FOUND")] ErrorGymNotFound = 2,
        [pbr::OriginalName("ERROR_GYM_NEUTRAL")] ErrorGymNeutral = 3,
        [pbr::OriginalName("ERROR_GYM_WRONG_TEAM")] ErrorGymWrongTeam = 4,
        [pbr::OriginalName("ERROR_GYM_EMPTY")] ErrorGymEmpty = 5,
        [pbr::OriginalName("ERROR_INVALID_DEFENDER")] ErrorInvalidDefender = 6,
        [pbr::OriginalName("ERROR_TRAINING_INVALID_ATTACKER_COUNT")] ErrorTrainingInvalidAttackerCount = 7,
        [pbr::OriginalName("ERROR_ALL_POKEMON_FAINTED")] ErrorAllPokemonFainted = 8,
        [pbr::OriginalName("ERROR_TOO_MANY_BATTLES")] ErrorTooManyBattles = 9,
        [pbr::OriginalName("ERROR_TOO_MANY_PLAYERS")] ErrorTooManyPlayers = 10,
        [pbr::OriginalName("ERROR_GYM_BATTLE_LOCKOUT")] ErrorGymBattleLockout = 11,
        [pbr::OriginalName("ERROR_PLAYER_BELOW_MINIMUM_LEVEL")] ErrorPlayerBelowMinimumLevel = 12,
        [pbr::OriginalName("ERROR_NOT_IN_RANGE")] ErrorNotInRange = 13,
        [pbr::OriginalName("ERROR_POI_INACCESSIBLE")] ErrorPoiInaccessible = 14,
        [pbr::OriginalName("ERROR_RAID_ACTIVE")] ErrorRaidActive = 15,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
