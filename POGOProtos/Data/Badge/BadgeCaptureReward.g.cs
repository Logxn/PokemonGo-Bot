// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/Badge/BadgeCaptureReward.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Data.Badge {

  /// <summary>Holder for reflection information generated from POGOProtos/Data/Badge/BadgeCaptureReward.proto</summary>
  public static partial class BadgeCaptureRewardReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Data/Badge/BadgeCaptureReward.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BadgeCaptureRewardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5QT0dPUHJvdG9zL0RhdGEvQmFkZ2UvQmFkZ2VDYXB0dXJlUmV3YXJkLnBy",
            "b3RvEhVQT0dPUHJvdG9zLkRhdGEuQmFkZ2UiVAoSQmFkZ2VDYXB0dXJlUmV3",
            "YXJkEiEKGWNhcHR1cmVfcmV3YXJkX211bHRpcGxpZXIYASABKAISGwoTYXZh",
            "dGFyX3RlbXBsYXRlX2lkcxgCIAMoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Badge.BadgeCaptureReward), global::POGOProtos.Data.Badge.BadgeCaptureReward.Parser, new[]{ "CaptureRewardMultiplier", "AvatarTemplateIds" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BadgeCaptureReward : pb::IMessage<BadgeCaptureReward> {
    private static readonly pb::MessageParser<BadgeCaptureReward> _parser = new pb::MessageParser<BadgeCaptureReward>(() => new BadgeCaptureReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BadgeCaptureReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Data.Badge.BadgeCaptureRewardReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BadgeCaptureReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BadgeCaptureReward(BadgeCaptureReward other) : this() {
      captureRewardMultiplier_ = other.captureRewardMultiplier_;
      avatarTemplateIds_ = other.avatarTemplateIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BadgeCaptureReward Clone() {
      return new BadgeCaptureReward(this);
    }

    /// <summary>Field number for the "capture_reward_multiplier" field.</summary>
    public const int CaptureRewardMultiplierFieldNumber = 1;
    private float captureRewardMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CaptureRewardMultiplier {
      get { return captureRewardMultiplier_; }
      set {
        captureRewardMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "avatar_template_ids" field.</summary>
    public const int AvatarTemplateIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_avatarTemplateIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> avatarTemplateIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AvatarTemplateIds {
      get { return avatarTemplateIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BadgeCaptureReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BadgeCaptureReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CaptureRewardMultiplier != other.CaptureRewardMultiplier) return false;
      if(!avatarTemplateIds_.Equals(other.avatarTemplateIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CaptureRewardMultiplier != 0F) hash ^= CaptureRewardMultiplier.GetHashCode();
      hash ^= avatarTemplateIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CaptureRewardMultiplier != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(CaptureRewardMultiplier);
      }
      avatarTemplateIds_.WriteTo(output, _repeated_avatarTemplateIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CaptureRewardMultiplier != 0F) {
        size += 1 + 4;
      }
      size += avatarTemplateIds_.CalculateSize(_repeated_avatarTemplateIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BadgeCaptureReward other) {
      if (other == null) {
        return;
      }
      if (other.CaptureRewardMultiplier != 0F) {
        CaptureRewardMultiplier = other.CaptureRewardMultiplier;
      }
      avatarTemplateIds_.Add(other.avatarTemplateIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            CaptureRewardMultiplier = input.ReadFloat();
            break;
          }
          case 18: {
            avatarTemplateIds_.AddEntriesFrom(input, _repeated_avatarTemplateIds_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
