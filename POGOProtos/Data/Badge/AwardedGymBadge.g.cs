// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/Badge/AwardedGymBadge.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Data.Badge {

  /// <summary>Holder for reflection information generated from POGOProtos/Data/Badge/AwardedGymBadge.proto</summary>
  public static partial class AwardedGymBadgeReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Data/Badge/AwardedGymBadge.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AwardedGymBadgeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CitQT0dPUHJvdG9zL0RhdGEvQmFkZ2UvQXdhcmRlZEd5bUJhZGdlLnByb3Rv",
            "EhVQT0dPUHJvdG9zLkRhdGEuQmFkZ2UaI1BPR09Qcm90b3MvRW51bXMvR3lt",
            "QmFkZ2VUeXBlLnByb3RvGilQT0dPUHJvdG9zL0RhdGEvQmFkZ2UvR3ltQmFk",
            "Z2VTdGF0cy5wcm90bxopUE9HT1Byb3Rvcy9EYXRhL1JhaWQvUGxheWVyUmFp",
            "ZEluZm8ucHJvdG8itgMKD0F3YXJkZWRHeW1CYWRnZRIPCgdmb3J0X2lkGAEg",
            "ASgJEjYKDmd5bV9iYWRnZV90eXBlGAIgASgOMh4uUE9HT1Byb3Rvcy5FbnVt",
            "cy5HeW1CYWRnZVR5cGUSDQoFc2NvcmUYAyABKA0SPQoPZ3ltX2JhZGdlX3N0",
            "YXRzGAQgASgLMiQuUE9HT1Byb3Rvcy5EYXRhLkJhZGdlLkd5bUJhZGdlU3Rh",
            "dHMSIAoYbGFzdF91cGRhdGVfdGltZXN0YW1wX21zGAUgASgEEh8KF2xhc3Rf",
            "Y2hlY2tfdGltZXN0YW1wX21zGAsgASgEEhUKDWVhcm5lZF9wb2ludHMYDCAB",
            "KA0SEAoIcHJvZ3Jlc3MYDSABKAISEAoIbGV2ZWxfdXAYDiABKAgSDAoEbmFt",
            "ZRgGIAEoCRIRCglpbWFnZV91cmwYByABKAkSEwoLZGVzY3JpcHRpb24YCCAB",
            "KAkSEAoIbGF0aXR1ZGUYCSABKAESEQoJbG9uZ2l0dWRlGAogASgBEjMKBXJh",
            "aWRzGA8gASgLMiQuUE9HT1Byb3Rvcy5EYXRhLlJhaWQuUGxheWVyUmFpZElu",
            "Zm9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::POGOProtos.Enums.GymBadgeTypeReflection.Descriptor, global::POGOProtos.Data.Badge.GymBadgeStatsReflection.Descriptor, global::POGOProtos.Data.Raid.PlayerRaidInfoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.Badge.AwardedGymBadge), global::POGOProtos.Data.Badge.AwardedGymBadge.Parser, new[]{ "FortId", "GymBadgeType", "Score", "GymBadgeStats", "LastUpdateTimestampMs", "LastCheckTimestampMs", "EarnedPoints", "Progress", "LevelUp", "Name", "ImageUrl", "Description", "Latitude", "Longitude", "Raids" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AwardedGymBadge : pb::IMessage<AwardedGymBadge> {
    private static readonly pb::MessageParser<AwardedGymBadge> _parser = new pb::MessageParser<AwardedGymBadge>(() => new AwardedGymBadge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AwardedGymBadge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Data.Badge.AwardedGymBadgeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AwardedGymBadge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AwardedGymBadge(AwardedGymBadge other) : this() {
      fortId_ = other.fortId_;
      gymBadgeType_ = other.gymBadgeType_;
      score_ = other.score_;
      GymBadgeStats = other.gymBadgeStats_ != null ? other.GymBadgeStats.Clone() : null;
      lastUpdateTimestampMs_ = other.lastUpdateTimestampMs_;
      lastCheckTimestampMs_ = other.lastCheckTimestampMs_;
      earnedPoints_ = other.earnedPoints_;
      progress_ = other.progress_;
      levelUp_ = other.levelUp_;
      name_ = other.name_;
      imageUrl_ = other.imageUrl_;
      description_ = other.description_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      Raids = other.raids_ != null ? other.Raids.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AwardedGymBadge Clone() {
      return new AwardedGymBadge(this);
    }

    /// <summary>Field number for the "fort_id" field.</summary>
    public const int FortIdFieldNumber = 1;
    private string fortId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FortId {
      get { return fortId_; }
      set {
        fortId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gym_badge_type" field.</summary>
    public const int GymBadgeTypeFieldNumber = 2;
    private global::POGOProtos.Enums.GymBadgeType gymBadgeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.GymBadgeType GymBadgeType {
      get { return gymBadgeType_; }
      set {
        gymBadgeType_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private uint score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "gym_badge_stats" field.</summary>
    public const int GymBadgeStatsFieldNumber = 4;
    private global::POGOProtos.Data.Badge.GymBadgeStats gymBadgeStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Badge.GymBadgeStats GymBadgeStats {
      get { return gymBadgeStats_; }
      set {
        gymBadgeStats_ = value;
      }
    }

    /// <summary>Field number for the "last_update_timestamp_ms" field.</summary>
    public const int LastUpdateTimestampMsFieldNumber = 5;
    private ulong lastUpdateTimestampMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastUpdateTimestampMs {
      get { return lastUpdateTimestampMs_; }
      set {
        lastUpdateTimestampMs_ = value;
      }
    }

    /// <summary>Field number for the "last_check_timestamp_ms" field.</summary>
    public const int LastCheckTimestampMsFieldNumber = 11;
    private ulong lastCheckTimestampMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastCheckTimestampMs {
      get { return lastCheckTimestampMs_; }
      set {
        lastCheckTimestampMs_ = value;
      }
    }

    /// <summary>Field number for the "earned_points" field.</summary>
    public const int EarnedPointsFieldNumber = 12;
    private uint earnedPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EarnedPoints {
      get { return earnedPoints_; }
      set {
        earnedPoints_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 13;
    private float progress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "level_up" field.</summary>
    public const int LevelUpFieldNumber = 14;
    private bool levelUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LevelUp {
      get { return levelUp_; }
      set {
        levelUp_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image_url" field.</summary>
    public const int ImageUrlFieldNumber = 7;
    private string imageUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUrl {
      get { return imageUrl_; }
      set {
        imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 8;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 9;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 10;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "raids" field.</summary>
    public const int RaidsFieldNumber = 15;
    private global::POGOProtos.Data.Raid.PlayerRaidInfo raids_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Raid.PlayerRaidInfo Raids {
      get { return raids_; }
      set {
        raids_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AwardedGymBadge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AwardedGymBadge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FortId != other.FortId) return false;
      if (GymBadgeType != other.GymBadgeType) return false;
      if (Score != other.Score) return false;
      if (!object.Equals(GymBadgeStats, other.GymBadgeStats)) return false;
      if (LastUpdateTimestampMs != other.LastUpdateTimestampMs) return false;
      if (LastCheckTimestampMs != other.LastCheckTimestampMs) return false;
      if (EarnedPoints != other.EarnedPoints) return false;
      if (Progress != other.Progress) return false;
      if (LevelUp != other.LevelUp) return false;
      if (Name != other.Name) return false;
      if (ImageUrl != other.ImageUrl) return false;
      if (Description != other.Description) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (!object.Equals(Raids, other.Raids)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FortId.Length != 0) hash ^= FortId.GetHashCode();
      if (GymBadgeType != 0) hash ^= GymBadgeType.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (gymBadgeStats_ != null) hash ^= GymBadgeStats.GetHashCode();
      if (LastUpdateTimestampMs != 0UL) hash ^= LastUpdateTimestampMs.GetHashCode();
      if (LastCheckTimestampMs != 0UL) hash ^= LastCheckTimestampMs.GetHashCode();
      if (EarnedPoints != 0) hash ^= EarnedPoints.GetHashCode();
      if (Progress != 0F) hash ^= Progress.GetHashCode();
      if (LevelUp != false) hash ^= LevelUp.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      if (raids_ != null) hash ^= Raids.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FortId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FortId);
      }
      if (GymBadgeType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GymBadgeType);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Score);
      }
      if (gymBadgeStats_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GymBadgeStats);
      }
      if (LastUpdateTimestampMs != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(LastUpdateTimestampMs);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (ImageUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ImageUrl);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Description);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Longitude);
      }
      if (LastCheckTimestampMs != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(LastCheckTimestampMs);
      }
      if (EarnedPoints != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(EarnedPoints);
      }
      if (Progress != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(Progress);
      }
      if (LevelUp != false) {
        output.WriteRawTag(112);
        output.WriteBool(LevelUp);
      }
      if (raids_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Raids);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FortId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FortId);
      }
      if (GymBadgeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GymBadgeType);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (gymBadgeStats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GymBadgeStats);
      }
      if (LastUpdateTimestampMs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastUpdateTimestampMs);
      }
      if (LastCheckTimestampMs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastCheckTimestampMs);
      }
      if (EarnedPoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EarnedPoints);
      }
      if (Progress != 0F) {
        size += 1 + 4;
      }
      if (LevelUp != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ImageUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      if (raids_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Raids);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AwardedGymBadge other) {
      if (other == null) {
        return;
      }
      if (other.FortId.Length != 0) {
        FortId = other.FortId;
      }
      if (other.GymBadgeType != 0) {
        GymBadgeType = other.GymBadgeType;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.gymBadgeStats_ != null) {
        if (gymBadgeStats_ == null) {
          gymBadgeStats_ = new global::POGOProtos.Data.Badge.GymBadgeStats();
        }
        GymBadgeStats.MergeFrom(other.GymBadgeStats);
      }
      if (other.LastUpdateTimestampMs != 0UL) {
        LastUpdateTimestampMs = other.LastUpdateTimestampMs;
      }
      if (other.LastCheckTimestampMs != 0UL) {
        LastCheckTimestampMs = other.LastCheckTimestampMs;
      }
      if (other.EarnedPoints != 0) {
        EarnedPoints = other.EarnedPoints;
      }
      if (other.Progress != 0F) {
        Progress = other.Progress;
      }
      if (other.LevelUp != false) {
        LevelUp = other.LevelUp;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ImageUrl.Length != 0) {
        ImageUrl = other.ImageUrl;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.raids_ != null) {
        if (raids_ == null) {
          raids_ = new global::POGOProtos.Data.Raid.PlayerRaidInfo();
        }
        Raids.MergeFrom(other.Raids);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FortId = input.ReadString();
            break;
          }
          case 16: {
            gymBadgeType_ = (global::POGOProtos.Enums.GymBadgeType) input.ReadEnum();
            break;
          }
          case 24: {
            Score = input.ReadUInt32();
            break;
          }
          case 34: {
            if (gymBadgeStats_ == null) {
              gymBadgeStats_ = new global::POGOProtos.Data.Badge.GymBadgeStats();
            }
            input.ReadMessage(gymBadgeStats_);
            break;
          }
          case 40: {
            LastUpdateTimestampMs = input.ReadUInt64();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 58: {
            ImageUrl = input.ReadString();
            break;
          }
          case 66: {
            Description = input.ReadString();
            break;
          }
          case 73: {
            Latitude = input.ReadDouble();
            break;
          }
          case 81: {
            Longitude = input.ReadDouble();
            break;
          }
          case 88: {
            LastCheckTimestampMs = input.ReadUInt64();
            break;
          }
          case 96: {
            EarnedPoints = input.ReadUInt32();
            break;
          }
          case 109: {
            Progress = input.ReadFloat();
            break;
          }
          case 112: {
            LevelUp = input.ReadBool();
            break;
          }
          case 122: {
            if (raids_ == null) {
              raids_ = new global::POGOProtos.Data.Raid.PlayerRaidInfo();
            }
            input.ReadMessage(raids_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
