// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Settings/NewsSettings.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Settings {

  /// <summary>Holder for reflection information generated from POGOProtos/Settings/NewsSettings.proto</summary>
  public static partial class NewsSettingsReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Settings/NewsSettings.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NewsSettingsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZQT0dPUHJvdG9zL1NldHRpbmdzL05ld3NTZXR0aW5ncy5wcm90bxITUE9H",
            "T1Byb3Rvcy5TZXR0aW5ncyKBAQoMTmV3c1NldHRpbmdzEjQKBG5ld3MYASAD",
            "KAsyJi5QT0dPUHJvdG9zLlNldHRpbmdzLk5ld3NTZXR0aW5ncy5OZXdzGjsK",
            "BE5ld3MSFgoObmV3c19idW5kbGVfaWQYASABKAkSGwoTZXhjbHVzaXZlX2Nv",
            "dW50cmllcxgCIAMoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.NewsSettings), global::POGOProtos.Settings.NewsSettings.Parser, new[]{ "News" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.NewsSettings.Types.News), global::POGOProtos.Settings.NewsSettings.Types.News.Parser, new[]{ "NewsBundleId", "ExclusiveCountries" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NewsSettings : pb::IMessage<NewsSettings> {
    private static readonly pb::MessageParser<NewsSettings> _parser = new pb::MessageParser<NewsSettings>(() => new NewsSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewsSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.NewsSettingsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewsSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewsSettings(NewsSettings other) : this() {
      news_ = other.news_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewsSettings Clone() {
      return new NewsSettings(this);
    }

    /// <summary>Field number for the "news" field.</summary>
    public const int NewsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::POGOProtos.Settings.NewsSettings.Types.News> _repeated_news_codec
        = pb::FieldCodec.ForMessage(10, global::POGOProtos.Settings.NewsSettings.Types.News.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Settings.NewsSettings.Types.News> news_ = new pbc::RepeatedField<global::POGOProtos.Settings.NewsSettings.Types.News>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Settings.NewsSettings.Types.News> News {
      get { return news_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewsSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewsSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!news_.Equals(other.news_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= news_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      news_.WriteTo(output, _repeated_news_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += news_.CalculateSize(_repeated_news_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewsSettings other) {
      if (other == null) {
        return;
      }
      news_.Add(other.news_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            news_.AddEntriesFrom(input, _repeated_news_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NewsSettings message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class News : pb::IMessage<News> {
        private static readonly pb::MessageParser<News> _parser = new pb::MessageParser<News>(() => new News());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<News> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Settings.NewsSettings.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public News() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public News(News other) : this() {
          newsBundleId_ = other.newsBundleId_;
          exclusiveCountries_ = other.exclusiveCountries_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public News Clone() {
          return new News(this);
        }

        /// <summary>Field number for the "news_bundle_id" field.</summary>
        public const int NewsBundleIdFieldNumber = 1;
        private string newsBundleId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NewsBundleId {
          get { return newsBundleId_; }
          set {
            newsBundleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "exclusive_countries" field.</summary>
        public const int ExclusiveCountriesFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_exclusiveCountries_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> exclusiveCountries_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> ExclusiveCountries {
          get { return exclusiveCountries_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as News);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(News other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NewsBundleId != other.NewsBundleId) return false;
          if(!exclusiveCountries_.Equals(other.exclusiveCountries_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (NewsBundleId.Length != 0) hash ^= NewsBundleId.GetHashCode();
          hash ^= exclusiveCountries_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (NewsBundleId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(NewsBundleId);
          }
          exclusiveCountries_.WriteTo(output, _repeated_exclusiveCountries_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (NewsBundleId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NewsBundleId);
          }
          size += exclusiveCountries_.CalculateSize(_repeated_exclusiveCountries_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(News other) {
          if (other == null) {
            return;
          }
          if (other.NewsBundleId.Length != 0) {
            NewsBundleId = other.NewsBundleId;
          }
          exclusiveCountries_.Add(other.exclusiveCountries_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                NewsBundleId = input.ReadString();
                break;
              }
              case 18: {
                exclusiveCountries_.AddEntriesFrom(input, _repeated_exclusiveCountries_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
