// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Map/Fort/GymDisplay.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Map.Fort {

  /// <summary>Holder for reflection information generated from POGOProtos/Map/Fort/GymDisplay.proto</summary>
  public static partial class GymDisplayReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Map/Fort/GymDisplay.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GymDisplayReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRQT0dPUHJvdG9zL01hcC9Gb3J0L0d5bURpc3BsYXkucHJvdG8SE1BPR09Q",
            "cm90b3MuTWFwLkZvcnQaIlBPR09Qcm90b3MvTWFwL0ZvcnQvR3ltRXZlbnQu",
            "cHJvdG8iqQEKCkd5bURpc3BsYXkSMAoJZ3ltX2V2ZW50GAEgAygLMh0uUE9H",
            "T1Byb3Rvcy5NYXAuRm9ydC5HeW1FdmVudBIUCgx0b3RhbF9neW1fY3AYAiAB",
            "KAUSIQoZbG93ZXN0X3Bva2Vtb25fbW90aXZhdGlvbhgDIAEoARIXCg9zbG90",
            "c19hdmFpbGFibGUYBCABKAUSFwoPb2NjdXBpZWRfbWlsbGlzGAUgASgDYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::POGOProtos.Map.Fort.GymEventReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Map.Fort.GymDisplay), global::POGOProtos.Map.Fort.GymDisplay.Parser, new[]{ "GymEvent", "TotalGymCp", "LowestPokemonMotivation", "SlotsAvailable", "OccupiedMillis" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GymDisplay : pb::IMessage<GymDisplay> {
    private static readonly pb::MessageParser<GymDisplay> _parser = new pb::MessageParser<GymDisplay>(() => new GymDisplay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GymDisplay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Map.Fort.GymDisplayReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymDisplay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymDisplay(GymDisplay other) : this() {
      gymEvent_ = other.gymEvent_.Clone();
      totalGymCp_ = other.totalGymCp_;
      lowestPokemonMotivation_ = other.lowestPokemonMotivation_;
      slotsAvailable_ = other.slotsAvailable_;
      occupiedMillis_ = other.occupiedMillis_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymDisplay Clone() {
      return new GymDisplay(this);
    }

    /// <summary>Field number for the "gym_event" field.</summary>
    public const int GymEventFieldNumber = 1;
    private static readonly pb::FieldCodec<global::POGOProtos.Map.Fort.GymEvent> _repeated_gymEvent_codec
        = pb::FieldCodec.ForMessage(10, global::POGOProtos.Map.Fort.GymEvent.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Map.Fort.GymEvent> gymEvent_ = new pbc::RepeatedField<global::POGOProtos.Map.Fort.GymEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Map.Fort.GymEvent> GymEvent {
      get { return gymEvent_; }
    }

    /// <summary>Field number for the "total_gym_cp" field.</summary>
    public const int TotalGymCpFieldNumber = 2;
    private int totalGymCp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalGymCp {
      get { return totalGymCp_; }
      set {
        totalGymCp_ = value;
      }
    }

    /// <summary>Field number for the "lowest_pokemon_motivation" field.</summary>
    public const int LowestPokemonMotivationFieldNumber = 3;
    private double lowestPokemonMotivation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LowestPokemonMotivation {
      get { return lowestPokemonMotivation_; }
      set {
        lowestPokemonMotivation_ = value;
      }
    }

    /// <summary>Field number for the "slots_available" field.</summary>
    public const int SlotsAvailableFieldNumber = 4;
    private int slotsAvailable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotsAvailable {
      get { return slotsAvailable_; }
      set {
        slotsAvailable_ = value;
      }
    }

    /// <summary>Field number for the "occupied_millis" field.</summary>
    public const int OccupiedMillisFieldNumber = 5;
    private long occupiedMillis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OccupiedMillis {
      get { return occupiedMillis_; }
      set {
        occupiedMillis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GymDisplay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GymDisplay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gymEvent_.Equals(other.gymEvent_)) return false;
      if (TotalGymCp != other.TotalGymCp) return false;
      if (LowestPokemonMotivation != other.LowestPokemonMotivation) return false;
      if (SlotsAvailable != other.SlotsAvailable) return false;
      if (OccupiedMillis != other.OccupiedMillis) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gymEvent_.GetHashCode();
      if (TotalGymCp != 0) hash ^= TotalGymCp.GetHashCode();
      if (LowestPokemonMotivation != 0D) hash ^= LowestPokemonMotivation.GetHashCode();
      if (SlotsAvailable != 0) hash ^= SlotsAvailable.GetHashCode();
      if (OccupiedMillis != 0L) hash ^= OccupiedMillis.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      gymEvent_.WriteTo(output, _repeated_gymEvent_codec);
      if (TotalGymCp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalGymCp);
      }
      if (LowestPokemonMotivation != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LowestPokemonMotivation);
      }
      if (SlotsAvailable != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SlotsAvailable);
      }
      if (OccupiedMillis != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(OccupiedMillis);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gymEvent_.CalculateSize(_repeated_gymEvent_codec);
      if (TotalGymCp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalGymCp);
      }
      if (LowestPokemonMotivation != 0D) {
        size += 1 + 8;
      }
      if (SlotsAvailable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotsAvailable);
      }
      if (OccupiedMillis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OccupiedMillis);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GymDisplay other) {
      if (other == null) {
        return;
      }
      gymEvent_.Add(other.gymEvent_);
      if (other.TotalGymCp != 0) {
        TotalGymCp = other.TotalGymCp;
      }
      if (other.LowestPokemonMotivation != 0D) {
        LowestPokemonMotivation = other.LowestPokemonMotivation;
      }
      if (other.SlotsAvailable != 0) {
        SlotsAvailable = other.SlotsAvailable;
      }
      if (other.OccupiedMillis != 0L) {
        OccupiedMillis = other.OccupiedMillis;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            gymEvent_.AddEntriesFrom(input, _repeated_gymEvent_codec);
            break;
          }
          case 16: {
            TotalGymCp = input.ReadInt32();
            break;
          }
          case 25: {
            LowestPokemonMotivation = input.ReadDouble();
            break;
          }
          case 32: {
            SlotsAvailable = input.ReadInt32();
            break;
          }
          case 40: {
            OccupiedMillis = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
